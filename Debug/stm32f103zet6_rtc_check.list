
stm32f103zet6_rtc_check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e14  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08007000  08007000  00017000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007330  08007330  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08007330  08007330  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007330  08007330  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007334  08007334  00017334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200001f4  0800752c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800752c  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009983  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d9f  00000000  00000000  00029ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e0  00000000  00000000  0002b940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000818  00000000  00000000  0002c220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001900f  00000000  00000000  0002ca38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f8e  00000000  00000000  00045a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000911da  00000000  00000000  0004d9d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000debaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000304c  00000000  00000000  000dec2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f4 	.word	0x200001f4
 8000204:	00000000 	.word	0x00000000
 8000208:	08006fe4 	.word	0x08006fe4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f8 	.word	0x200001f8
 8000224:	08006fe4 	.word	0x08006fe4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	d1ed      	bne.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_f2uiz>:
 8000e5c:	0042      	lsls	r2, r0, #1
 8000e5e:	d20e      	bcs.n	8000e7e <__aeabi_f2uiz+0x22>
 8000e60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e64:	d30b      	bcc.n	8000e7e <__aeabi_f2uiz+0x22>
 8000e66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6e:	d409      	bmi.n	8000e84 <__aeabi_f2uiz+0x28>
 8000e70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e78:	fa23 f002 	lsr.w	r0, r3, r2
 8000e7c:	4770      	bx	lr
 8000e7e:	f04f 0000 	mov.w	r0, #0
 8000e82:	4770      	bx	lr
 8000e84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e88:	d101      	bne.n	8000e8e <__aeabi_f2uiz+0x32>
 8000e8a:	0242      	lsls	r2, r0, #9
 8000e8c:	d102      	bne.n	8000e94 <__aeabi_f2uiz+0x38>
 8000e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e92:	4770      	bx	lr
 8000e94:	f04f 0000 	mov.w	r0, #0
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <Serial_str_ln>:
    int sizeofholder=strlen(temp);
    HAL_UART_Transmit(&huart1,temp,sizeofholder,2000);
}


void Serial_str_ln(char *holder){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
		  int sizeofholder=strlen(holder);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff f9bf 	bl	8000228 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart1,holder,sizeofholder,2000);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <Serial_str_ln+0x38>)
 8000eba:	f002 f993 	bl	80031e4 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,"\n",strlen("\n"),2000);
 8000ebe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4904      	ldr	r1, [pc, #16]	; (8000ed8 <Serial_str_ln+0x3c>)
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <Serial_str_ln+0x38>)
 8000ec8:	f002 f98c 	bl	80031e4 <HAL_UART_Transmit>
	  }
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000228 	.word	0x20000228
 8000ed8:	08007008 	.word	0x08007008

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 ff58 	bl	8001d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f832 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 f8d6 	bl	8001098 <MX_GPIO_Init>
  MX_RTC_Init();
 8000eec:	f000 f88e 	bl	800100c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000ef0:	f000 f8a8 	bl	8001044 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8000ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef8:	f000 ffae 	bl	8001e58 <HAL_Delay>
  Serial_str_ln(RTCBuff);
 8000efc:	4810      	ldr	r0, [pc, #64]	; (8000f40 <main+0x64>)
 8000efe:	f7ff ffcd 	bl	8000e9c <Serial_str_ln>
  rtc_begin();
 8000f02:	f000 fb11 	bl	8001528 <rtc_begin>
  HAL_Delay(1000);
 8000f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0a:	f000 ffa5 	bl	8001e58 <HAL_Delay>
  while (1)
  {
		if(HAL_GPIO_ReadPin(GPIOE, KEY0_Pin) == 0 && HAL_GPIO_ReadPin(GPIOE, KEY1_Pin) == 0)
 8000f0e:	2110      	movs	r1, #16
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <main+0x68>)
 8000f12:	f001 fa11 	bl	8002338 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10e      	bne.n	8000f3a <main+0x5e>
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <main+0x68>)
 8000f20:	f001 fa0a 	bl	8002338 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d107      	bne.n	8000f3a <main+0x5e>
		{
			memcpy(RTCBuff,"24-03-13 12:30:10",17);
 8000f2a:	2211      	movs	r2, #17
 8000f2c:	4906      	ldr	r1, [pc, #24]	; (8000f48 <main+0x6c>)
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <main+0x64>)
 8000f30:	f002 faf0 	bl	8003514 <memcpy>
//			__synchroniseRTCBuff(RTCBuff,1);

			rtc_set_date_time(RTCBuff);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <main+0x64>)
 8000f36:	f000 f929 	bl	800118c <rtc_set_date_time>
		}

		  rtc_get_date_and_time();
 8000f3a:	f000 f9c1 	bl	80012c0 <rtc_get_date_and_time>
		if(HAL_GPIO_ReadPin(GPIOE, KEY0_Pin) == 0 && HAL_GPIO_ReadPin(GPIOE, KEY1_Pin) == 0)
 8000f3e:	e7e6      	b.n	8000f0e <main+0x32>
 8000f40:	2000026c 	.word	0x2000026c
 8000f44:	40011800 	.word	0x40011800
 8000f48:	0800700c 	.word	0x0800700c

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b096      	sub	sp, #88	; 0x58
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f56:	2228      	movs	r2, #40	; 0x28
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fae5 	bl	800352a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
 8000f7e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000f80:	2305      	movs	r3, #5
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f92:	2301      	movs	r3, #1
 8000f94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fa0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fa4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fa00 	bl	80023b0 <HAL_RCC_OscConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fb6:	f000 f8e5 	bl	8001184 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fc6a 	bl	80028b0 <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fe2:	f000 f8cf 	bl	8001184 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fee:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fdf8 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ffe:	f000 f8c1 	bl	8001184 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3758      	adds	r7, #88	; 0x58
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MX_RTC_Init+0x30>)
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <MX_RTC_Init+0x34>)
 8001014:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_RTC_Init+0x30>)
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <MX_RTC_Init+0x30>)
 8001020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001024:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_RTC_Init+0x30>)
 8001028:	f001 ff7c 	bl	8002f24 <HAL_RTC_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001032:	f000 f8a7 	bl	8001184 <Error_Handler>
  /* USER CODE END Check_RTC_BKUP */
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000280 	.word	0x20000280
 8001040:	40002800 	.word	0x40002800

08001044 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART1_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART1_UART_Init+0x4c>)
 800107c:	f002 f865 	bl	800314a <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f000 f87d 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000228 	.word	0x20000228
 8001094:	40013800 	.word	0x40013800

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a31      	ldr	r2, [pc, #196]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a2b      	ldr	r2, [pc, #172]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a25      	ldr	r2, [pc, #148]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <MX_GPIO_Init+0xe0>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_GPIO_Init+0xe0>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2120      	movs	r1, #32
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <MX_GPIO_Init+0xe4>)
 8001112:	f001 f928 	bl	8002366 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2120      	movs	r1, #32
 800111a:	4819      	ldr	r0, [pc, #100]	; (8001180 <MX_GPIO_Init+0xe8>)
 800111c:	f001 f923 	bl	8002366 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8001120:	2318      	movs	r3, #24
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4619      	mov	r1, r3
 8001132:	4812      	ldr	r0, [pc, #72]	; (800117c <MX_GPIO_Init+0xe4>)
 8001134:	f000 ff96 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001138:	2320      	movs	r3, #32
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	480b      	ldr	r0, [pc, #44]	; (800117c <MX_GPIO_Init+0xe4>)
 8001150:	f000 ff88 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001154:	2320      	movs	r3, #32
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_GPIO_Init+0xe8>)
 800116c:	f000 ff7a 	bl	8002064 <HAL_GPIO_Init>

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	40011800 	.word	0x40011800
 8001180:	40010c00 	.word	0x40010c00

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118a:	e7fe      	b.n	800118a <Error_Handler+0x6>

0800118c <rtc_set_date_time>:

uint16_t numberOfDaysUntilMonth[12] = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };


  void rtc_set_date_time(char *rtc_buffer)
  {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

	  char temp_1[4];
	  char temp[4];

	  memcpy(temp,"20",2);
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	2202      	movs	r2, #2
 800119a:	4946      	ldr	r1, [pc, #280]	; (80012b4 <rtc_set_date_time+0x128>)
 800119c:	4618      	mov	r0, r3
 800119e:	f002 f9b9 	bl	8003514 <memcpy>
	  memcpy(temp_1,rtc_buffer,2);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	81bb      	strh	r3, [r7, #12]
	  strcat(temp,temp_1);
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 f813 	bl	80041e0 <strcat>
	  date_var.year = atoi(temp);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 f97a 	bl	80034b8 <atoi>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <rtc_set_date_time+0x12c>)
 80011ca:	805a      	strh	r2, [r3, #2]

	  memset(temp,0,4);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	2204      	movs	r2, #4
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 f9a8 	bl	800352a <memset>
	  memcpy(temp,rtc_buffer+3,2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3303      	adds	r3, #3
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	813b      	strh	r3, [r7, #8]
	  date_var.month = atoi(temp);
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 f965 	bl	80034b8 <atoi>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <rtc_set_date_time+0x12c>)
 80011f4:	809a      	strh	r2, [r3, #4]

	  memset(temp,0,4);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2204      	movs	r2, #4
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 f993 	bl	800352a <memset>
	  memcpy(temp,rtc_buffer+6,2);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3306      	adds	r3, #6
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	813b      	strh	r3, [r7, #8]
	  date_var.day = atoi(temp);
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	4618      	mov	r0, r3
 8001214:	f002 f950 	bl	80034b8 <atoi>
 8001218:	4603      	mov	r3, r0
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <rtc_set_date_time+0x12c>)
 800121e:	80da      	strh	r2, [r3, #6]

	  memset(temp,0,4);
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	2204      	movs	r2, #4
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f002 f97e 	bl	800352a <memset>
	  memcpy(temp,rtc_buffer+9,2);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3309      	adds	r3, #9
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	813b      	strh	r3, [r7, #8]
	  time_var.hours = atoi(temp);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f93b 	bl	80034b8 <atoi>
 8001242:	4603      	mov	r3, r0
 8001244:	b21a      	sxth	r2, r3
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <rtc_set_date_time+0x130>)
 8001248:	801a      	strh	r2, [r3, #0]

	  memset(temp,0,4);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2204      	movs	r2, #4
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f002 f969 	bl	800352a <memset>
	  memcpy(temp,rtc_buffer+12,2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	330c      	adds	r3, #12
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	813b      	strh	r3, [r7, #8]
	  time_var.minutes = atoi(temp);
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4618      	mov	r0, r3
 8001268:	f002 f926 	bl	80034b8 <atoi>
 800126c:	4603      	mov	r3, r0
 800126e:	b21a      	sxth	r2, r3
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <rtc_set_date_time+0x130>)
 8001272:	805a      	strh	r2, [r3, #2]

	  memset(temp,0,4);
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	2204      	movs	r2, #4
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f002 f954 	bl	800352a <memset>
	  memcpy(temp,rtc_buffer+15,2);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	330f      	adds	r3, #15
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	813b      	strh	r3, [r7, #8]
	  time_var.seconds = atoi(temp);
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4618      	mov	r0, r3
 8001292:	f002 f911 	bl	80034b8 <atoi>
 8001296:	4603      	mov	r3, r0
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <rtc_set_date_time+0x130>)
 800129c:	809a      	strh	r2, [r3, #4]
	  rtc_setTime(rtc_dateTimeToEpoch());
 800129e:	f000 fb1d 	bl	80018dc <rtc_dateTimeToEpoch>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f9e1 	bl	800166c <rtc_setTime>
  }
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	08007020 	.word	0x08007020
 80012b8:	20000294 	.word	0x20000294
 80012bc:	2000021c 	.word	0x2000021c

080012c0 <rtc_get_date_and_time>:

  int rtc_get_date_and_time(void)
  {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0

	  memset(RTCBuff,0,sizeof(RTCBuff));
 80012c6:	2214      	movs	r2, #20
 80012c8:	2100      	movs	r1, #0
 80012ca:	488e      	ldr	r0, [pc, #568]	; (8001504 <rtc_get_date_and_time+0x244>)
 80012cc:	f002 f92d 	bl	800352a <memset>
	  epochtime_ = rtc_getTime();
 80012d0:	f000 fa08 	bl	80016e4 <rtc_getTime>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b8c      	ldr	r3, [pc, #560]	; (8001508 <rtc_get_date_and_time+0x248>)
 80012d8:	601a      	str	r2, [r3, #0]
	  rtc_epochToTime(epochtime_);
 80012da:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <rtc_get_date_and_time+0x248>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fab6 	bl	8001850 <rtc_epochToTime>
	  rtc_epochToDate(epochtime_);
 80012e4:	4b88      	ldr	r3, [pc, #544]	; (8001508 <rtc_get_date_and_time+0x248>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fa1b 	bl	8001724 <rtc_epochToDate>
	  char temp[10];
	  sprintf(temp, "%d", date_var.year);
 80012ee:	4b87      	ldr	r3, [pc, #540]	; (800150c <rtc_get_date_and_time+0x24c>)
 80012f0:	885b      	ldrh	r3, [r3, #2]
 80012f2:	461a      	mov	r2, r3
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4986      	ldr	r1, [pc, #536]	; (8001510 <rtc_get_date_and_time+0x250>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 ff51 	bl	80041a0 <siprintf>
	  memcpy(RTCBuff,temp+2,2);
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	3302      	adds	r3, #2
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4a7f      	ldr	r2, [pc, #508]	; (8001504 <rtc_get_date_and_time+0x244>)
 8001308:	8013      	strh	r3, [r2, #0]
	  strcat(RTCBuff,"-");
 800130a:	487e      	ldr	r0, [pc, #504]	; (8001504 <rtc_get_date_and_time+0x244>)
 800130c:	f7fe ff8c 	bl	8000228 <strlen>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	4b7b      	ldr	r3, [pc, #492]	; (8001504 <rtc_get_date_and_time+0x244>)
 8001316:	4413      	add	r3, r2
 8001318:	497e      	ldr	r1, [pc, #504]	; (8001514 <rtc_get_date_and_time+0x254>)
 800131a:	461a      	mov	r2, r3
 800131c:	460b      	mov	r3, r1
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	8013      	strh	r3, [r2, #0]

	  memset(temp,0,sizeof(temp));
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	220a      	movs	r2, #10
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f002 f8fe 	bl	800352a <memset>
	  sprintf(temp, "%d", date_var.month);
 800132e:	4b77      	ldr	r3, [pc, #476]	; (800150c <rtc_get_date_and_time+0x24c>)
 8001330:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001334:	461a      	mov	r2, r3
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4975      	ldr	r1, [pc, #468]	; (8001510 <rtc_get_date_and_time+0x250>)
 800133a:	4618      	mov	r0, r3
 800133c:	f002 ff30 	bl	80041a0 <siprintf>
	  if(date_var.month < 10)
 8001340:	4b72      	ldr	r3, [pc, #456]	; (800150c <rtc_get_date_and_time+0x24c>)
 8001342:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001346:	2b09      	cmp	r3, #9
 8001348:	dc0b      	bgt.n	8001362 <rtc_get_date_and_time+0xa2>
	  {
		  strcat(RTCBuff,"0");
 800134a:	486e      	ldr	r0, [pc, #440]	; (8001504 <rtc_get_date_and_time+0x244>)
 800134c:	f7fe ff6c 	bl	8000228 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <rtc_get_date_and_time+0x244>)
 8001356:	4413      	add	r3, r2
 8001358:	496f      	ldr	r1, [pc, #444]	; (8001518 <rtc_get_date_and_time+0x258>)
 800135a:	461a      	mov	r2, r3
 800135c:	460b      	mov	r3, r1
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	8013      	strh	r3, [r2, #0]
	  }
	  strcat(RTCBuff,temp);
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4867      	ldr	r0, [pc, #412]	; (8001504 <rtc_get_date_and_time+0x244>)
 8001368:	f002 ff3a 	bl	80041e0 <strcat>


	  strcat(RTCBuff,"-");
 800136c:	4865      	ldr	r0, [pc, #404]	; (8001504 <rtc_get_date_and_time+0x244>)
 800136e:	f7fe ff5b 	bl	8000228 <strlen>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <rtc_get_date_and_time+0x244>)
 8001378:	4413      	add	r3, r2
 800137a:	4966      	ldr	r1, [pc, #408]	; (8001514 <rtc_get_date_and_time+0x254>)
 800137c:	461a      	mov	r2, r3
 800137e:	460b      	mov	r3, r1
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	8013      	strh	r3, [r2, #0]

	  memset(temp,0,sizeof(temp));
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	220a      	movs	r2, #10
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f002 f8cd 	bl	800352a <memset>
	  sprintf(temp, "%d", date_var.day);
 8001390:	4b5e      	ldr	r3, [pc, #376]	; (800150c <rtc_get_date_and_time+0x24c>)
 8001392:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001396:	461a      	mov	r2, r3
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	495d      	ldr	r1, [pc, #372]	; (8001510 <rtc_get_date_and_time+0x250>)
 800139c:	4618      	mov	r0, r3
 800139e:	f002 feff 	bl	80041a0 <siprintf>
	  if(date_var.day < 10)
 80013a2:	4b5a      	ldr	r3, [pc, #360]	; (800150c <rtc_get_date_and_time+0x24c>)
 80013a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013a8:	2b09      	cmp	r3, #9
 80013aa:	dc0b      	bgt.n	80013c4 <rtc_get_date_and_time+0x104>
	  {
		  strcat(RTCBuff,"0");
 80013ac:	4855      	ldr	r0, [pc, #340]	; (8001504 <rtc_get_date_and_time+0x244>)
 80013ae:	f7fe ff3b 	bl	8000228 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <rtc_get_date_and_time+0x244>)
 80013b8:	4413      	add	r3, r2
 80013ba:	4957      	ldr	r1, [pc, #348]	; (8001518 <rtc_get_date_and_time+0x258>)
 80013bc:	461a      	mov	r2, r3
 80013be:	460b      	mov	r3, r1
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	8013      	strh	r3, [r2, #0]
	  }
	  strcat(RTCBuff,temp);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	484e      	ldr	r0, [pc, #312]	; (8001504 <rtc_get_date_and_time+0x244>)
 80013ca:	f002 ff09 	bl	80041e0 <strcat>

	  strcat(RTCBuff," ");
 80013ce:	484d      	ldr	r0, [pc, #308]	; (8001504 <rtc_get_date_and_time+0x244>)
 80013d0:	f7fe ff2a 	bl	8000228 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <rtc_get_date_and_time+0x244>)
 80013da:	4413      	add	r3, r2
 80013dc:	494f      	ldr	r1, [pc, #316]	; (800151c <rtc_get_date_and_time+0x25c>)
 80013de:	461a      	mov	r2, r3
 80013e0:	460b      	mov	r3, r1
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	8013      	strh	r3, [r2, #0]

	  memset(temp,0,sizeof(temp));
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	220a      	movs	r2, #10
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 f89c 	bl	800352a <memset>
	  sprintf(temp, "%d", time_var.hours);
 80013f2:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <rtc_get_date_and_time+0x260>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	461a      	mov	r2, r3
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4944      	ldr	r1, [pc, #272]	; (8001510 <rtc_get_date_and_time+0x250>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fece 	bl	80041a0 <siprintf>
	  if(time_var.hours < 10)
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <rtc_get_date_and_time+0x260>)
 8001406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140a:	2b09      	cmp	r3, #9
 800140c:	dc0b      	bgt.n	8001426 <rtc_get_date_and_time+0x166>
	  {
		  strcat(RTCBuff,"0");
 800140e:	483d      	ldr	r0, [pc, #244]	; (8001504 <rtc_get_date_and_time+0x244>)
 8001410:	f7fe ff0a 	bl	8000228 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <rtc_get_date_and_time+0x244>)
 800141a:	4413      	add	r3, r2
 800141c:	493e      	ldr	r1, [pc, #248]	; (8001518 <rtc_get_date_and_time+0x258>)
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	8013      	strh	r3, [r2, #0]
	  }
	  strcat(RTCBuff,temp);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4836      	ldr	r0, [pc, #216]	; (8001504 <rtc_get_date_and_time+0x244>)
 800142c:	f002 fed8 	bl	80041e0 <strcat>

	  strcat(RTCBuff,":");
 8001430:	4834      	ldr	r0, [pc, #208]	; (8001504 <rtc_get_date_and_time+0x244>)
 8001432:	f7fe fef9 	bl	8000228 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	4b32      	ldr	r3, [pc, #200]	; (8001504 <rtc_get_date_and_time+0x244>)
 800143c:	4413      	add	r3, r2
 800143e:	4939      	ldr	r1, [pc, #228]	; (8001524 <rtc_get_date_and_time+0x264>)
 8001440:	461a      	mov	r2, r3
 8001442:	460b      	mov	r3, r1
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	8013      	strh	r3, [r2, #0]

	  memset(temp,0,sizeof(temp));
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	220a      	movs	r2, #10
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f002 f86b 	bl	800352a <memset>
	  sprintf(temp, "%d", time_var.minutes);
 8001454:	4b32      	ldr	r3, [pc, #200]	; (8001520 <rtc_get_date_and_time+0x260>)
 8001456:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800145a:	461a      	mov	r2, r3
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	492c      	ldr	r1, [pc, #176]	; (8001510 <rtc_get_date_and_time+0x250>)
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fe9d 	bl	80041a0 <siprintf>
	  if(time_var.minutes < 10)
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <rtc_get_date_and_time+0x260>)
 8001468:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800146c:	2b09      	cmp	r3, #9
 800146e:	dc0b      	bgt.n	8001488 <rtc_get_date_and_time+0x1c8>
	  {
		  strcat(RTCBuff,"0");
 8001470:	4824      	ldr	r0, [pc, #144]	; (8001504 <rtc_get_date_and_time+0x244>)
 8001472:	f7fe fed9 	bl	8000228 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <rtc_get_date_and_time+0x244>)
 800147c:	4413      	add	r3, r2
 800147e:	4926      	ldr	r1, [pc, #152]	; (8001518 <rtc_get_date_and_time+0x258>)
 8001480:	461a      	mov	r2, r3
 8001482:	460b      	mov	r3, r1
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	8013      	strh	r3, [r2, #0]
	  }
	  strcat(RTCBuff,temp);
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	481d      	ldr	r0, [pc, #116]	; (8001504 <rtc_get_date_and_time+0x244>)
 800148e:	f002 fea7 	bl	80041e0 <strcat>

	  strcat(RTCBuff,":");
 8001492:	481c      	ldr	r0, [pc, #112]	; (8001504 <rtc_get_date_and_time+0x244>)
 8001494:	f7fe fec8 	bl	8000228 <strlen>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <rtc_get_date_and_time+0x244>)
 800149e:	4413      	add	r3, r2
 80014a0:	4920      	ldr	r1, [pc, #128]	; (8001524 <rtc_get_date_and_time+0x264>)
 80014a2:	461a      	mov	r2, r3
 80014a4:	460b      	mov	r3, r1
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	8013      	strh	r3, [r2, #0]

	  memset(temp,0,sizeof(temp));
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	220a      	movs	r2, #10
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 f83a 	bl	800352a <memset>
	  sprintf(temp, "%d", time_var.seconds);
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <rtc_get_date_and_time+0x260>)
 80014b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014bc:	461a      	mov	r2, r3
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4913      	ldr	r1, [pc, #76]	; (8001510 <rtc_get_date_and_time+0x250>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fe6c 	bl	80041a0 <siprintf>
	  if(time_var.seconds < 10)
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <rtc_get_date_and_time+0x260>)
 80014ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014ce:	2b09      	cmp	r3, #9
 80014d0:	dc0b      	bgt.n	80014ea <rtc_get_date_and_time+0x22a>
	  {
		  strcat(RTCBuff,"0");
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <rtc_get_date_and_time+0x244>)
 80014d4:	f7fe fea8 	bl	8000228 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <rtc_get_date_and_time+0x244>)
 80014de:	4413      	add	r3, r2
 80014e0:	490d      	ldr	r1, [pc, #52]	; (8001518 <rtc_get_date_and_time+0x258>)
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	8013      	strh	r3, [r2, #0]
	  }
	  strcat(RTCBuff,temp);
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <rtc_get_date_and_time+0x244>)
 80014f0:	f002 fe76 	bl	80041e0 <strcat>

	  Serial_str_ln(RTCBuff);
 80014f4:	4803      	ldr	r0, [pc, #12]	; (8001504 <rtc_get_date_and_time+0x244>)
 80014f6:	f7ff fcd1 	bl	8000e9c <Serial_str_ln>
//	  rtc_printDate();
//	  rtc_printtime_(1);
  }
 80014fa:	bf00      	nop
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000026c 	.word	0x2000026c
 8001508:	20000224 	.word	0x20000224
 800150c:	20000294 	.word	0x20000294
 8001510:	08007024 	.word	0x08007024
 8001514:	08007028 	.word	0x08007028
 8001518:	0800702c 	.word	0x0800702c
 800151c:	08007030 	.word	0x08007030
 8001520:	2000021c 	.word	0x2000021c
 8001524:	08007034 	.word	0x08007034

08001528 <rtc_begin>:




int rtc_begin()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  int isInit = (BKP_DR[RTC_INIT_REG] & RTC_INIT_FLAG) == RTC_INIT_FLAG;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <rtc_begin+0x58>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b01      	cmp	r3, #1
 8001538:	bf0c      	ite	eq
 800153a:	2301      	moveq	r3, #1
 800153c:	2300      	movne	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	607b      	str	r3, [r7, #4]
  RCC_APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <rtc_begin+0x5c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <rtc_begin+0x5c>)
 8001548:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 800154c:	61d3      	str	r3, [r2, #28]
  if (isInit)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00d      	beq.n	8001570 <rtc_begin+0x48>
  {
	    RTC_CRL &= ~RTC_CRL_RSF;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <rtc_begin+0x60>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <rtc_begin+0x60>)
 800155a:	f023 0308 	bic.w	r3, r3, #8
 800155e:	6053      	str	r3, [r2, #4]
	    while ((RTC_CRL & RTC_CRL_RSF) == 0);
 8001560:	bf00      	nop
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <rtc_begin+0x60>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f9      	beq.n	8001562 <rtc_begin+0x3a>
 800156e:	e001      	b.n	8001574 <rtc_begin+0x4c>
  }
  else
  {
	  rtc_init();
 8001570:	f000 f80c 	bl	800158c <rtc_init>
  }
  return isInit;
 8001574:	687b      	ldr	r3, [r7, #4]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40006c04 	.word	0x40006c04
 8001584:	40021000 	.word	0x40021000
 8001588:	40002800 	.word	0x40002800

0800158c <rtc_init>:

void rtc_init()
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  PWR_CR |= PWR_CR_DBP;
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <rtc_init+0xd0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a31      	ldr	r2, [pc, #196]	; (800165c <rtc_init+0xd0>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]
  RCC_BDCR |= RCC_BDCR_BDRST; // Resets the entire Backup domain
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <rtc_init+0xd4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <rtc_init+0xd4>)
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a6:	6213      	str	r3, [r2, #32]
  RCC_BDCR &= ~RCC_BDCR_BDRST; // Deactivates reset of entire Backup domain
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <rtc_init+0xd4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <rtc_init+0xd4>)
 80015ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b2:	6213      	str	r3, [r2, #32]
  RCC_BDCR |= RCC_BDCR_LSEON; // Enables external low-speed oscillator (LSE)
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <rtc_init+0xd4>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <rtc_init+0xd4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
  while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0); // Waits for LSE ready
 80015c0:	bf00      	nop
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <rtc_init+0xd4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f9      	beq.n	80015c2 <rtc_init+0x36>
  RCC_BDCR |= RCC_BDCR_RTCSEL_LSE; // Selects LSE as RTC clock
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <rtc_init+0xd4>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <rtc_init+0xd4>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6213      	str	r3, [r2, #32]
  RCC_BDCR |= RCC_BDCR_RTCEN; // Enables the RTC
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <rtc_init+0xd4>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <rtc_init+0xd4>)
 80015e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e4:	6213      	str	r3, [r2, #32]

  RTC_CRL &= ~RTC_CRL_RSF;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <rtc_init+0xd8>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <rtc_init+0xd8>)
 80015ec:	f023 0308 	bic.w	r3, r3, #8
 80015f0:	6053      	str	r3, [r2, #4]
  while ((RTC_CRL & RTC_CRL_RSF) == 0);
 80015f2:	bf00      	nop
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <rtc_init+0xd8>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f9      	beq.n	80015f4 <rtc_init+0x68>

  while ((RTC_CRL & RTC_CRL_RTOFF) == 0);
 8001600:	bf00      	nop
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <rtc_init+0xd8>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f9      	beq.n	8001602 <rtc_init+0x76>
  RTC_CRL |= RTC_CRL_CNF;
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <rtc_init+0xd8>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <rtc_init+0xd8>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	6053      	str	r3, [r2, #4]
  RTC_PRLL = 0x7FFF;
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <rtc_init+0xd8>)
 800161c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001620:	60da      	str	r2, [r3, #12]
  RTC_CRL &= ~RTC_CRL_CNF;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <rtc_init+0xd8>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <rtc_init+0xd8>)
 8001628:	f023 0310 	bic.w	r3, r3, #16
 800162c:	6053      	str	r3, [r2, #4]
  while ((RTC_CRL & RTC_CRL_RTOFF) == 0);
 800162e:	bf00      	nop
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <rtc_init+0xd8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0320 	and.w	r3, r3, #32
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f9      	beq.n	8001630 <rtc_init+0xa4>
  BKP_DR[RTC_INIT_REG] |= RTC_INIT_FLAG; // Signals that RTC initilized
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <rtc_init+0xdc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a09      	ldr	r2, [pc, #36]	; (8001668 <rtc_init+0xdc>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6013      	str	r3, [r2, #0]
  PWR_CR &= ~PWR_CR_DBP;
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <rtc_init+0xd0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a03      	ldr	r2, [pc, #12]	; (800165c <rtc_init+0xd0>)
 800164e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40007000 	.word	0x40007000
 8001660:	40021000 	.word	0x40021000
 8001664:	40002800 	.word	0x40002800
 8001668:	40006c04 	.word	0x40006c04

0800166c <rtc_setTime>:


void rtc_setTime(uint32_t time)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  PWR_CR |= PWR_CR_DBP;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <rtc_setTime+0x70>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a18      	ldr	r2, [pc, #96]	; (80016dc <rtc_setTime+0x70>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	6013      	str	r3, [r2, #0]
  while ((RTC_CRL & RTC_CRL_RTOFF) == 0);
 8001680:	bf00      	nop
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <rtc_setTime+0x74>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f9      	beq.n	8001682 <rtc_setTime+0x16>
  RTC_CRL |= RTC_CRL_CNF;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <rtc_setTime+0x74>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <rtc_setTime+0x74>)
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	6053      	str	r3, [r2, #4]
  RTC_CNTH = time >> 16;
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <rtc_setTime+0x74>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	0c1b      	lsrs	r3, r3, #16
 80016a0:	6193      	str	r3, [r2, #24]
  RTC_CNTL = time & 0xFFFF;
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <rtc_setTime+0x74>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	61d3      	str	r3, [r2, #28]
  RTC_CRL &= ~RTC_CRL_CNF;
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <rtc_setTime+0x74>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <rtc_setTime+0x74>)
 80016b0:	f023 0310 	bic.w	r3, r3, #16
 80016b4:	6053      	str	r3, [r2, #4]
  while ((RTC_CRL & RTC_CRL_RTOFF) == 0);
 80016b6:	bf00      	nop
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <rtc_setTime+0x74>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f9      	beq.n	80016b8 <rtc_setTime+0x4c>
  PWR_CR &= ~PWR_CR_DBP;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <rtc_setTime+0x70>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <rtc_setTime+0x70>)
 80016ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40007000 	.word	0x40007000
 80016e0:	40002800 	.word	0x40002800

080016e4 <rtc_getTime>:
// over. If it has, then read the low word a second time to get its new, rolled
// over value. See the RTC_ReadTimeCounter() function in
// system/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rtc.c of the
// STM32duino Core.
uint32_t rtc_getTime()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  uint16_t high1 = RTC_CNTH;
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <rtc_getTime+0x3c>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	80fb      	strh	r3, [r7, #6]
  uint16_t low = RTC_CNTL;
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <rtc_getTime+0x3c>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	80bb      	strh	r3, [r7, #4]
  uint16_t high2 = RTC_CNTH;
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <rtc_getTime+0x3c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	807b      	strh	r3, [r7, #2]

  if (high1 != high2) {
 80016fc:	88fa      	ldrh	r2, [r7, #6]
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	429a      	cmp	r2, r3
 8001702:	d004      	beq.n	800170e <rtc_getTime+0x2a>
    low = RTC_CNTL;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <rtc_getTime+0x3c>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	80bb      	strh	r3, [r7, #4]
    high1 = high2;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	80fb      	strh	r3, [r7, #6]
  }

  return (high1 << 16) | low;
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	4313      	orrs	r3, r2
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40002800 	.word	0x40002800

08001724 <rtc_epochToDate>:
  else
    return 0;
}

void rtc_epochToDate(uint32_t time)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint16_t sod, dom;
  date_var.numberOfDays = time / 86400;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a44      	ldr	r2, [pc, #272]	; (8001840 <rtc_epochToDate+0x11c>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	0c1b      	lsrs	r3, r3, #16
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <rtc_epochToDate+0x120>)
 800173a:	801a      	strh	r2, [r3, #0]
  date_var.year = date_var.numberOfDays / 365 + 1970;
 800173c:	4b41      	ldr	r3, [pc, #260]	; (8001844 <rtc_epochToDate+0x120>)
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	4b41      	ldr	r3, [pc, #260]	; (8001848 <rtc_epochToDate+0x124>)
 8001742:	fba3 1302 	umull	r1, r3, r3, r2
 8001746:	1ad2      	subs	r2, r2, r3
 8001748:	0852      	lsrs	r2, r2, #1
 800174a:	4413      	add	r3, r2
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	b29b      	uxth	r3, r3
 8001750:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <rtc_epochToDate+0x120>)
 8001758:	805a      	strh	r2, [r3, #2]
  sod = rtc_getSumOfDayFromYearValue(date_var.year);
 800175a:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <rtc_epochToDate+0x120>)
 800175c:	885b      	ldrh	r3, [r3, #2]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f9aa 	bl	8001ab8 <rtc_getSumOfDayFromYearValue>
 8001764:	4603      	mov	r3, r0
 8001766:	81fb      	strh	r3, [r7, #14]
  if (sod > date_var.numberOfDays)
 8001768:	4b36      	ldr	r3, [pc, #216]	; (8001844 <rtc_epochToDate+0x120>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	89fa      	ldrh	r2, [r7, #14]
 800176e:	429a      	cmp	r2, r3
 8001770:	d90c      	bls.n	800178c <rtc_epochToDate+0x68>
    sod = rtc_getSumOfDayFromYearValue(--date_var.year);
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <rtc_epochToDate+0x120>)
 8001774:	885b      	ldrh	r3, [r3, #2]
 8001776:	3b01      	subs	r3, #1
 8001778:	b29a      	uxth	r2, r3
 800177a:	4b32      	ldr	r3, [pc, #200]	; (8001844 <rtc_epochToDate+0x120>)
 800177c:	805a      	strh	r2, [r3, #2]
 800177e:	4b31      	ldr	r3, [pc, #196]	; (8001844 <rtc_epochToDate+0x120>)
 8001780:	885b      	ldrh	r3, [r3, #2]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f998 	bl	8001ab8 <rtc_getSumOfDayFromYearValue>
 8001788:	4603      	mov	r3, r0
 800178a:	81fb      	strh	r3, [r7, #14]
  date_var.isLeapYear = ((date_var.year - 1968) % 4) == 0 && date_var.year != 2100;
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <rtc_epochToDate+0x120>)
 800178e:	885b      	ldrh	r3, [r3, #2]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <rtc_epochToDate+0x84>
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <rtc_epochToDate+0x120>)
 800179a:	885b      	ldrh	r3, [r3, #2]
 800179c:	f640 0234 	movw	r2, #2100	; 0x834
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d001      	beq.n	80017a8 <rtc_epochToDate+0x84>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <rtc_epochToDate+0x86>
 80017a8:	2300      	movs	r3, #0
 80017aa:	4a26      	ldr	r2, [pc, #152]	; (8001844 <rtc_epochToDate+0x120>)
 80017ac:	60d3      	str	r3, [r2, #12]
  sod = date_var.numberOfDays - sod;
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <rtc_epochToDate+0x120>)
 80017b0:	881a      	ldrh	r2, [r3, #0]
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	81fb      	strh	r3, [r7, #14]
  for (int8_t i = DECEMBER; i >= JANUARY; i--) {
 80017b8:	230b      	movs	r3, #11
 80017ba:	737b      	strb	r3, [r7, #13]
 80017bc:	e026      	b.n	800180c <rtc_epochToDate+0xe8>
    dom = rtc_getNumberOfDaysUntilMonth(i, date_var.isLeapYear);
 80017be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <rtc_epochToDate+0x120>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f000 f954 	bl	8001a78 <rtc_getNumberOfDaysUntilMonth>
 80017d0:	4603      	mov	r3, r0
 80017d2:	817b      	strh	r3, [r7, #10]
    if (dom <= sod) {
 80017d4:	897a      	ldrh	r2, [r7, #10]
 80017d6:	89fb      	ldrh	r3, [r7, #14]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d811      	bhi.n	8001800 <rtc_epochToDate+0xdc>
      date_var.day = sod - dom + 1;
 80017dc:	89fa      	ldrh	r2, [r7, #14]
 80017de:	897b      	ldrh	r3, [r7, #10]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <rtc_epochToDate+0x120>)
 80017ec:	80da      	strh	r2, [r3, #6]
      date_var.month = i + 1;
 80017ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <rtc_epochToDate+0x120>)
 80017fc:	809a      	strh	r2, [r3, #4]
      break;
 80017fe:	e009      	b.n	8001814 <rtc_epochToDate+0xf0>
  for (int8_t i = DECEMBER; i >= JANUARY; i--) {
 8001800:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	737b      	strb	r3, [r7, #13]
 800180c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001810:	2b00      	cmp	r3, #0
 8001812:	dad4      	bge.n	80017be <rtc_epochToDate+0x9a>
    }
  }
  date_var.weekday = (date_var.numberOfDays + 4) % 7;
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <rtc_epochToDate+0x120>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	1d1a      	adds	r2, r3, #4
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <rtc_epochToDate+0x128>)
 800181c:	fb83 1302 	smull	r1, r3, r3, r2
 8001820:	4413      	add	r3, r2
 8001822:	1099      	asrs	r1, r3, #2
 8001824:	17d3      	asrs	r3, r2, #31
 8001826:	1ac9      	subs	r1, r1, r3
 8001828:	460b      	mov	r3, r1
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	1a5b      	subs	r3, r3, r1
 800182e:	1ad1      	subs	r1, r2, r3
 8001830:	b2ca      	uxtb	r2, r1
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <rtc_epochToDate+0x120>)
 8001834:	721a      	strb	r2, [r3, #8]
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	c22e4507 	.word	0xc22e4507
 8001844:	20000294 	.word	0x20000294
 8001848:	6719f361 	.word	0x6719f361
 800184c:	92492493 	.word	0x92492493

08001850 <rtc_epochToTime>:

void rtc_epochToTime(uint32_t time)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tm = time % 86400;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <rtc_epochToTime+0x78>)
 800185c:	fba2 1203 	umull	r1, r2, r2, r3
 8001860:	0c12      	lsrs	r2, r2, #16
 8001862:	491a      	ldr	r1, [pc, #104]	; (80018cc <rtc_epochToTime+0x7c>)
 8001864:	fb01 f202 	mul.w	r2, r1, r2
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
  time_var.hours = tm / 3600;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <rtc_epochToTime+0x80>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	0adb      	lsrs	r3, r3, #11
 8001876:	b21a      	sxth	r2, r3
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <rtc_epochToTime+0x84>)
 800187a:	801a      	strh	r2, [r3, #0]
  tm %= 3600;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <rtc_epochToTime+0x80>)
 8001880:	fba2 1203 	umull	r1, r2, r2, r3
 8001884:	0ad2      	lsrs	r2, r2, #11
 8001886:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800188a:	fb01 f202 	mul.w	r2, r1, r2
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  time_var.minutes = tm / 60;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <rtc_epochToTime+0x88>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	b21a      	sxth	r2, r3
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <rtc_epochToTime+0x84>)
 80018a0:	805a      	strh	r2, [r3, #2]
  time_var.seconds = tm % 60;
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <rtc_epochToTime+0x88>)
 80018a6:	fba3 2301 	umull	r2, r3, r3, r1
 80018aa:	095a      	lsrs	r2, r3, #5
 80018ac:	4613      	mov	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	1aca      	subs	r2, r1, r3
 80018b6:	b212      	sxth	r2, r2
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <rtc_epochToTime+0x84>)
 80018ba:	809a      	strh	r2, [r3, #4]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	c22e4507 	.word	0xc22e4507
 80018cc:	00015180 	.word	0x00015180
 80018d0:	91a2b3c5 	.word	0x91a2b3c5
 80018d4:	2000021c 	.word	0x2000021c
 80018d8:	88888889 	.word	0x88888889

080018dc <rtc_dateTimeToEpoch>:

uint32_t rtc_dateTimeToEpoch(void)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
  uint32_t time;
  if (date_var.month > 0) {
 80018e2:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80018e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	dd26      	ble.n	800193a <rtc_dateTimeToEpoch+0x5e>
	  date_var.year += (date_var.month - 1) / 12;
 80018ec:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80018ee:	885a      	ldrh	r2, [r3, #2]
 80018f0:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80018f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	495c      	ldr	r1, [pc, #368]	; (8001a6c <rtc_dateTimeToEpoch+0x190>)
 80018fa:	fb81 0103 	smull	r0, r1, r1, r3
 80018fe:	1049      	asrs	r1, r1, #1
 8001900:	17db      	asrs	r3, r3, #31
 8001902:	1acb      	subs	r3, r1, r3
 8001904:	b29b      	uxth	r3, r3
 8001906:	4413      	add	r3, r2
 8001908:	b29a      	uxth	r2, r3
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 800190c:	805a      	strh	r2, [r3, #2]
	  date_var.month = (date_var.month - 1) % 12 + 1;
 800190e:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 8001910:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <rtc_dateTimeToEpoch+0x190>)
 8001918:	fb83 1302 	smull	r1, r3, r3, r2
 800191c:	1059      	asrs	r1, r3, #1
 800191e:	17d3      	asrs	r3, r2, #31
 8001920:	1ac9      	subs	r1, r1, r3
 8001922:	460b      	mov	r3, r1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	440b      	add	r3, r1
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	1ad1      	subs	r1, r2, r3
 800192c:	b28b      	uxth	r3, r1
 800192e:	3301      	adds	r3, #1
 8001930:	b29b      	uxth	r3, r3
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 8001936:	809a      	strh	r2, [r3, #4]
 8001938:	e027      	b.n	800198a <rtc_dateTimeToEpoch+0xae>
  }
  else {
	  date_var.year -= 1 - date_var.month / 12;
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 800193c:	885a      	ldrh	r2, [r3, #2]
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 8001940:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001944:	4949      	ldr	r1, [pc, #292]	; (8001a6c <rtc_dateTimeToEpoch+0x190>)
 8001946:	fb81 0103 	smull	r0, r1, r1, r3
 800194a:	1049      	asrs	r1, r1, #1
 800194c:	17db      	asrs	r3, r3, #31
 800194e:	1acb      	subs	r3, r1, r3
 8001950:	b21b      	sxth	r3, r3
 8001952:	b29b      	uxth	r3, r3
 8001954:	4413      	add	r3, r2
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 800195e:	805a      	strh	r2, [r3, #2]
	  date_var.month = 12 + date_var.month % 12;
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 8001962:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <rtc_dateTimeToEpoch+0x190>)
 8001968:	fb83 1302 	smull	r1, r3, r3, r2
 800196c:	1059      	asrs	r1, r3, #1
 800196e:	17d3      	asrs	r3, r2, #31
 8001970:	1ac9      	subs	r1, r1, r3
 8001972:	460b      	mov	r3, r1
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	440b      	add	r3, r1
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	b21b      	sxth	r3, r3
 800197e:	b29b      	uxth	r3, r3
 8001980:	330c      	adds	r3, #12
 8001982:	b29b      	uxth	r3, r3
 8001984:	b21a      	sxth	r2, r3
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 8001988:	809a      	strh	r2, [r3, #4]
  }
  if (date_var.year < 1970)
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 800198c:	885b      	ldrh	r3, [r3, #2]
 800198e:	f240 72b1 	movw	r2, #1969	; 0x7b1
 8001992:	4293      	cmp	r3, r2
 8001994:	d804      	bhi.n	80019a0 <rtc_dateTimeToEpoch+0xc4>
	  date_var.year = 1970;
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 8001998:	f240 72b2 	movw	r2, #1970	; 0x7b2
 800199c:	805a      	strh	r2, [r3, #2]
 800199e:	e009      	b.n	80019b4 <rtc_dateTimeToEpoch+0xd8>
  else if (date_var.year > 2105)
 80019a0:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80019a2:	885b      	ldrh	r3, [r3, #2]
 80019a4:	f640 0239 	movw	r2, #2105	; 0x839
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d903      	bls.n	80019b4 <rtc_dateTimeToEpoch+0xd8>
	  date_var.year = 2105;
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80019ae:	f640 0239 	movw	r2, #2105	; 0x839
 80019b2:	805a      	strh	r2, [r3, #2]
  date_var.isLeapYear = ((date_var.year - 1968) % 4) == 0 && date_var.year != 2100;
 80019b4:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80019b6:	885b      	ldrh	r3, [r3, #2]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d107      	bne.n	80019d0 <rtc_dateTimeToEpoch+0xf4>
 80019c0:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80019c2:	885b      	ldrh	r3, [r3, #2]
 80019c4:	f640 0234 	movw	r2, #2100	; 0x834
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d001      	beq.n	80019d0 <rtc_dateTimeToEpoch+0xf4>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <rtc_dateTimeToEpoch+0xf6>
 80019d0:	2300      	movs	r3, #0
 80019d2:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80019d4:	60d3      	str	r3, [r2, #12]
  date_var.numberOfDays = rtc_getSumOfDayFromYearValue(date_var.year) + rtc_getNumberOfDaysUntilMonth(date_var.month - 1, date_var.isLeapYear) + date_var.day - 1;
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80019d8:	885b      	ldrh	r3, [r3, #2]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f86c 	bl	8001ab8 <rtc_getSumOfDayFromYearValue>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461c      	mov	r4, r3
 80019e4:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80019e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f000 f83d 	bl	8001a78 <rtc_getNumberOfDaysUntilMonth>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4423      	add	r3, r4
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 8001a06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 8001a16:	801a      	strh	r2, [r3, #0]
  time = date_var.numberOfDays * 86400 + time_var.hours * 3600 + time_var.minutes * 60 + time_var.seconds;
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <rtc_dateTimeToEpoch+0x18c>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <rtc_dateTimeToEpoch+0x194>)
 8001a20:	fb03 f202 	mul.w	r2, r3, r2
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <rtc_dateTimeToEpoch+0x198>)
 8001a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a30:	fb03 f301 	mul.w	r3, r3, r1
 8001a34:	441a      	add	r2, r3
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <rtc_dateTimeToEpoch+0x198>)
 8001a38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	460b      	mov	r3, r1
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	1a5b      	subs	r3, r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <rtc_dateTimeToEpoch+0x198>)
 8001a4a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	607b      	str	r3, [r7, #4]
  rtc_epochToDate(time);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fe66 	bl	8001724 <rtc_epochToDate>
  rtc_epochToTime(time);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff fef9 	bl	8001850 <rtc_epochToTime>
  return time;
 8001a5e:	687b      	ldr	r3, [r7, #4]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	20000294 	.word	0x20000294
 8001a6c:	2aaaaaab 	.word	0x2aaaaaab
 8001a70:	00015180 	.word	0x00015180
 8001a74:	2000021c 	.word	0x2000021c

08001a78 <rtc_getNumberOfDaysUntilMonth>:


uint16_t rtc_getNumberOfDaysUntilMonth(int16_t monthIndex, int isLeapYear)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	80fb      	strh	r3, [r7, #6]
  uint16_t n = numberOfDaysUntilMonth[monthIndex];
 8001a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a88:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <rtc_getNumberOfDaysUntilMonth+0x38>)
 8001a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a8e:	81fb      	strh	r3, [r7, #14]
  if (isLeapYear && monthIndex > FEBRUARY)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <rtc_getNumberOfDaysUntilMonth+0x2c>
 8001a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	dd02      	ble.n	8001aa4 <rtc_getNumberOfDaysUntilMonth+0x2c>
    n++;
 8001a9e:	89fb      	ldrh	r3, [r7, #14]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	81fb      	strh	r3, [r7, #14]
  return n;
 8001aa4:	89fb      	ldrh	r3, [r7, #14]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <rtc_getSumOfDayFromYearValue>:

uint16_t rtc_getSumOfDayFromYearValue(uint16_t year)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  float fsod = (float)(year - 1970) * 365.25 + 0.25;
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f973 	bl	8000db4 <__aeabi_i2f>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd15 	bl	8000500 <__aeabi_f2d>
 8001ad6:	a316      	add	r3, pc, #88	; (adr r3, 8001b30 <rtc_getSumOfDayFromYearValue+0x78>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fd68 	bl	80005b0 <__aeabi_dmul>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <rtc_getSumOfDayFromYearValue+0x80>)
 8001aee:	f7fe fba9 	bl	8000244 <__adddf3>
 8001af2:	4603      	mov	r3, r0
 8001af4:	460c      	mov	r4, r1
 8001af6:	4618      	mov	r0, r3
 8001af8:	4621      	mov	r1, r4
 8001afa:	f7ff f851 	bl	8000ba0 <__aeabi_d2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	60fb      	str	r3, [r7, #12]
  if (year > 2100)
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	f640 0234 	movw	r2, #2100	; 0x834
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d906      	bls.n	8001b1a <rtc_getSumOfDayFromYearValue+0x62>
    fsod -= 0.5;
 8001b0c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7ff f899 	bl	8000c48 <__aeabi_fsub>
 8001b16:	4603      	mov	r3, r0
 8001b18:	60fb      	str	r3, [r7, #12]
  return (uint16_t)fsod;
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff f99e 	bl	8000e5c <__aeabi_f2uiz>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b29b      	uxth	r3, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	f3af 8000 	nop.w
 8001b30:	00000000 	.word	0x00000000
 8001b34:	4076d400 	.word	0x4076d400
 8001b38:	3fd00000 	.word	0x3fd00000

08001b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_MspInit+0x5c>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <HAL_MspInit+0x5c>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6193      	str	r3, [r2, #24]
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_MspInit+0x5c>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_MspInit+0x5c>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <HAL_MspInit+0x5c>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_MspInit+0x5c>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_MspInit+0x60>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <HAL_MspInit+0x60>)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <HAL_RTC_MspInit+0x3c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d110      	bne.n	8001bd4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001bb2:	f000 fbf1 	bl	8002398 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_RTC_MspInit+0x40>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_RTC_MspInit+0x40>)
 8001bbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_RTC_MspInit+0x40>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RTC_MspInit+0x44>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40002800 	.word	0x40002800
 8001be0:	40021000 	.word	0x40021000
 8001be4:	4242043c 	.word	0x4242043c

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <HAL_UART_MspInit+0x8c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d131      	bne.n	8001c6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_UART_MspInit+0x90>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <HAL_UART_MspInit+0x90>)
 8001c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_UART_MspInit+0x90>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_UART_MspInit+0x90>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <HAL_UART_MspInit+0x90>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_UART_MspInit+0x90>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0310 	add.w	r3, r7, #16
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480b      	ldr	r0, [pc, #44]	; (8001c7c <HAL_UART_MspInit+0x94>)
 8001c4e:	f000 fa09 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4619      	mov	r1, r3
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_UART_MspInit+0x94>)
 8001c68:	f000 f9fc 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010800 	.word	0x40010800

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <NMI_Handler+0x4>

08001c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <HardFault_Handler+0x4>

08001c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <MemManage_Handler+0x4>

08001c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <BusFault_Handler+0x4>

08001c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <UsageFault_Handler+0x4>

08001c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc6:	f000 f8ab 	bl	8001e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f001 fbde 	bl	80034c0 <__errno>
 8001d04:	4602      	mov	r2, r0
 8001d06:	230c      	movs	r3, #12
 8001d08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20010000 	.word	0x20010000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	20000210 	.word	0x20000210
 8001d38:	200002b8 	.word	0x200002b8

08001d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d4a:	490d      	ldr	r1, [pc, #52]	; (8001d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d60:	4c0a      	ldr	r4, [pc, #40]	; (8001d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d6e:	f7ff ffe5 	bl	8001d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d72:	f001 fbab 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d76:	f7ff f8b1 	bl	8000edc <main>
  bx lr
 8001d7a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001d84:	08007338 	.word	0x08007338
  ldr r2, =_sbss
 8001d88:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001d8c:	200002b4 	.word	0x200002b4

08001d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC1_2_IRQHandler>
	...

08001d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_Init+0x28>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_Init+0x28>)
 8001d9e:	f043 0310 	orr.w	r3, r3, #16
 8001da2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 f929 	bl	8001ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f000 f808 	bl	8001dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fec4 	bl	8001b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x54>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x58>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f933 	bl	800204a <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00e      	b.n	8001e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d80a      	bhi.n	8001e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f000 f909 	bl	8002012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_InitTick+0x5c>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000018 	.word	0x20000018
 8001e18:	20000020 	.word	0x20000020
 8001e1c:	2000001c 	.word	0x2000001c

08001e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_IncTick+0x1c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_IncTick+0x20>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a03      	ldr	r2, [pc, #12]	; (8001e40 <HAL_IncTick+0x20>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	20000020 	.word	0x20000020
 8001e40:	200002ac 	.word	0x200002ac

08001e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <HAL_GetTick+0x10>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	200002ac 	.word	0x200002ac

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_Delay+0x40>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffe0 	bl	8001e44 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000020 	.word	0x20000020

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc8:	d301      	bcc.n	8001fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <SysTick_Config+0x40>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f7ff ff90 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff49 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002024:	f7ff ff5e 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f7ff ff90 	bl	8001f54 <NVIC_EncodePriority>
 8002034:	4602      	mov	r2, r0
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff5f 	bl	8001f00 <__NVIC_SetPriority>
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffb0 	bl	8001fb8 <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b08b      	sub	sp, #44	; 0x2c
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002076:	e133      	b.n	80022e0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002078:	2201      	movs	r2, #1
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	429a      	cmp	r2, r3
 8002092:	f040 8122 	bne.w	80022da <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b12      	cmp	r3, #18
 800209c:	d034      	beq.n	8002108 <HAL_GPIO_Init+0xa4>
 800209e:	2b12      	cmp	r3, #18
 80020a0:	d80d      	bhi.n	80020be <HAL_GPIO_Init+0x5a>
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d02b      	beq.n	80020fe <HAL_GPIO_Init+0x9a>
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d804      	bhi.n	80020b4 <HAL_GPIO_Init+0x50>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d031      	beq.n	8002112 <HAL_GPIO_Init+0xae>
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d01c      	beq.n	80020ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020b2:	e048      	b.n	8002146 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d043      	beq.n	8002140 <HAL_GPIO_Init+0xdc>
 80020b8:	2b11      	cmp	r3, #17
 80020ba:	d01b      	beq.n	80020f4 <HAL_GPIO_Init+0x90>
          break;
 80020bc:	e043      	b.n	8002146 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020be:	4a8f      	ldr	r2, [pc, #572]	; (80022fc <HAL_GPIO_Init+0x298>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d026      	beq.n	8002112 <HAL_GPIO_Init+0xae>
 80020c4:	4a8d      	ldr	r2, [pc, #564]	; (80022fc <HAL_GPIO_Init+0x298>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d806      	bhi.n	80020d8 <HAL_GPIO_Init+0x74>
 80020ca:	4a8d      	ldr	r2, [pc, #564]	; (8002300 <HAL_GPIO_Init+0x29c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d020      	beq.n	8002112 <HAL_GPIO_Init+0xae>
 80020d0:	4a8c      	ldr	r2, [pc, #560]	; (8002304 <HAL_GPIO_Init+0x2a0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01d      	beq.n	8002112 <HAL_GPIO_Init+0xae>
          break;
 80020d6:	e036      	b.n	8002146 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020d8:	4a8b      	ldr	r2, [pc, #556]	; (8002308 <HAL_GPIO_Init+0x2a4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d019      	beq.n	8002112 <HAL_GPIO_Init+0xae>
 80020de:	4a8b      	ldr	r2, [pc, #556]	; (800230c <HAL_GPIO_Init+0x2a8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d016      	beq.n	8002112 <HAL_GPIO_Init+0xae>
 80020e4:	4a8a      	ldr	r2, [pc, #552]	; (8002310 <HAL_GPIO_Init+0x2ac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0xae>
          break;
 80020ea:	e02c      	b.n	8002146 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	623b      	str	r3, [r7, #32]
          break;
 80020f2:	e028      	b.n	8002146 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	3304      	adds	r3, #4
 80020fa:	623b      	str	r3, [r7, #32]
          break;
 80020fc:	e023      	b.n	8002146 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	3308      	adds	r3, #8
 8002104:	623b      	str	r3, [r7, #32]
          break;
 8002106:	e01e      	b.n	8002146 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	330c      	adds	r3, #12
 800210e:	623b      	str	r3, [r7, #32]
          break;
 8002110:	e019      	b.n	8002146 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800211a:	2304      	movs	r3, #4
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e012      	b.n	8002146 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002128:	2308      	movs	r3, #8
 800212a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	611a      	str	r2, [r3, #16]
          break;
 8002132:	e008      	b.n	8002146 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002134:	2308      	movs	r3, #8
 8002136:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	615a      	str	r2, [r3, #20]
          break;
 800213e:	e002      	b.n	8002146 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
          break;
 8002144:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2bff      	cmp	r3, #255	; 0xff
 800214a:	d801      	bhi.n	8002150 <HAL_GPIO_Init+0xec>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	e001      	b.n	8002154 <HAL_GPIO_Init+0xf0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2bff      	cmp	r3, #255	; 0xff
 800215a:	d802      	bhi.n	8002162 <HAL_GPIO_Init+0xfe>
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	e002      	b.n	8002168 <HAL_GPIO_Init+0x104>
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	3b08      	subs	r3, #8
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	210f      	movs	r1, #15
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	401a      	ands	r2, r3
 800217a:	6a39      	ldr	r1, [r7, #32]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	431a      	orrs	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80a2 	beq.w	80022da <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002196:	4b5f      	ldr	r3, [pc, #380]	; (8002314 <HAL_GPIO_Init+0x2b0>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	4a5e      	ldr	r2, [pc, #376]	; (8002314 <HAL_GPIO_Init+0x2b0>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6193      	str	r3, [r2, #24]
 80021a2:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <HAL_GPIO_Init+0x2b0>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ae:	4a5a      	ldr	r2, [pc, #360]	; (8002318 <HAL_GPIO_Init+0x2b4>)
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a51      	ldr	r2, [pc, #324]	; (800231c <HAL_GPIO_Init+0x2b8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <HAL_GPIO_Init+0x1b6>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a50      	ldr	r2, [pc, #320]	; (8002320 <HAL_GPIO_Init+0x2bc>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x1b2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4f      	ldr	r2, [pc, #316]	; (8002324 <HAL_GPIO_Init+0x2c0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x1ae>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4e      	ldr	r2, [pc, #312]	; (8002328 <HAL_GPIO_Init+0x2c4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x1aa>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4d      	ldr	r2, [pc, #308]	; (800232c <HAL_GPIO_Init+0x2c8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x1a6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4c      	ldr	r2, [pc, #304]	; (8002330 <HAL_GPIO_Init+0x2cc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x1a2>
 8002202:	2305      	movs	r3, #5
 8002204:	e00a      	b.n	800221c <HAL_GPIO_Init+0x1b8>
 8002206:	2306      	movs	r3, #6
 8002208:	e008      	b.n	800221c <HAL_GPIO_Init+0x1b8>
 800220a:	2304      	movs	r3, #4
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x1b8>
 800220e:	2303      	movs	r3, #3
 8002210:	e004      	b.n	800221c <HAL_GPIO_Init+0x1b8>
 8002212:	2302      	movs	r3, #2
 8002214:	e002      	b.n	800221c <HAL_GPIO_Init+0x1b8>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x1b8>
 800221a:	2300      	movs	r3, #0
 800221c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221e:	f002 0203 	and.w	r2, r2, #3
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	4093      	lsls	r3, r2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800222c:	493a      	ldr	r1, [pc, #232]	; (8002318 <HAL_GPIO_Init+0x2b4>)
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	493a      	ldr	r1, [pc, #232]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
 8002252:	e006      	b.n	8002262 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002254:	4b37      	ldr	r3, [pc, #220]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	43db      	mvns	r3, r3
 800225c:	4935      	ldr	r1, [pc, #212]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 800225e:	4013      	ands	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4930      	ldr	r1, [pc, #192]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
 800227a:	e006      	b.n	800228a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	43db      	mvns	r3, r3
 8002284:	492b      	ldr	r1, [pc, #172]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 8002286:	4013      	ands	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	4926      	ldr	r1, [pc, #152]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
 80022a2:	e006      	b.n	80022b2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	4921      	ldr	r1, [pc, #132]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	491c      	ldr	r1, [pc, #112]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60cb      	str	r3, [r1, #12]
 80022ca:	e006      	b.n	80022da <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	4917      	ldr	r1, [pc, #92]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3301      	adds	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f47f aec4 	bne.w	8002078 <HAL_GPIO_Init+0x14>
  }
}
 80022f0:	bf00      	nop
 80022f2:	372c      	adds	r7, #44	; 0x2c
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	10210000 	.word	0x10210000
 8002300:	10110000 	.word	0x10110000
 8002304:	10120000 	.word	0x10120000
 8002308:	10310000 	.word	0x10310000
 800230c:	10320000 	.word	0x10320000
 8002310:	10220000 	.word	0x10220000
 8002314:	40021000 	.word	0x40021000
 8002318:	40010000 	.word	0x40010000
 800231c:	40010800 	.word	0x40010800
 8002320:	40010c00 	.word	0x40010c00
 8002324:	40011000 	.word	0x40011000
 8002328:	40011400 	.word	0x40011400
 800232c:	40011800 	.word	0x40011800
 8002330:	40011c00 	.word	0x40011c00
 8002334:	40010400 	.word	0x40010400

08002338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	887b      	ldrh	r3, [r7, #2]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e001      	b.n	800235a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	807b      	strh	r3, [r7, #2]
 8002372:	4613      	mov	r3, r2
 8002374:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002376:	787b      	ldrb	r3, [r7, #1]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237c:	887a      	ldrh	r2, [r7, #2]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002382:	e003      	b.n	800238c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	041a      	lsls	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	611a      	str	r2, [r3, #16]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
	...

08002398 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_PWR_EnableBkUpAccess+0x14>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	420e0020 	.word	0x420e0020

080023b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e26c      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8087 	beq.w	80024de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d0:	4b92      	ldr	r3, [pc, #584]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d00c      	beq.n	80023f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023dc:	4b8f      	ldr	r3, [pc, #572]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d112      	bne.n	800240e <HAL_RCC_OscConfig+0x5e>
 80023e8:	4b8c      	ldr	r3, [pc, #560]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f4:	d10b      	bne.n	800240e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f6:	4b89      	ldr	r3, [pc, #548]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d06c      	beq.n	80024dc <HAL_RCC_OscConfig+0x12c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d168      	bne.n	80024dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e246      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x76>
 8002418:	4b80      	ldr	r3, [pc, #512]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a7f      	ldr	r2, [pc, #508]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	e02e      	b.n	8002484 <HAL_RCC_OscConfig+0xd4>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x98>
 800242e:	4b7b      	ldr	r3, [pc, #492]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7a      	ldr	r2, [pc, #488]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b78      	ldr	r3, [pc, #480]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a77      	ldr	r2, [pc, #476]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xd4>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0xbc>
 8002452:	4b72      	ldr	r3, [pc, #456]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a71      	ldr	r2, [pc, #452]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b6f      	ldr	r3, [pc, #444]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6e      	ldr	r2, [pc, #440]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xd4>
 800246c:	4b6b      	ldr	r3, [pc, #428]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6a      	ldr	r2, [pc, #424]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b68      	ldr	r3, [pc, #416]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a67      	ldr	r2, [pc, #412]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff fcda 	bl	8001e44 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7ff fcd6 	bl	8001e44 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e1fa      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b5d      	ldr	r3, [pc, #372]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xe4>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff fcc6 	bl	8001e44 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff fcc2 	bl	8001e44 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1e6      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x10c>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d063      	beq.n	80025b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ea:	4b4c      	ldr	r3, [pc, #304]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024f6:	4b49      	ldr	r3, [pc, #292]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d11c      	bne.n	800253c <HAL_RCC_OscConfig+0x18c>
 8002502:	4b46      	ldr	r3, [pc, #280]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d116      	bne.n	800253c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	4b43      	ldr	r3, [pc, #268]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x176>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e1ba      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4939      	ldr	r1, [pc, #228]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	e03a      	b.n	80025b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002544:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_RCC_OscConfig+0x270>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7ff fc7b 	bl	8001e44 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7ff fc77 	bl	8001e44 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e19b      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4927      	ldr	r1, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	e015      	b.n	80025b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_OscConfig+0x270>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7ff fc5a 	bl	8001e44 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002594:	f7ff fc56 	bl	8001e44 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e17a      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d03a      	beq.n	8002634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d019      	beq.n	80025fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_RCC_OscConfig+0x274>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025cc:	f7ff fc3a 	bl	8001e44 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d4:	f7ff fc36 	bl	8001e44 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e15a      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f000 fada 	bl	8002bac <RCC_Delay>
 80025f8:	e01c      	b.n	8002634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCC_OscConfig+0x274>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7ff fc20 	bl	8001e44 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002606:	e00f      	b.n	8002628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff fc1c 	bl	8001e44 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d908      	bls.n	8002628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e140      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	42420000 	.word	0x42420000
 8002624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	4b9e      	ldr	r3, [pc, #632]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e9      	bne.n	8002608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80a6 	beq.w	800278e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002646:	4b97      	ldr	r3, [pc, #604]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	4b94      	ldr	r3, [pc, #592]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a93      	ldr	r2, [pc, #588]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	61d3      	str	r3, [r2, #28]
 800265e:	4b91      	ldr	r3, [pc, #580]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b8e      	ldr	r3, [pc, #568]	; (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d118      	bne.n	80026ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267a:	4b8b      	ldr	r3, [pc, #556]	; (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a8a      	ldr	r2, [pc, #552]	; (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002686:	f7ff fbdd 	bl	8001e44 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268e:	f7ff fbd9 	bl	8001e44 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	; 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0fd      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x312>
 80026b4:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4a7a      	ldr	r2, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6213      	str	r3, [r2, #32]
 80026c0:	e02d      	b.n	800271e <HAL_RCC_OscConfig+0x36e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x334>
 80026ca:	4b76      	ldr	r3, [pc, #472]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4a75      	ldr	r2, [pc, #468]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6213      	str	r3, [r2, #32]
 80026d6:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a72      	ldr	r2, [pc, #456]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	f023 0304 	bic.w	r3, r3, #4
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	e01c      	b.n	800271e <HAL_RCC_OscConfig+0x36e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d10c      	bne.n	8002706 <HAL_RCC_OscConfig+0x356>
 80026ec:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4a6c      	ldr	r2, [pc, #432]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6213      	str	r3, [r2, #32]
 80026f8:	4b6a      	ldr	r3, [pc, #424]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a69      	ldr	r2, [pc, #420]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	e00b      	b.n	800271e <HAL_RCC_OscConfig+0x36e>
 8002706:	4b67      	ldr	r3, [pc, #412]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a66      	ldr	r2, [pc, #408]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a63      	ldr	r2, [pc, #396]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d015      	beq.n	8002752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7ff fb8d 	bl	8001e44 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7ff fb89 	bl	8001e44 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0ab      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	4b57      	ldr	r3, [pc, #348]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ee      	beq.n	800272e <HAL_RCC_OscConfig+0x37e>
 8002750:	e014      	b.n	800277c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7ff fb77 	bl	8001e44 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7ff fb73 	bl	8001e44 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e095      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002770:	4b4c      	ldr	r3, [pc, #304]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ee      	bne.n	800275a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002782:	4b48      	ldr	r3, [pc, #288]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a47      	ldr	r2, [pc, #284]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8081 	beq.w	800289a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002798:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d061      	beq.n	8002868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d146      	bne.n	800283a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCC_OscConfig+0x4fc>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7ff fb47 	bl	8001e44 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7ff fb43 	bl	8001e44 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e067      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027cc:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e0:	d108      	bne.n	80027f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027e2:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	492d      	ldr	r1, [pc, #180]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f4:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a19      	ldr	r1, [r3, #32]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	430b      	orrs	r3, r1
 8002806:	4927      	ldr	r1, [pc, #156]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280c:	4b27      	ldr	r3, [pc, #156]	; (80028ac <HAL_RCC_OscConfig+0x4fc>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7ff fb17 	bl	8001e44 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7ff fb13 	bl	8001e44 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e037      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x46a>
 8002838:	e02f      	b.n	800289a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_RCC_OscConfig+0x4fc>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7ff fb00 	bl	8001e44 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7ff fafc 	bl	8001e44 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e020      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x498>
 8002866:	e018      	b.n	800289a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e013      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RCC_OscConfig+0x4f4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	429a      	cmp	r2, r3
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d001      	beq.n	800289a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
 80028ac:	42420060 	.word	0x42420060

080028b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0d0      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028c4:	4b6a      	ldr	r3, [pc, #424]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d910      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b67      	ldr	r3, [pc, #412]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 0207 	bic.w	r2, r3, #7
 80028da:	4965      	ldr	r1, [pc, #404]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b63      	ldr	r3, [pc, #396]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0b8      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800290c:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002924:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a52      	ldr	r2, [pc, #328]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800292e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	494d      	ldr	r1, [pc, #308]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d040      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d115      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e07f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e073      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06b      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298e:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 0203 	bic.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4936      	ldr	r1, [pc, #216]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a0:	f7ff fa50 	bl	8001e44 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7ff fa4c 	bl	8001e44 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e053      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 020c 	and.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d1eb      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029d0:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d210      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4922      	ldr	r1, [pc, #136]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e032      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4916      	ldr	r1, [pc, #88]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	490e      	ldr	r1, [pc, #56]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a3e:	f000 f821 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a42:	4601      	mov	r1, r0
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	fa21 f303 	lsr.w	r3, r1, r3
 8002a56:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1cc>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x1d0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f9ae 	bl	8001dc0 <HAL_InitTick>

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08007064 	.word	0x08007064
 8002a7c:	20000018 	.word	0x20000018
 8002a80:	2000001c 	.word	0x2000001c

08002a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	b490      	push	{r4, r7}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a8c:	1d3c      	adds	r4, r7, #4
 8002a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a94:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x46>
 8002ac2:	e02d      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac4:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ac6:	623b      	str	r3, [r7, #32]
      break;
 8002ac8:	e02d      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	0c9b      	lsrs	r3, r3, #18
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002adc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c5b      	lsrs	r3, r3, #17
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002af6:	4413      	add	r3, r2
 8002af8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002afc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	4a0f      	ldr	r2, [pc, #60]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b02:	fb02 f203 	mul.w	r2, r2, r3
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	e004      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	623b      	str	r3, [r7, #32]
      break;
 8002b1e:	e002      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b22:	623b      	str	r3, [r7, #32]
      break;
 8002b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b26:	6a3b      	ldr	r3, [r7, #32]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3728      	adds	r7, #40	; 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc90      	pop	{r4, r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	0800703c 	.word	0x0800703c
 8002b38:	0800704c 	.word	0x0800704c
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	007a1200 	.word	0x007a1200
 8002b44:	003d0900 	.word	0x003d0900

08002b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b4c:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	20000018 	.word	0x20000018

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b60:	f7ff fff2 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b64:	4601      	mov	r1, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4a03      	ldr	r2, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08007074 	.word	0x08007074

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b88:	f7ff ffde 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4601      	mov	r1, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0adb      	lsrs	r3, r3, #11
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4a03      	ldr	r2, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08007074 	.word	0x08007074

08002bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <RCC_Delay+0x34>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <RCC_Delay+0x38>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc8:	bf00      	nop
  }
  while (Delay --);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	60fa      	str	r2, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <RCC_Delay+0x1c>
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000018 	.word	0x20000018
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d07d      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c04:	2300      	movs	r3, #0
 8002c06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c08:	4b4f      	ldr	r3, [pc, #316]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10d      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	61d3      	str	r3, [r2, #28]
 8002c20:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d118      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3c:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a42      	ldr	r2, [pc, #264]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c48:	f7ff f8fc 	bl	8001e44 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	e008      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c50:	f7ff f8f8 	bl	8001e44 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e06d      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02e      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d027      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c96:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9c:	4b2c      	ldr	r3, [pc, #176]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ca2:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d014      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7ff f8c7 	bl	8001e44 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7ff f8c3 	bl	8001e44 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e036      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ee      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4917      	ldr	r1, [pc, #92]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d0c:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	490b      	ldr	r1, [pc, #44]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	4904      	ldr	r1, [pc, #16]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	42420440 	.word	0x42420440

08002d54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b08d      	sub	sp, #52	; 0x34
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d5c:	4b6b      	ldr	r3, [pc, #428]	; (8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002d5e:	f107 040c 	add.w	r4, r7, #12
 8002d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d68:	4b69      	ldr	r3, [pc, #420]	; (8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	2300      	movs	r3, #0
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d76:	2300      	movs	r3, #0
 8002d78:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	2b0f      	cmp	r3, #15
 8002d88:	f200 80b6 	bhi.w	8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002d8c:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002e77 	.word	0x08002e77
 8002d98:	08002edd 	.word	0x08002edd
 8002d9c:	08002ef9 	.word	0x08002ef9
 8002da0:	08002e67 	.word	0x08002e67
 8002da4:	08002ef9 	.word	0x08002ef9
 8002da8:	08002ef9 	.word	0x08002ef9
 8002dac:	08002ef9 	.word	0x08002ef9
 8002db0:	08002e6f 	.word	0x08002e6f
 8002db4:	08002ef9 	.word	0x08002ef9
 8002db8:	08002ef9 	.word	0x08002ef9
 8002dbc:	08002ef9 	.word	0x08002ef9
 8002dc0:	08002ef9 	.word	0x08002ef9
 8002dc4:	08002ef9 	.word	0x08002ef9
 8002dc8:	08002ef9 	.word	0x08002ef9
 8002dcc:	08002ef9 	.word	0x08002ef9
 8002dd0:	08002dd5 	.word	0x08002dd5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002dd4:	4b4f      	ldr	r3, [pc, #316]	; (8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002dda:	4b4e      	ldr	r3, [pc, #312]	; (8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 808a 	beq.w	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	0c9b      	lsrs	r3, r3, #18
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002df4:	4413      	add	r3, r2
 8002df6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dfa:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d018      	beq.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e06:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	0c5b      	lsrs	r3, r3, #17
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e14:	4413      	add	r3, r2
 8002e16:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e26:	4a3c      	ldr	r2, [pc, #240]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	fb02 f303 	mul.w	r3, r2, r3
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e36:	e004      	b.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	4a38      	ldr	r2, [pc, #224]	; (8002f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8002e3c:	fb02 f303 	mul.w	r3, r2, r3
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e42:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e4e:	d102      	bne.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002e54:	e052      	b.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4a31      	ldr	r2, [pc, #196]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e64:	e04a      	b.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002e66:	f7ff fe0d 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002e6a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e6c:	e049      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002e6e:	f7ff fe09 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002e72:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e74:	e045      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002e76:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e86:	d108      	bne.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8002e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e98:	e01f      	b.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea4:	d109      	bne.n	8002eba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8002eb2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb8:	e00f      	b.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec4:	d11c      	bne.n	8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8002ed2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002ed8:	e012      	b.n	8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002eda:	e011      	b.n	8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002edc:	f7ff fe52 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	0b9b      	lsrs	r3, r3, #14
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	3301      	adds	r3, #1
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ef6:	e004      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8002ef8:	bf00      	nop
 8002efa:	e002      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002efc:	bf00      	nop
 8002efe:	e000      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002f00:	bf00      	nop
    }
  }
  return (frequency);
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3734      	adds	r7, #52	; 0x34
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}
 8002f0c:	08007050 	.word	0x08007050
 8002f10:	08007060 	.word	0x08007060
 8002f14:	40021000 	.word	0x40021000
 8002f18:	007a1200 	.word	0x007a1200
 8002f1c:	003d0900 	.word	0x003d0900
 8002f20:	aaaaaaab 	.word	0xaaaaaaab

08002f24 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e084      	b.n	8003044 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7c5b      	ldrb	r3, [r3, #17]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe fe28 	bl	8001ba0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f87a 	bl	8003050 <HAL_RTC_WaitForSynchro>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2204      	movs	r2, #4
 8002f66:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e06b      	b.n	8003044 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f89c 	bl	80030aa <RTC_EnterInitMode>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d004      	beq.n	8002f82 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e060      	b.n	8003044 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0207 	bic.w	r2, r2, #7
 8002f90:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002f9a:	4b2c      	ldr	r3, [pc, #176]	; (800304c <HAL_RTC_Init+0x128>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a2b      	ldr	r2, [pc, #172]	; (800304c <HAL_RTC_Init+0x128>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002fa6:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RTC_Init+0x128>)
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	4926      	ldr	r1, [pc, #152]	; (800304c <HAL_RTC_Init+0x128>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d003      	beq.n	8002fca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e00e      	b.n	8002fe8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7ff fec2 	bl	8002d54 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fd0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d104      	bne.n	8002fe2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2204      	movs	r2, #4
 8002fdc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e030      	b.n	8003044 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f023 010f 	bic.w	r1, r3, #15
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	0c1a      	lsrs	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	b291      	uxth	r1, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	430b      	orrs	r3, r1
 8003012:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f870 	bl	80030fa <RTC_ExitInitMode>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2204      	movs	r2, #4
 8003024:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e00c      	b.n	8003044 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003042:	2300      	movs	r3, #0
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40006c00 	.word	0x40006c00

08003050 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e01d      	b.n	80030a2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0208 	bic.w	r2, r2, #8
 8003074:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003076:	f7fe fee5 	bl	8001e44 <HAL_GetTick>
 800307a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800307c:	e009      	b.n	8003092 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800307e:	f7fe fee1 	bl	8001e44 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800308c:	d901      	bls.n	8003092 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e007      	b.n	80030a2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ee      	beq.n	800307e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80030b6:	f7fe fec5 	bl	8001e44 <HAL_GetTick>
 80030ba:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030bc:	e009      	b.n	80030d2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80030be:	f7fe fec1 	bl	8001e44 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030cc:	d901      	bls.n	80030d2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e00f      	b.n	80030f2 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ee      	beq.n	80030be <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0210 	orr.w	r2, r2, #16
 80030ee:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0210 	bic.w	r2, r2, #16
 8003114:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003116:	f7fe fe95 	bl	8001e44 <HAL_GetTick>
 800311a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800311c:	e009      	b.n	8003132 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800311e:	f7fe fe91 	bl	8001e44 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800312c:	d901      	bls.n	8003132 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e007      	b.n	8003142 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ee      	beq.n	800311e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e03f      	b.n	80031dc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7fe fd39 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2224      	movs	r2, #36	; 0x24
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800318c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f904 	bl	800339c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b20      	cmp	r3, #32
 8003202:	d17c      	bne.n	80032fe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_UART_Transmit+0x2c>
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e075      	b.n	8003300 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_UART_Transmit+0x3e>
 800321e:	2302      	movs	r3, #2
 8003220:	e06e      	b.n	8003300 <HAL_UART_Transmit+0x11c>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2221      	movs	r2, #33	; 0x21
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003238:	f7fe fe04 	bl	8001e44 <HAL_GetTick>
 800323c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	88fa      	ldrh	r2, [r7, #6]
 8003248:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003252:	d108      	bne.n	8003266 <HAL_UART_Transmit+0x82>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e003      	b.n	800326e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003276:	e02a      	b.n	80032ce <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2200      	movs	r2, #0
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f840 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e036      	b.n	8003300 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	3302      	adds	r3, #2
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e007      	b.n	80032c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1cf      	bne.n	8003278 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2200      	movs	r2, #0
 80032e0:	2140      	movs	r1, #64	; 0x40
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f810 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e006      	b.n	8003300 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	3720      	adds	r7, #32
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003318:	e02c      	b.n	8003374 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d028      	beq.n	8003374 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <UART_WaitOnFlagUntilTimeout+0x30>
 8003328:	f7fe fd8c 	bl	8001e44 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	429a      	cmp	r2, r3
 8003336:	d21d      	bcs.n	8003374 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003346:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e00f      	b.n	8003394 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	429a      	cmp	r2, r3
 8003390:	d0c3      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033d6:	f023 030c 	bic.w	r3, r3, #12
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2c      	ldr	r2, [pc, #176]	; (80034b0 <UART_SetConfig+0x114>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d103      	bne.n	800340c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003404:	f7ff fbbe 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	e002      	b.n	8003412 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800340c:	f7ff fba6 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8003410:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <UART_SetConfig+0x118>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	0119      	lsls	r1, r3, #4
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009a      	lsls	r2, r3, #2
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fbb2 f2f3 	udiv	r2, r2, r3
 8003448:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <UART_SetConfig+0x118>)
 800344a:	fba3 0302 	umull	r0, r3, r3, r2
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2064      	movs	r0, #100	; 0x64
 8003452:	fb00 f303 	mul.w	r3, r0, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	3332      	adds	r3, #50	; 0x32
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <UART_SetConfig+0x118>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003468:	4419      	add	r1, r3
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	009a      	lsls	r2, r3, #2
 8003474:	441a      	add	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <UART_SetConfig+0x118>)
 8003482:	fba3 0302 	umull	r0, r3, r3, r2
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2064      	movs	r0, #100	; 0x64
 800348a:	fb00 f303 	mul.w	r3, r0, r3
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	3332      	adds	r3, #50	; 0x32
 8003494:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <UART_SetConfig+0x118>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	440a      	add	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40013800 	.word	0x40013800
 80034b4:	51eb851f 	.word	0x51eb851f

080034b8 <atoi>:
 80034b8:	220a      	movs	r2, #10
 80034ba:	2100      	movs	r1, #0
 80034bc:	f001 bd5e 	b.w	8004f7c <strtol>

080034c0 <__errno>:
 80034c0:	4b01      	ldr	r3, [pc, #4]	; (80034c8 <__errno+0x8>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000024 	.word	0x20000024

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2500      	movs	r5, #0
 80034d0:	4e0c      	ldr	r6, [pc, #48]	; (8003504 <__libc_init_array+0x38>)
 80034d2:	4c0d      	ldr	r4, [pc, #52]	; (8003508 <__libc_init_array+0x3c>)
 80034d4:	1ba4      	subs	r4, r4, r6
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	42a5      	cmp	r5, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	f003 fd82 	bl	8006fe4 <_init>
 80034e0:	2500      	movs	r5, #0
 80034e2:	4e0a      	ldr	r6, [pc, #40]	; (800350c <__libc_init_array+0x40>)
 80034e4:	4c0a      	ldr	r4, [pc, #40]	; (8003510 <__libc_init_array+0x44>)
 80034e6:	1ba4      	subs	r4, r4, r6
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	42a5      	cmp	r5, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034f4:	4798      	blx	r3
 80034f6:	3501      	adds	r5, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034fe:	4798      	blx	r3
 8003500:	3501      	adds	r5, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	08007330 	.word	0x08007330
 8003508:	08007330 	.word	0x08007330
 800350c:	08007330 	.word	0x08007330
 8003510:	08007334 	.word	0x08007334

08003514 <memcpy>:
 8003514:	b510      	push	{r4, lr}
 8003516:	1e43      	subs	r3, r0, #1
 8003518:	440a      	add	r2, r1
 800351a:	4291      	cmp	r1, r2
 800351c:	d100      	bne.n	8003520 <memcpy+0xc>
 800351e:	bd10      	pop	{r4, pc}
 8003520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003528:	e7f7      	b.n	800351a <memcpy+0x6>

0800352a <memset>:
 800352a:	4603      	mov	r3, r0
 800352c:	4402      	add	r2, r0
 800352e:	4293      	cmp	r3, r2
 8003530:	d100      	bne.n	8003534 <memset+0xa>
 8003532:	4770      	bx	lr
 8003534:	f803 1b01 	strb.w	r1, [r3], #1
 8003538:	e7f9      	b.n	800352e <memset+0x4>

0800353a <__cvt>:
 800353a:	2b00      	cmp	r3, #0
 800353c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003540:	461e      	mov	r6, r3
 8003542:	bfbb      	ittet	lt
 8003544:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003548:	461e      	movlt	r6, r3
 800354a:	2300      	movge	r3, #0
 800354c:	232d      	movlt	r3, #45	; 0x2d
 800354e:	b088      	sub	sp, #32
 8003550:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003552:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003556:	f027 0720 	bic.w	r7, r7, #32
 800355a:	2f46      	cmp	r7, #70	; 0x46
 800355c:	4614      	mov	r4, r2
 800355e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003560:	700b      	strb	r3, [r1, #0]
 8003562:	d004      	beq.n	800356e <__cvt+0x34>
 8003564:	2f45      	cmp	r7, #69	; 0x45
 8003566:	d100      	bne.n	800356a <__cvt+0x30>
 8003568:	3501      	adds	r5, #1
 800356a:	2302      	movs	r3, #2
 800356c:	e000      	b.n	8003570 <__cvt+0x36>
 800356e:	2303      	movs	r3, #3
 8003570:	aa07      	add	r2, sp, #28
 8003572:	9204      	str	r2, [sp, #16]
 8003574:	aa06      	add	r2, sp, #24
 8003576:	e9cd a202 	strd	sl, r2, [sp, #8]
 800357a:	e9cd 3500 	strd	r3, r5, [sp]
 800357e:	4622      	mov	r2, r4
 8003580:	4633      	mov	r3, r6
 8003582:	f001 fda1 	bl	80050c8 <_dtoa_r>
 8003586:	2f47      	cmp	r7, #71	; 0x47
 8003588:	4680      	mov	r8, r0
 800358a:	d102      	bne.n	8003592 <__cvt+0x58>
 800358c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800358e:	07db      	lsls	r3, r3, #31
 8003590:	d526      	bpl.n	80035e0 <__cvt+0xa6>
 8003592:	2f46      	cmp	r7, #70	; 0x46
 8003594:	eb08 0905 	add.w	r9, r8, r5
 8003598:	d111      	bne.n	80035be <__cvt+0x84>
 800359a:	f898 3000 	ldrb.w	r3, [r8]
 800359e:	2b30      	cmp	r3, #48	; 0x30
 80035a0:	d10a      	bne.n	80035b8 <__cvt+0x7e>
 80035a2:	2200      	movs	r2, #0
 80035a4:	2300      	movs	r3, #0
 80035a6:	4620      	mov	r0, r4
 80035a8:	4631      	mov	r1, r6
 80035aa:	f7fd fa69 	bl	8000a80 <__aeabi_dcmpeq>
 80035ae:	b918      	cbnz	r0, 80035b8 <__cvt+0x7e>
 80035b0:	f1c5 0501 	rsb	r5, r5, #1
 80035b4:	f8ca 5000 	str.w	r5, [sl]
 80035b8:	f8da 3000 	ldr.w	r3, [sl]
 80035bc:	4499      	add	r9, r3
 80035be:	2200      	movs	r2, #0
 80035c0:	2300      	movs	r3, #0
 80035c2:	4620      	mov	r0, r4
 80035c4:	4631      	mov	r1, r6
 80035c6:	f7fd fa5b 	bl	8000a80 <__aeabi_dcmpeq>
 80035ca:	b938      	cbnz	r0, 80035dc <__cvt+0xa2>
 80035cc:	2230      	movs	r2, #48	; 0x30
 80035ce:	9b07      	ldr	r3, [sp, #28]
 80035d0:	454b      	cmp	r3, r9
 80035d2:	d205      	bcs.n	80035e0 <__cvt+0xa6>
 80035d4:	1c59      	adds	r1, r3, #1
 80035d6:	9107      	str	r1, [sp, #28]
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e7f8      	b.n	80035ce <__cvt+0x94>
 80035dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80035e0:	4640      	mov	r0, r8
 80035e2:	9b07      	ldr	r3, [sp, #28]
 80035e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80035e6:	eba3 0308 	sub.w	r3, r3, r8
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	b008      	add	sp, #32
 80035ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080035f2 <__exponent>:
 80035f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035f4:	2900      	cmp	r1, #0
 80035f6:	bfb4      	ite	lt
 80035f8:	232d      	movlt	r3, #45	; 0x2d
 80035fa:	232b      	movge	r3, #43	; 0x2b
 80035fc:	4604      	mov	r4, r0
 80035fe:	bfb8      	it	lt
 8003600:	4249      	neglt	r1, r1
 8003602:	2909      	cmp	r1, #9
 8003604:	f804 2b02 	strb.w	r2, [r4], #2
 8003608:	7043      	strb	r3, [r0, #1]
 800360a:	dd21      	ble.n	8003650 <__exponent+0x5e>
 800360c:	f10d 0307 	add.w	r3, sp, #7
 8003610:	461f      	mov	r7, r3
 8003612:	260a      	movs	r6, #10
 8003614:	fb91 f5f6 	sdiv	r5, r1, r6
 8003618:	fb06 1115 	mls	r1, r6, r5, r1
 800361c:	2d09      	cmp	r5, #9
 800361e:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003622:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003626:	f103 32ff 	add.w	r2, r3, #4294967295
 800362a:	4629      	mov	r1, r5
 800362c:	dc09      	bgt.n	8003642 <__exponent+0x50>
 800362e:	3130      	adds	r1, #48	; 0x30
 8003630:	3b02      	subs	r3, #2
 8003632:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003636:	42bb      	cmp	r3, r7
 8003638:	4622      	mov	r2, r4
 800363a:	d304      	bcc.n	8003646 <__exponent+0x54>
 800363c:	1a10      	subs	r0, r2, r0
 800363e:	b003      	add	sp, #12
 8003640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003642:	4613      	mov	r3, r2
 8003644:	e7e6      	b.n	8003614 <__exponent+0x22>
 8003646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800364a:	f804 2b01 	strb.w	r2, [r4], #1
 800364e:	e7f2      	b.n	8003636 <__exponent+0x44>
 8003650:	2330      	movs	r3, #48	; 0x30
 8003652:	4419      	add	r1, r3
 8003654:	7083      	strb	r3, [r0, #2]
 8003656:	1d02      	adds	r2, r0, #4
 8003658:	70c1      	strb	r1, [r0, #3]
 800365a:	e7ef      	b.n	800363c <__exponent+0x4a>

0800365c <_printf_float>:
 800365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003660:	b091      	sub	sp, #68	; 0x44
 8003662:	460c      	mov	r4, r1
 8003664:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003666:	4693      	mov	fp, r2
 8003668:	461e      	mov	r6, r3
 800366a:	4605      	mov	r5, r0
 800366c:	f002 fe0e 	bl	800628c <_localeconv_r>
 8003670:	6803      	ldr	r3, [r0, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	9309      	str	r3, [sp, #36]	; 0x24
 8003676:	f7fc fdd7 	bl	8000228 <strlen>
 800367a:	2300      	movs	r3, #0
 800367c:	930e      	str	r3, [sp, #56]	; 0x38
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	900a      	str	r0, [sp, #40]	; 0x28
 8003682:	3307      	adds	r3, #7
 8003684:	f023 0307 	bic.w	r3, r3, #7
 8003688:	f103 0208 	add.w	r2, r3, #8
 800368c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003690:	f8d4 a000 	ldr.w	sl, [r4]
 8003694:	603a      	str	r2, [r7, #0]
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800369e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80036a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80036a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	4ba6      	ldr	r3, [pc, #664]	; (8003948 <_printf_float+0x2ec>)
 80036ae:	4638      	mov	r0, r7
 80036b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036b2:	f7fd fa17 	bl	8000ae4 <__aeabi_dcmpun>
 80036b6:	bb68      	cbnz	r0, 8003714 <_printf_float+0xb8>
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	4ba2      	ldr	r3, [pc, #648]	; (8003948 <_printf_float+0x2ec>)
 80036be:	4638      	mov	r0, r7
 80036c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036c2:	f7fd f9f1 	bl	8000aa8 <__aeabi_dcmple>
 80036c6:	bb28      	cbnz	r0, 8003714 <_printf_float+0xb8>
 80036c8:	2200      	movs	r2, #0
 80036ca:	2300      	movs	r3, #0
 80036cc:	4638      	mov	r0, r7
 80036ce:	4649      	mov	r1, r9
 80036d0:	f7fd f9e0 	bl	8000a94 <__aeabi_dcmplt>
 80036d4:	b110      	cbz	r0, 80036dc <_printf_float+0x80>
 80036d6:	232d      	movs	r3, #45	; 0x2d
 80036d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036dc:	4f9b      	ldr	r7, [pc, #620]	; (800394c <_printf_float+0x2f0>)
 80036de:	4b9c      	ldr	r3, [pc, #624]	; (8003950 <_printf_float+0x2f4>)
 80036e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80036e4:	bf98      	it	ls
 80036e6:	461f      	movls	r7, r3
 80036e8:	2303      	movs	r3, #3
 80036ea:	f04f 0900 	mov.w	r9, #0
 80036ee:	6123      	str	r3, [r4, #16]
 80036f0:	f02a 0304 	bic.w	r3, sl, #4
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	9600      	str	r6, [sp, #0]
 80036f8:	465b      	mov	r3, fp
 80036fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80036fc:	4621      	mov	r1, r4
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 f9e2 	bl	8003ac8 <_printf_common>
 8003704:	3001      	adds	r0, #1
 8003706:	f040 8090 	bne.w	800382a <_printf_float+0x1ce>
 800370a:	f04f 30ff 	mov.w	r0, #4294967295
 800370e:	b011      	add	sp, #68	; 0x44
 8003710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003714:	463a      	mov	r2, r7
 8003716:	464b      	mov	r3, r9
 8003718:	4638      	mov	r0, r7
 800371a:	4649      	mov	r1, r9
 800371c:	f7fd f9e2 	bl	8000ae4 <__aeabi_dcmpun>
 8003720:	b110      	cbz	r0, 8003728 <_printf_float+0xcc>
 8003722:	4f8c      	ldr	r7, [pc, #560]	; (8003954 <_printf_float+0x2f8>)
 8003724:	4b8c      	ldr	r3, [pc, #560]	; (8003958 <_printf_float+0x2fc>)
 8003726:	e7db      	b.n	80036e0 <_printf_float+0x84>
 8003728:	6863      	ldr	r3, [r4, #4]
 800372a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	a80d      	add	r0, sp, #52	; 0x34
 8003732:	a90e      	add	r1, sp, #56	; 0x38
 8003734:	d140      	bne.n	80037b8 <_printf_float+0x15c>
 8003736:	2306      	movs	r3, #6
 8003738:	6063      	str	r3, [r4, #4]
 800373a:	f04f 0c00 	mov.w	ip, #0
 800373e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003742:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003746:	6863      	ldr	r3, [r4, #4]
 8003748:	6022      	str	r2, [r4, #0]
 800374a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	463a      	mov	r2, r7
 8003752:	464b      	mov	r3, r9
 8003754:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003758:	4628      	mov	r0, r5
 800375a:	f7ff feee 	bl	800353a <__cvt>
 800375e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003762:	2b47      	cmp	r3, #71	; 0x47
 8003764:	4607      	mov	r7, r0
 8003766:	d109      	bne.n	800377c <_printf_float+0x120>
 8003768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800376a:	1cd8      	adds	r0, r3, #3
 800376c:	db02      	blt.n	8003774 <_printf_float+0x118>
 800376e:	6862      	ldr	r2, [r4, #4]
 8003770:	4293      	cmp	r3, r2
 8003772:	dd47      	ble.n	8003804 <_printf_float+0x1a8>
 8003774:	f1a8 0802 	sub.w	r8, r8, #2
 8003778:	fa5f f888 	uxtb.w	r8, r8
 800377c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003780:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003782:	d824      	bhi.n	80037ce <_printf_float+0x172>
 8003784:	3901      	subs	r1, #1
 8003786:	4642      	mov	r2, r8
 8003788:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800378c:	910d      	str	r1, [sp, #52]	; 0x34
 800378e:	f7ff ff30 	bl	80035f2 <__exponent>
 8003792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003794:	4681      	mov	r9, r0
 8003796:	1813      	adds	r3, r2, r0
 8003798:	2a01      	cmp	r2, #1
 800379a:	6123      	str	r3, [r4, #16]
 800379c:	dc02      	bgt.n	80037a4 <_printf_float+0x148>
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	07d1      	lsls	r1, r2, #31
 80037a2:	d501      	bpl.n	80037a8 <_printf_float+0x14c>
 80037a4:	3301      	adds	r3, #1
 80037a6:	6123      	str	r3, [r4, #16]
 80037a8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0a2      	beq.n	80036f6 <_printf_float+0x9a>
 80037b0:	232d      	movs	r3, #45	; 0x2d
 80037b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b6:	e79e      	b.n	80036f6 <_printf_float+0x9a>
 80037b8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80037bc:	f000 816e 	beq.w	8003a9c <_printf_float+0x440>
 80037c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80037c4:	d1b9      	bne.n	800373a <_printf_float+0xde>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1b7      	bne.n	800373a <_printf_float+0xde>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e7b4      	b.n	8003738 <_printf_float+0xdc>
 80037ce:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80037d2:	d119      	bne.n	8003808 <_printf_float+0x1ac>
 80037d4:	2900      	cmp	r1, #0
 80037d6:	6863      	ldr	r3, [r4, #4]
 80037d8:	dd0c      	ble.n	80037f4 <_printf_float+0x198>
 80037da:	6121      	str	r1, [r4, #16]
 80037dc:	b913      	cbnz	r3, 80037e4 <_printf_float+0x188>
 80037de:	6822      	ldr	r2, [r4, #0]
 80037e0:	07d2      	lsls	r2, r2, #31
 80037e2:	d502      	bpl.n	80037ea <_printf_float+0x18e>
 80037e4:	3301      	adds	r3, #1
 80037e6:	440b      	add	r3, r1
 80037e8:	6123      	str	r3, [r4, #16]
 80037ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037ec:	f04f 0900 	mov.w	r9, #0
 80037f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80037f2:	e7d9      	b.n	80037a8 <_printf_float+0x14c>
 80037f4:	b913      	cbnz	r3, 80037fc <_printf_float+0x1a0>
 80037f6:	6822      	ldr	r2, [r4, #0]
 80037f8:	07d0      	lsls	r0, r2, #31
 80037fa:	d501      	bpl.n	8003800 <_printf_float+0x1a4>
 80037fc:	3302      	adds	r3, #2
 80037fe:	e7f3      	b.n	80037e8 <_printf_float+0x18c>
 8003800:	2301      	movs	r3, #1
 8003802:	e7f1      	b.n	80037e8 <_printf_float+0x18c>
 8003804:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003808:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800380c:	4293      	cmp	r3, r2
 800380e:	db05      	blt.n	800381c <_printf_float+0x1c0>
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	6123      	str	r3, [r4, #16]
 8003814:	07d1      	lsls	r1, r2, #31
 8003816:	d5e8      	bpl.n	80037ea <_printf_float+0x18e>
 8003818:	3301      	adds	r3, #1
 800381a:	e7e5      	b.n	80037e8 <_printf_float+0x18c>
 800381c:	2b00      	cmp	r3, #0
 800381e:	bfcc      	ite	gt
 8003820:	2301      	movgt	r3, #1
 8003822:	f1c3 0302 	rsble	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	e7de      	b.n	80037e8 <_printf_float+0x18c>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	055a      	lsls	r2, r3, #21
 800382e:	d407      	bmi.n	8003840 <_printf_float+0x1e4>
 8003830:	6923      	ldr	r3, [r4, #16]
 8003832:	463a      	mov	r2, r7
 8003834:	4659      	mov	r1, fp
 8003836:	4628      	mov	r0, r5
 8003838:	47b0      	blx	r6
 800383a:	3001      	adds	r0, #1
 800383c:	d129      	bne.n	8003892 <_printf_float+0x236>
 800383e:	e764      	b.n	800370a <_printf_float+0xae>
 8003840:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003844:	f240 80d7 	bls.w	80039f6 <_printf_float+0x39a>
 8003848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800384c:	2200      	movs	r2, #0
 800384e:	2300      	movs	r3, #0
 8003850:	f7fd f916 	bl	8000a80 <__aeabi_dcmpeq>
 8003854:	b388      	cbz	r0, 80038ba <_printf_float+0x25e>
 8003856:	2301      	movs	r3, #1
 8003858:	4a40      	ldr	r2, [pc, #256]	; (800395c <_printf_float+0x300>)
 800385a:	4659      	mov	r1, fp
 800385c:	4628      	mov	r0, r5
 800385e:	47b0      	blx	r6
 8003860:	3001      	adds	r0, #1
 8003862:	f43f af52 	beq.w	800370a <_printf_float+0xae>
 8003866:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800386a:	429a      	cmp	r2, r3
 800386c:	db02      	blt.n	8003874 <_printf_float+0x218>
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	07d8      	lsls	r0, r3, #31
 8003872:	d50e      	bpl.n	8003892 <_printf_float+0x236>
 8003874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003878:	4659      	mov	r1, fp
 800387a:	4628      	mov	r0, r5
 800387c:	47b0      	blx	r6
 800387e:	3001      	adds	r0, #1
 8003880:	f43f af43 	beq.w	800370a <_printf_float+0xae>
 8003884:	2700      	movs	r7, #0
 8003886:	f104 081a 	add.w	r8, r4, #26
 800388a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800388c:	3b01      	subs	r3, #1
 800388e:	42bb      	cmp	r3, r7
 8003890:	dc09      	bgt.n	80038a6 <_printf_float+0x24a>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	079f      	lsls	r7, r3, #30
 8003896:	f100 80fd 	bmi.w	8003a94 <_printf_float+0x438>
 800389a:	68e0      	ldr	r0, [r4, #12]
 800389c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800389e:	4298      	cmp	r0, r3
 80038a0:	bfb8      	it	lt
 80038a2:	4618      	movlt	r0, r3
 80038a4:	e733      	b.n	800370e <_printf_float+0xb2>
 80038a6:	2301      	movs	r3, #1
 80038a8:	4642      	mov	r2, r8
 80038aa:	4659      	mov	r1, fp
 80038ac:	4628      	mov	r0, r5
 80038ae:	47b0      	blx	r6
 80038b0:	3001      	adds	r0, #1
 80038b2:	f43f af2a 	beq.w	800370a <_printf_float+0xae>
 80038b6:	3701      	adds	r7, #1
 80038b8:	e7e7      	b.n	800388a <_printf_float+0x22e>
 80038ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038bc:	2b00      	cmp	r3, #0
 80038be:	dc2b      	bgt.n	8003918 <_printf_float+0x2bc>
 80038c0:	2301      	movs	r3, #1
 80038c2:	4a26      	ldr	r2, [pc, #152]	; (800395c <_printf_float+0x300>)
 80038c4:	4659      	mov	r1, fp
 80038c6:	4628      	mov	r0, r5
 80038c8:	47b0      	blx	r6
 80038ca:	3001      	adds	r0, #1
 80038cc:	f43f af1d 	beq.w	800370a <_printf_float+0xae>
 80038d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038d2:	b923      	cbnz	r3, 80038de <_printf_float+0x282>
 80038d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038d6:	b913      	cbnz	r3, 80038de <_printf_float+0x282>
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	07d9      	lsls	r1, r3, #31
 80038dc:	d5d9      	bpl.n	8003892 <_printf_float+0x236>
 80038de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038e2:	4659      	mov	r1, fp
 80038e4:	4628      	mov	r0, r5
 80038e6:	47b0      	blx	r6
 80038e8:	3001      	adds	r0, #1
 80038ea:	f43f af0e 	beq.w	800370a <_printf_float+0xae>
 80038ee:	f04f 0800 	mov.w	r8, #0
 80038f2:	f104 091a 	add.w	r9, r4, #26
 80038f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038f8:	425b      	negs	r3, r3
 80038fa:	4543      	cmp	r3, r8
 80038fc:	dc01      	bgt.n	8003902 <_printf_float+0x2a6>
 80038fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003900:	e797      	b.n	8003832 <_printf_float+0x1d6>
 8003902:	2301      	movs	r3, #1
 8003904:	464a      	mov	r2, r9
 8003906:	4659      	mov	r1, fp
 8003908:	4628      	mov	r0, r5
 800390a:	47b0      	blx	r6
 800390c:	3001      	adds	r0, #1
 800390e:	f43f aefc 	beq.w	800370a <_printf_float+0xae>
 8003912:	f108 0801 	add.w	r8, r8, #1
 8003916:	e7ee      	b.n	80038f6 <_printf_float+0x29a>
 8003918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800391a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800391c:	429a      	cmp	r2, r3
 800391e:	bfa8      	it	ge
 8003920:	461a      	movge	r2, r3
 8003922:	2a00      	cmp	r2, #0
 8003924:	4690      	mov	r8, r2
 8003926:	dd07      	ble.n	8003938 <_printf_float+0x2dc>
 8003928:	4613      	mov	r3, r2
 800392a:	4659      	mov	r1, fp
 800392c:	463a      	mov	r2, r7
 800392e:	4628      	mov	r0, r5
 8003930:	47b0      	blx	r6
 8003932:	3001      	adds	r0, #1
 8003934:	f43f aee9 	beq.w	800370a <_printf_float+0xae>
 8003938:	f104 031a 	add.w	r3, r4, #26
 800393c:	f04f 0a00 	mov.w	sl, #0
 8003940:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003944:	930b      	str	r3, [sp, #44]	; 0x2c
 8003946:	e015      	b.n	8003974 <_printf_float+0x318>
 8003948:	7fefffff 	.word	0x7fefffff
 800394c:	08007080 	.word	0x08007080
 8003950:	0800707c 	.word	0x0800707c
 8003954:	08007088 	.word	0x08007088
 8003958:	08007084 	.word	0x08007084
 800395c:	0800708c 	.word	0x0800708c
 8003960:	2301      	movs	r3, #1
 8003962:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003964:	4659      	mov	r1, fp
 8003966:	4628      	mov	r0, r5
 8003968:	47b0      	blx	r6
 800396a:	3001      	adds	r0, #1
 800396c:	f43f aecd 	beq.w	800370a <_printf_float+0xae>
 8003970:	f10a 0a01 	add.w	sl, sl, #1
 8003974:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003978:	eba9 0308 	sub.w	r3, r9, r8
 800397c:	4553      	cmp	r3, sl
 800397e:	dcef      	bgt.n	8003960 <_printf_float+0x304>
 8003980:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003984:	429a      	cmp	r2, r3
 8003986:	444f      	add	r7, r9
 8003988:	db14      	blt.n	80039b4 <_printf_float+0x358>
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	07da      	lsls	r2, r3, #31
 800398e:	d411      	bmi.n	80039b4 <_printf_float+0x358>
 8003990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003992:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003994:	eba3 0209 	sub.w	r2, r3, r9
 8003998:	eba3 0901 	sub.w	r9, r3, r1
 800399c:	4591      	cmp	r9, r2
 800399e:	bfa8      	it	ge
 80039a0:	4691      	movge	r9, r2
 80039a2:	f1b9 0f00 	cmp.w	r9, #0
 80039a6:	dc0d      	bgt.n	80039c4 <_printf_float+0x368>
 80039a8:	2700      	movs	r7, #0
 80039aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039ae:	f104 081a 	add.w	r8, r4, #26
 80039b2:	e018      	b.n	80039e6 <_printf_float+0x38a>
 80039b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039b8:	4659      	mov	r1, fp
 80039ba:	4628      	mov	r0, r5
 80039bc:	47b0      	blx	r6
 80039be:	3001      	adds	r0, #1
 80039c0:	d1e6      	bne.n	8003990 <_printf_float+0x334>
 80039c2:	e6a2      	b.n	800370a <_printf_float+0xae>
 80039c4:	464b      	mov	r3, r9
 80039c6:	463a      	mov	r2, r7
 80039c8:	4659      	mov	r1, fp
 80039ca:	4628      	mov	r0, r5
 80039cc:	47b0      	blx	r6
 80039ce:	3001      	adds	r0, #1
 80039d0:	d1ea      	bne.n	80039a8 <_printf_float+0x34c>
 80039d2:	e69a      	b.n	800370a <_printf_float+0xae>
 80039d4:	2301      	movs	r3, #1
 80039d6:	4642      	mov	r2, r8
 80039d8:	4659      	mov	r1, fp
 80039da:	4628      	mov	r0, r5
 80039dc:	47b0      	blx	r6
 80039de:	3001      	adds	r0, #1
 80039e0:	f43f ae93 	beq.w	800370a <_printf_float+0xae>
 80039e4:	3701      	adds	r7, #1
 80039e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	eba3 0309 	sub.w	r3, r3, r9
 80039f0:	42bb      	cmp	r3, r7
 80039f2:	dcef      	bgt.n	80039d4 <_printf_float+0x378>
 80039f4:	e74d      	b.n	8003892 <_printf_float+0x236>
 80039f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039f8:	2a01      	cmp	r2, #1
 80039fa:	dc01      	bgt.n	8003a00 <_printf_float+0x3a4>
 80039fc:	07db      	lsls	r3, r3, #31
 80039fe:	d538      	bpl.n	8003a72 <_printf_float+0x416>
 8003a00:	2301      	movs	r3, #1
 8003a02:	463a      	mov	r2, r7
 8003a04:	4659      	mov	r1, fp
 8003a06:	4628      	mov	r0, r5
 8003a08:	47b0      	blx	r6
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	f43f ae7d 	beq.w	800370a <_printf_float+0xae>
 8003a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a14:	4659      	mov	r1, fp
 8003a16:	4628      	mov	r0, r5
 8003a18:	47b0      	blx	r6
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	f107 0701 	add.w	r7, r7, #1
 8003a20:	f43f ae73 	beq.w	800370a <_printf_float+0xae>
 8003a24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f103 38ff 	add.w	r8, r3, #4294967295
 8003a30:	2300      	movs	r3, #0
 8003a32:	f7fd f825 	bl	8000a80 <__aeabi_dcmpeq>
 8003a36:	b9c0      	cbnz	r0, 8003a6a <_printf_float+0x40e>
 8003a38:	4643      	mov	r3, r8
 8003a3a:	463a      	mov	r2, r7
 8003a3c:	4659      	mov	r1, fp
 8003a3e:	4628      	mov	r0, r5
 8003a40:	47b0      	blx	r6
 8003a42:	3001      	adds	r0, #1
 8003a44:	d10d      	bne.n	8003a62 <_printf_float+0x406>
 8003a46:	e660      	b.n	800370a <_printf_float+0xae>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	4642      	mov	r2, r8
 8003a4c:	4659      	mov	r1, fp
 8003a4e:	4628      	mov	r0, r5
 8003a50:	47b0      	blx	r6
 8003a52:	3001      	adds	r0, #1
 8003a54:	f43f ae59 	beq.w	800370a <_printf_float+0xae>
 8003a58:	3701      	adds	r7, #1
 8003a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	42bb      	cmp	r3, r7
 8003a60:	dcf2      	bgt.n	8003a48 <_printf_float+0x3ec>
 8003a62:	464b      	mov	r3, r9
 8003a64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a68:	e6e4      	b.n	8003834 <_printf_float+0x1d8>
 8003a6a:	2700      	movs	r7, #0
 8003a6c:	f104 081a 	add.w	r8, r4, #26
 8003a70:	e7f3      	b.n	8003a5a <_printf_float+0x3fe>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e7e1      	b.n	8003a3a <_printf_float+0x3de>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4642      	mov	r2, r8
 8003a7a:	4659      	mov	r1, fp
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	47b0      	blx	r6
 8003a80:	3001      	adds	r0, #1
 8003a82:	f43f ae42 	beq.w	800370a <_printf_float+0xae>
 8003a86:	3701      	adds	r7, #1
 8003a88:	68e3      	ldr	r3, [r4, #12]
 8003a8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	42bb      	cmp	r3, r7
 8003a90:	dcf1      	bgt.n	8003a76 <_printf_float+0x41a>
 8003a92:	e702      	b.n	800389a <_printf_float+0x23e>
 8003a94:	2700      	movs	r7, #0
 8003a96:	f104 0819 	add.w	r8, r4, #25
 8003a9a:	e7f5      	b.n	8003a88 <_printf_float+0x42c>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f43f ae94 	beq.w	80037ca <_printf_float+0x16e>
 8003aa2:	f04f 0c00 	mov.w	ip, #0
 8003aa6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003aaa:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003aae:	6022      	str	r2, [r4, #0]
 8003ab0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003ab4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	463a      	mov	r2, r7
 8003abc:	464b      	mov	r3, r9
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f7ff fd3b 	bl	800353a <__cvt>
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	e64f      	b.n	8003768 <_printf_float+0x10c>

08003ac8 <_printf_common>:
 8003ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003acc:	4691      	mov	r9, r2
 8003ace:	461f      	mov	r7, r3
 8003ad0:	688a      	ldr	r2, [r1, #8]
 8003ad2:	690b      	ldr	r3, [r1, #16]
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	bfb8      	it	lt
 8003ada:	4613      	movlt	r3, r2
 8003adc:	f8c9 3000 	str.w	r3, [r9]
 8003ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aea:	b112      	cbz	r2, 8003af2 <_printf_common+0x2a>
 8003aec:	3301      	adds	r3, #1
 8003aee:	f8c9 3000 	str.w	r3, [r9]
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	0699      	lsls	r1, r3, #26
 8003af6:	bf42      	ittt	mi
 8003af8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003afc:	3302      	addmi	r3, #2
 8003afe:	f8c9 3000 	strmi.w	r3, [r9]
 8003b02:	6825      	ldr	r5, [r4, #0]
 8003b04:	f015 0506 	ands.w	r5, r5, #6
 8003b08:	d107      	bne.n	8003b1a <_printf_common+0x52>
 8003b0a:	f104 0a19 	add.w	sl, r4, #25
 8003b0e:	68e3      	ldr	r3, [r4, #12]
 8003b10:	f8d9 2000 	ldr.w	r2, [r9]
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	42ab      	cmp	r3, r5
 8003b18:	dc29      	bgt.n	8003b6e <_printf_common+0xa6>
 8003b1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b1e:	6822      	ldr	r2, [r4, #0]
 8003b20:	3300      	adds	r3, #0
 8003b22:	bf18      	it	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	0692      	lsls	r2, r2, #26
 8003b28:	d42e      	bmi.n	8003b88 <_printf_common+0xc0>
 8003b2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b2e:	4639      	mov	r1, r7
 8003b30:	4630      	mov	r0, r6
 8003b32:	47c0      	blx	r8
 8003b34:	3001      	adds	r0, #1
 8003b36:	d021      	beq.n	8003b7c <_printf_common+0xb4>
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	68e5      	ldr	r5, [r4, #12]
 8003b3c:	f003 0306 	and.w	r3, r3, #6
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	bf18      	it	ne
 8003b44:	2500      	movne	r5, #0
 8003b46:	f8d9 2000 	ldr.w	r2, [r9]
 8003b4a:	f04f 0900 	mov.w	r9, #0
 8003b4e:	bf08      	it	eq
 8003b50:	1aad      	subeq	r5, r5, r2
 8003b52:	68a3      	ldr	r3, [r4, #8]
 8003b54:	6922      	ldr	r2, [r4, #16]
 8003b56:	bf08      	it	eq
 8003b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bfc4      	itt	gt
 8003b60:	1a9b      	subgt	r3, r3, r2
 8003b62:	18ed      	addgt	r5, r5, r3
 8003b64:	341a      	adds	r4, #26
 8003b66:	454d      	cmp	r5, r9
 8003b68:	d11a      	bne.n	8003ba0 <_printf_common+0xd8>
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	e008      	b.n	8003b80 <_printf_common+0xb8>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4652      	mov	r2, sl
 8003b72:	4639      	mov	r1, r7
 8003b74:	4630      	mov	r0, r6
 8003b76:	47c0      	blx	r8
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d103      	bne.n	8003b84 <_printf_common+0xbc>
 8003b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b84:	3501      	adds	r5, #1
 8003b86:	e7c2      	b.n	8003b0e <_printf_common+0x46>
 8003b88:	2030      	movs	r0, #48	; 0x30
 8003b8a:	18e1      	adds	r1, r4, r3
 8003b8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b96:	4422      	add	r2, r4
 8003b98:	3302      	adds	r3, #2
 8003b9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b9e:	e7c4      	b.n	8003b2a <_printf_common+0x62>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	4639      	mov	r1, r7
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	47c0      	blx	r8
 8003baa:	3001      	adds	r0, #1
 8003bac:	d0e6      	beq.n	8003b7c <_printf_common+0xb4>
 8003bae:	f109 0901 	add.w	r9, r9, #1
 8003bb2:	e7d8      	b.n	8003b66 <_printf_common+0x9e>

08003bb4 <_printf_i>:
 8003bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	7e09      	ldrb	r1, [r1, #24]
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	296e      	cmp	r1, #110	; 0x6e
 8003bc4:	4617      	mov	r7, r2
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	4698      	mov	r8, r3
 8003bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bcc:	f000 80b3 	beq.w	8003d36 <_printf_i+0x182>
 8003bd0:	d822      	bhi.n	8003c18 <_printf_i+0x64>
 8003bd2:	2963      	cmp	r1, #99	; 0x63
 8003bd4:	d036      	beq.n	8003c44 <_printf_i+0x90>
 8003bd6:	d80a      	bhi.n	8003bee <_printf_i+0x3a>
 8003bd8:	2900      	cmp	r1, #0
 8003bda:	f000 80b9 	beq.w	8003d50 <_printf_i+0x19c>
 8003bde:	2958      	cmp	r1, #88	; 0x58
 8003be0:	f000 8083 	beq.w	8003cea <_printf_i+0x136>
 8003be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003bec:	e032      	b.n	8003c54 <_printf_i+0xa0>
 8003bee:	2964      	cmp	r1, #100	; 0x64
 8003bf0:	d001      	beq.n	8003bf6 <_printf_i+0x42>
 8003bf2:	2969      	cmp	r1, #105	; 0x69
 8003bf4:	d1f6      	bne.n	8003be4 <_printf_i+0x30>
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	6813      	ldr	r3, [r2, #0]
 8003bfa:	0605      	lsls	r5, r0, #24
 8003bfc:	f103 0104 	add.w	r1, r3, #4
 8003c00:	d52a      	bpl.n	8003c58 <_printf_i+0xa4>
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6011      	str	r1, [r2, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	da03      	bge.n	8003c12 <_printf_i+0x5e>
 8003c0a:	222d      	movs	r2, #45	; 0x2d
 8003c0c:	425b      	negs	r3, r3
 8003c0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c12:	486f      	ldr	r0, [pc, #444]	; (8003dd0 <_printf_i+0x21c>)
 8003c14:	220a      	movs	r2, #10
 8003c16:	e039      	b.n	8003c8c <_printf_i+0xd8>
 8003c18:	2973      	cmp	r1, #115	; 0x73
 8003c1a:	f000 809d 	beq.w	8003d58 <_printf_i+0x1a4>
 8003c1e:	d808      	bhi.n	8003c32 <_printf_i+0x7e>
 8003c20:	296f      	cmp	r1, #111	; 0x6f
 8003c22:	d020      	beq.n	8003c66 <_printf_i+0xb2>
 8003c24:	2970      	cmp	r1, #112	; 0x70
 8003c26:	d1dd      	bne.n	8003be4 <_printf_i+0x30>
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	f043 0320 	orr.w	r3, r3, #32
 8003c2e:	6023      	str	r3, [r4, #0]
 8003c30:	e003      	b.n	8003c3a <_printf_i+0x86>
 8003c32:	2975      	cmp	r1, #117	; 0x75
 8003c34:	d017      	beq.n	8003c66 <_printf_i+0xb2>
 8003c36:	2978      	cmp	r1, #120	; 0x78
 8003c38:	d1d4      	bne.n	8003be4 <_printf_i+0x30>
 8003c3a:	2378      	movs	r3, #120	; 0x78
 8003c3c:	4865      	ldr	r0, [pc, #404]	; (8003dd4 <_printf_i+0x220>)
 8003c3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c42:	e055      	b.n	8003cf0 <_printf_i+0x13c>
 8003c44:	6813      	ldr	r3, [r2, #0]
 8003c46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c4a:	1d19      	adds	r1, r3, #4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6011      	str	r1, [r2, #0]
 8003c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c54:	2301      	movs	r3, #1
 8003c56:	e08c      	b.n	8003d72 <_printf_i+0x1be>
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c5e:	6011      	str	r1, [r2, #0]
 8003c60:	bf18      	it	ne
 8003c62:	b21b      	sxthne	r3, r3
 8003c64:	e7cf      	b.n	8003c06 <_printf_i+0x52>
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	6825      	ldr	r5, [r4, #0]
 8003c6a:	1d18      	adds	r0, r3, #4
 8003c6c:	6010      	str	r0, [r2, #0]
 8003c6e:	0628      	lsls	r0, r5, #24
 8003c70:	d501      	bpl.n	8003c76 <_printf_i+0xc2>
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	e002      	b.n	8003c7c <_printf_i+0xc8>
 8003c76:	0668      	lsls	r0, r5, #25
 8003c78:	d5fb      	bpl.n	8003c72 <_printf_i+0xbe>
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	296f      	cmp	r1, #111	; 0x6f
 8003c7e:	bf14      	ite	ne
 8003c80:	220a      	movne	r2, #10
 8003c82:	2208      	moveq	r2, #8
 8003c84:	4852      	ldr	r0, [pc, #328]	; (8003dd0 <_printf_i+0x21c>)
 8003c86:	2100      	movs	r1, #0
 8003c88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c8c:	6865      	ldr	r5, [r4, #4]
 8003c8e:	2d00      	cmp	r5, #0
 8003c90:	60a5      	str	r5, [r4, #8]
 8003c92:	f2c0 8095 	blt.w	8003dc0 <_printf_i+0x20c>
 8003c96:	6821      	ldr	r1, [r4, #0]
 8003c98:	f021 0104 	bic.w	r1, r1, #4
 8003c9c:	6021      	str	r1, [r4, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d13d      	bne.n	8003d1e <_printf_i+0x16a>
 8003ca2:	2d00      	cmp	r5, #0
 8003ca4:	f040 808e 	bne.w	8003dc4 <_printf_i+0x210>
 8003ca8:	4665      	mov	r5, ip
 8003caa:	2a08      	cmp	r2, #8
 8003cac:	d10b      	bne.n	8003cc6 <_printf_i+0x112>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	07db      	lsls	r3, r3, #31
 8003cb2:	d508      	bpl.n	8003cc6 <_printf_i+0x112>
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	6862      	ldr	r2, [r4, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	bfde      	ittt	le
 8003cbc:	2330      	movle	r3, #48	; 0x30
 8003cbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cc6:	ebac 0305 	sub.w	r3, ip, r5
 8003cca:	6123      	str	r3, [r4, #16]
 8003ccc:	f8cd 8000 	str.w	r8, [sp]
 8003cd0:	463b      	mov	r3, r7
 8003cd2:	aa03      	add	r2, sp, #12
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f7ff fef6 	bl	8003ac8 <_printf_common>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	d14d      	bne.n	8003d7c <_printf_i+0x1c8>
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	b005      	add	sp, #20
 8003ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cea:	4839      	ldr	r0, [pc, #228]	; (8003dd0 <_printf_i+0x21c>)
 8003cec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003cf0:	6813      	ldr	r3, [r2, #0]
 8003cf2:	6821      	ldr	r1, [r4, #0]
 8003cf4:	1d1d      	adds	r5, r3, #4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6015      	str	r5, [r2, #0]
 8003cfa:	060a      	lsls	r2, r1, #24
 8003cfc:	d50b      	bpl.n	8003d16 <_printf_i+0x162>
 8003cfe:	07ca      	lsls	r2, r1, #31
 8003d00:	bf44      	itt	mi
 8003d02:	f041 0120 	orrmi.w	r1, r1, #32
 8003d06:	6021      	strmi	r1, [r4, #0]
 8003d08:	b91b      	cbnz	r3, 8003d12 <_printf_i+0x15e>
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	f022 0220 	bic.w	r2, r2, #32
 8003d10:	6022      	str	r2, [r4, #0]
 8003d12:	2210      	movs	r2, #16
 8003d14:	e7b7      	b.n	8003c86 <_printf_i+0xd2>
 8003d16:	064d      	lsls	r5, r1, #25
 8003d18:	bf48      	it	mi
 8003d1a:	b29b      	uxthmi	r3, r3
 8003d1c:	e7ef      	b.n	8003cfe <_printf_i+0x14a>
 8003d1e:	4665      	mov	r5, ip
 8003d20:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d24:	fb02 3311 	mls	r3, r2, r1, r3
 8003d28:	5cc3      	ldrb	r3, [r0, r3]
 8003d2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d2e:	460b      	mov	r3, r1
 8003d30:	2900      	cmp	r1, #0
 8003d32:	d1f5      	bne.n	8003d20 <_printf_i+0x16c>
 8003d34:	e7b9      	b.n	8003caa <_printf_i+0xf6>
 8003d36:	6813      	ldr	r3, [r2, #0]
 8003d38:	6825      	ldr	r5, [r4, #0]
 8003d3a:	1d18      	adds	r0, r3, #4
 8003d3c:	6961      	ldr	r1, [r4, #20]
 8003d3e:	6010      	str	r0, [r2, #0]
 8003d40:	0628      	lsls	r0, r5, #24
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	d501      	bpl.n	8003d4a <_printf_i+0x196>
 8003d46:	6019      	str	r1, [r3, #0]
 8003d48:	e002      	b.n	8003d50 <_printf_i+0x19c>
 8003d4a:	066a      	lsls	r2, r5, #25
 8003d4c:	d5fb      	bpl.n	8003d46 <_printf_i+0x192>
 8003d4e:	8019      	strh	r1, [r3, #0]
 8003d50:	2300      	movs	r3, #0
 8003d52:	4665      	mov	r5, ip
 8003d54:	6123      	str	r3, [r4, #16]
 8003d56:	e7b9      	b.n	8003ccc <_printf_i+0x118>
 8003d58:	6813      	ldr	r3, [r2, #0]
 8003d5a:	1d19      	adds	r1, r3, #4
 8003d5c:	6011      	str	r1, [r2, #0]
 8003d5e:	681d      	ldr	r5, [r3, #0]
 8003d60:	6862      	ldr	r2, [r4, #4]
 8003d62:	2100      	movs	r1, #0
 8003d64:	4628      	mov	r0, r5
 8003d66:	f002 fab9 	bl	80062dc <memchr>
 8003d6a:	b108      	cbz	r0, 8003d70 <_printf_i+0x1bc>
 8003d6c:	1b40      	subs	r0, r0, r5
 8003d6e:	6060      	str	r0, [r4, #4]
 8003d70:	6863      	ldr	r3, [r4, #4]
 8003d72:	6123      	str	r3, [r4, #16]
 8003d74:	2300      	movs	r3, #0
 8003d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d7a:	e7a7      	b.n	8003ccc <_printf_i+0x118>
 8003d7c:	6923      	ldr	r3, [r4, #16]
 8003d7e:	462a      	mov	r2, r5
 8003d80:	4639      	mov	r1, r7
 8003d82:	4630      	mov	r0, r6
 8003d84:	47c0      	blx	r8
 8003d86:	3001      	adds	r0, #1
 8003d88:	d0aa      	beq.n	8003ce0 <_printf_i+0x12c>
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	079b      	lsls	r3, r3, #30
 8003d8e:	d413      	bmi.n	8003db8 <_printf_i+0x204>
 8003d90:	68e0      	ldr	r0, [r4, #12]
 8003d92:	9b03      	ldr	r3, [sp, #12]
 8003d94:	4298      	cmp	r0, r3
 8003d96:	bfb8      	it	lt
 8003d98:	4618      	movlt	r0, r3
 8003d9a:	e7a3      	b.n	8003ce4 <_printf_i+0x130>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	464a      	mov	r2, r9
 8003da0:	4639      	mov	r1, r7
 8003da2:	4630      	mov	r0, r6
 8003da4:	47c0      	blx	r8
 8003da6:	3001      	adds	r0, #1
 8003da8:	d09a      	beq.n	8003ce0 <_printf_i+0x12c>
 8003daa:	3501      	adds	r5, #1
 8003dac:	68e3      	ldr	r3, [r4, #12]
 8003dae:	9a03      	ldr	r2, [sp, #12]
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	42ab      	cmp	r3, r5
 8003db4:	dcf2      	bgt.n	8003d9c <_printf_i+0x1e8>
 8003db6:	e7eb      	b.n	8003d90 <_printf_i+0x1dc>
 8003db8:	2500      	movs	r5, #0
 8003dba:	f104 0919 	add.w	r9, r4, #25
 8003dbe:	e7f5      	b.n	8003dac <_printf_i+0x1f8>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1ac      	bne.n	8003d1e <_printf_i+0x16a>
 8003dc4:	7803      	ldrb	r3, [r0, #0]
 8003dc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dce:	e76c      	b.n	8003caa <_printf_i+0xf6>
 8003dd0:	0800708e 	.word	0x0800708e
 8003dd4:	0800709f 	.word	0x0800709f

08003dd8 <_scanf_float>:
 8003dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ddc:	469a      	mov	sl, r3
 8003dde:	688b      	ldr	r3, [r1, #8]
 8003de0:	4616      	mov	r6, r2
 8003de2:	1e5a      	subs	r2, r3, #1
 8003de4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003de8:	bf88      	it	hi
 8003dea:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003dee:	b087      	sub	sp, #28
 8003df0:	bf85      	ittet	hi
 8003df2:	189b      	addhi	r3, r3, r2
 8003df4:	9301      	strhi	r3, [sp, #4]
 8003df6:	2300      	movls	r3, #0
 8003df8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003dfc:	4688      	mov	r8, r1
 8003dfe:	f04f 0b00 	mov.w	fp, #0
 8003e02:	bf8c      	ite	hi
 8003e04:	608b      	strhi	r3, [r1, #8]
 8003e06:	9301      	strls	r3, [sp, #4]
 8003e08:	680b      	ldr	r3, [r1, #0]
 8003e0a:	4607      	mov	r7, r0
 8003e0c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003e10:	f848 3b1c 	str.w	r3, [r8], #28
 8003e14:	460c      	mov	r4, r1
 8003e16:	4645      	mov	r5, r8
 8003e18:	465a      	mov	r2, fp
 8003e1a:	46d9      	mov	r9, fp
 8003e1c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003e20:	f8cd b008 	str.w	fp, [sp, #8]
 8003e24:	68a1      	ldr	r1, [r4, #8]
 8003e26:	b181      	cbz	r1, 8003e4a <_scanf_float+0x72>
 8003e28:	6833      	ldr	r3, [r6, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b49      	cmp	r3, #73	; 0x49
 8003e2e:	d071      	beq.n	8003f14 <_scanf_float+0x13c>
 8003e30:	d84d      	bhi.n	8003ece <_scanf_float+0xf6>
 8003e32:	2b39      	cmp	r3, #57	; 0x39
 8003e34:	d840      	bhi.n	8003eb8 <_scanf_float+0xe0>
 8003e36:	2b31      	cmp	r3, #49	; 0x31
 8003e38:	f080 8088 	bcs.w	8003f4c <_scanf_float+0x174>
 8003e3c:	2b2d      	cmp	r3, #45	; 0x2d
 8003e3e:	f000 8090 	beq.w	8003f62 <_scanf_float+0x18a>
 8003e42:	d815      	bhi.n	8003e70 <_scanf_float+0x98>
 8003e44:	2b2b      	cmp	r3, #43	; 0x2b
 8003e46:	f000 808c 	beq.w	8003f62 <_scanf_float+0x18a>
 8003e4a:	f1b9 0f00 	cmp.w	r9, #0
 8003e4e:	d003      	beq.n	8003e58 <_scanf_float+0x80>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e56:	6023      	str	r3, [r4, #0]
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	2a01      	cmp	r2, #1
 8003e5c:	f200 80ea 	bhi.w	8004034 <_scanf_float+0x25c>
 8003e60:	4545      	cmp	r5, r8
 8003e62:	f200 80dc 	bhi.w	800401e <_scanf_float+0x246>
 8003e66:	2601      	movs	r6, #1
 8003e68:	4630      	mov	r0, r6
 8003e6a:	b007      	add	sp, #28
 8003e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e70:	2b2e      	cmp	r3, #46	; 0x2e
 8003e72:	f000 809f 	beq.w	8003fb4 <_scanf_float+0x1dc>
 8003e76:	2b30      	cmp	r3, #48	; 0x30
 8003e78:	d1e7      	bne.n	8003e4a <_scanf_float+0x72>
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003e80:	d064      	beq.n	8003f4c <_scanf_float+0x174>
 8003e82:	9b01      	ldr	r3, [sp, #4]
 8003e84:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003e88:	6020      	str	r0, [r4, #0]
 8003e8a:	f109 0901 	add.w	r9, r9, #1
 8003e8e:	b11b      	cbz	r3, 8003e98 <_scanf_float+0xc0>
 8003e90:	3b01      	subs	r3, #1
 8003e92:	3101      	adds	r1, #1
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	60a1      	str	r1, [r4, #8]
 8003e98:	68a3      	ldr	r3, [r4, #8]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	60a3      	str	r3, [r4, #8]
 8003e9e:	6923      	ldr	r3, [r4, #16]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	6123      	str	r3, [r4, #16]
 8003ea4:	6873      	ldr	r3, [r6, #4]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	6073      	str	r3, [r6, #4]
 8003eac:	f340 80ac 	ble.w	8004008 <_scanf_float+0x230>
 8003eb0:	6833      	ldr	r3, [r6, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	6033      	str	r3, [r6, #0]
 8003eb6:	e7b5      	b.n	8003e24 <_scanf_float+0x4c>
 8003eb8:	2b45      	cmp	r3, #69	; 0x45
 8003eba:	f000 8085 	beq.w	8003fc8 <_scanf_float+0x1f0>
 8003ebe:	2b46      	cmp	r3, #70	; 0x46
 8003ec0:	d06a      	beq.n	8003f98 <_scanf_float+0x1c0>
 8003ec2:	2b41      	cmp	r3, #65	; 0x41
 8003ec4:	d1c1      	bne.n	8003e4a <_scanf_float+0x72>
 8003ec6:	2a01      	cmp	r2, #1
 8003ec8:	d1bf      	bne.n	8003e4a <_scanf_float+0x72>
 8003eca:	2202      	movs	r2, #2
 8003ecc:	e046      	b.n	8003f5c <_scanf_float+0x184>
 8003ece:	2b65      	cmp	r3, #101	; 0x65
 8003ed0:	d07a      	beq.n	8003fc8 <_scanf_float+0x1f0>
 8003ed2:	d818      	bhi.n	8003f06 <_scanf_float+0x12e>
 8003ed4:	2b54      	cmp	r3, #84	; 0x54
 8003ed6:	d066      	beq.n	8003fa6 <_scanf_float+0x1ce>
 8003ed8:	d811      	bhi.n	8003efe <_scanf_float+0x126>
 8003eda:	2b4e      	cmp	r3, #78	; 0x4e
 8003edc:	d1b5      	bne.n	8003e4a <_scanf_float+0x72>
 8003ede:	2a00      	cmp	r2, #0
 8003ee0:	d146      	bne.n	8003f70 <_scanf_float+0x198>
 8003ee2:	f1b9 0f00 	cmp.w	r9, #0
 8003ee6:	d145      	bne.n	8003f74 <_scanf_float+0x19c>
 8003ee8:	6821      	ldr	r1, [r4, #0]
 8003eea:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003eee:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003ef2:	d13f      	bne.n	8003f74 <_scanf_float+0x19c>
 8003ef4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003ef8:	6021      	str	r1, [r4, #0]
 8003efa:	2201      	movs	r2, #1
 8003efc:	e02e      	b.n	8003f5c <_scanf_float+0x184>
 8003efe:	2b59      	cmp	r3, #89	; 0x59
 8003f00:	d01e      	beq.n	8003f40 <_scanf_float+0x168>
 8003f02:	2b61      	cmp	r3, #97	; 0x61
 8003f04:	e7de      	b.n	8003ec4 <_scanf_float+0xec>
 8003f06:	2b6e      	cmp	r3, #110	; 0x6e
 8003f08:	d0e9      	beq.n	8003ede <_scanf_float+0x106>
 8003f0a:	d815      	bhi.n	8003f38 <_scanf_float+0x160>
 8003f0c:	2b66      	cmp	r3, #102	; 0x66
 8003f0e:	d043      	beq.n	8003f98 <_scanf_float+0x1c0>
 8003f10:	2b69      	cmp	r3, #105	; 0x69
 8003f12:	d19a      	bne.n	8003e4a <_scanf_float+0x72>
 8003f14:	f1bb 0f00 	cmp.w	fp, #0
 8003f18:	d138      	bne.n	8003f8c <_scanf_float+0x1b4>
 8003f1a:	f1b9 0f00 	cmp.w	r9, #0
 8003f1e:	d197      	bne.n	8003e50 <_scanf_float+0x78>
 8003f20:	6821      	ldr	r1, [r4, #0]
 8003f22:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003f26:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003f2a:	d195      	bne.n	8003e58 <_scanf_float+0x80>
 8003f2c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003f30:	6021      	str	r1, [r4, #0]
 8003f32:	f04f 0b01 	mov.w	fp, #1
 8003f36:	e011      	b.n	8003f5c <_scanf_float+0x184>
 8003f38:	2b74      	cmp	r3, #116	; 0x74
 8003f3a:	d034      	beq.n	8003fa6 <_scanf_float+0x1ce>
 8003f3c:	2b79      	cmp	r3, #121	; 0x79
 8003f3e:	d184      	bne.n	8003e4a <_scanf_float+0x72>
 8003f40:	f1bb 0f07 	cmp.w	fp, #7
 8003f44:	d181      	bne.n	8003e4a <_scanf_float+0x72>
 8003f46:	f04f 0b08 	mov.w	fp, #8
 8003f4a:	e007      	b.n	8003f5c <_scanf_float+0x184>
 8003f4c:	eb12 0f0b 	cmn.w	r2, fp
 8003f50:	f47f af7b 	bne.w	8003e4a <_scanf_float+0x72>
 8003f54:	6821      	ldr	r1, [r4, #0]
 8003f56:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003f5a:	6021      	str	r1, [r4, #0]
 8003f5c:	702b      	strb	r3, [r5, #0]
 8003f5e:	3501      	adds	r5, #1
 8003f60:	e79a      	b.n	8003e98 <_scanf_float+0xc0>
 8003f62:	6821      	ldr	r1, [r4, #0]
 8003f64:	0608      	lsls	r0, r1, #24
 8003f66:	f57f af70 	bpl.w	8003e4a <_scanf_float+0x72>
 8003f6a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003f6e:	e7f4      	b.n	8003f5a <_scanf_float+0x182>
 8003f70:	2a02      	cmp	r2, #2
 8003f72:	d047      	beq.n	8004004 <_scanf_float+0x22c>
 8003f74:	f1bb 0f01 	cmp.w	fp, #1
 8003f78:	d003      	beq.n	8003f82 <_scanf_float+0x1aa>
 8003f7a:	f1bb 0f04 	cmp.w	fp, #4
 8003f7e:	f47f af64 	bne.w	8003e4a <_scanf_float+0x72>
 8003f82:	f10b 0b01 	add.w	fp, fp, #1
 8003f86:	fa5f fb8b 	uxtb.w	fp, fp
 8003f8a:	e7e7      	b.n	8003f5c <_scanf_float+0x184>
 8003f8c:	f1bb 0f03 	cmp.w	fp, #3
 8003f90:	d0f7      	beq.n	8003f82 <_scanf_float+0x1aa>
 8003f92:	f1bb 0f05 	cmp.w	fp, #5
 8003f96:	e7f2      	b.n	8003f7e <_scanf_float+0x1a6>
 8003f98:	f1bb 0f02 	cmp.w	fp, #2
 8003f9c:	f47f af55 	bne.w	8003e4a <_scanf_float+0x72>
 8003fa0:	f04f 0b03 	mov.w	fp, #3
 8003fa4:	e7da      	b.n	8003f5c <_scanf_float+0x184>
 8003fa6:	f1bb 0f06 	cmp.w	fp, #6
 8003faa:	f47f af4e 	bne.w	8003e4a <_scanf_float+0x72>
 8003fae:	f04f 0b07 	mov.w	fp, #7
 8003fb2:	e7d3      	b.n	8003f5c <_scanf_float+0x184>
 8003fb4:	6821      	ldr	r1, [r4, #0]
 8003fb6:	0588      	lsls	r0, r1, #22
 8003fb8:	f57f af47 	bpl.w	8003e4a <_scanf_float+0x72>
 8003fbc:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003fc0:	6021      	str	r1, [r4, #0]
 8003fc2:	f8cd 9008 	str.w	r9, [sp, #8]
 8003fc6:	e7c9      	b.n	8003f5c <_scanf_float+0x184>
 8003fc8:	6821      	ldr	r1, [r4, #0]
 8003fca:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003fce:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003fd2:	d006      	beq.n	8003fe2 <_scanf_float+0x20a>
 8003fd4:	0548      	lsls	r0, r1, #21
 8003fd6:	f57f af38 	bpl.w	8003e4a <_scanf_float+0x72>
 8003fda:	f1b9 0f00 	cmp.w	r9, #0
 8003fde:	f43f af3b 	beq.w	8003e58 <_scanf_float+0x80>
 8003fe2:	0588      	lsls	r0, r1, #22
 8003fe4:	bf58      	it	pl
 8003fe6:	9802      	ldrpl	r0, [sp, #8]
 8003fe8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003fec:	bf58      	it	pl
 8003fee:	eba9 0000 	subpl.w	r0, r9, r0
 8003ff2:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003ff6:	bf58      	it	pl
 8003ff8:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003ffc:	6021      	str	r1, [r4, #0]
 8003ffe:	f04f 0900 	mov.w	r9, #0
 8004002:	e7ab      	b.n	8003f5c <_scanf_float+0x184>
 8004004:	2203      	movs	r2, #3
 8004006:	e7a9      	b.n	8003f5c <_scanf_float+0x184>
 8004008:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800400c:	4631      	mov	r1, r6
 800400e:	4638      	mov	r0, r7
 8004010:	9205      	str	r2, [sp, #20]
 8004012:	4798      	blx	r3
 8004014:	9a05      	ldr	r2, [sp, #20]
 8004016:	2800      	cmp	r0, #0
 8004018:	f43f af04 	beq.w	8003e24 <_scanf_float+0x4c>
 800401c:	e715      	b.n	8003e4a <_scanf_float+0x72>
 800401e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004022:	4632      	mov	r2, r6
 8004024:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004028:	4638      	mov	r0, r7
 800402a:	4798      	blx	r3
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	3b01      	subs	r3, #1
 8004030:	6123      	str	r3, [r4, #16]
 8004032:	e715      	b.n	8003e60 <_scanf_float+0x88>
 8004034:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004038:	2b06      	cmp	r3, #6
 800403a:	d80a      	bhi.n	8004052 <_scanf_float+0x27a>
 800403c:	f1bb 0f02 	cmp.w	fp, #2
 8004040:	d967      	bls.n	8004112 <_scanf_float+0x33a>
 8004042:	f1ab 0b03 	sub.w	fp, fp, #3
 8004046:	fa5f fb8b 	uxtb.w	fp, fp
 800404a:	eba5 0b0b 	sub.w	fp, r5, fp
 800404e:	455d      	cmp	r5, fp
 8004050:	d14a      	bne.n	80040e8 <_scanf_float+0x310>
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	05da      	lsls	r2, r3, #23
 8004056:	d51f      	bpl.n	8004098 <_scanf_float+0x2c0>
 8004058:	055b      	lsls	r3, r3, #21
 800405a:	d467      	bmi.n	800412c <_scanf_float+0x354>
 800405c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004060:	6923      	ldr	r3, [r4, #16]
 8004062:	2965      	cmp	r1, #101	; 0x65
 8004064:	f103 33ff 	add.w	r3, r3, #4294967295
 8004068:	f105 3bff 	add.w	fp, r5, #4294967295
 800406c:	6123      	str	r3, [r4, #16]
 800406e:	d00d      	beq.n	800408c <_scanf_float+0x2b4>
 8004070:	2945      	cmp	r1, #69	; 0x45
 8004072:	d00b      	beq.n	800408c <_scanf_float+0x2b4>
 8004074:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004078:	4632      	mov	r2, r6
 800407a:	4638      	mov	r0, r7
 800407c:	4798      	blx	r3
 800407e:	6923      	ldr	r3, [r4, #16]
 8004080:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004084:	3b01      	subs	r3, #1
 8004086:	f1a5 0b02 	sub.w	fp, r5, #2
 800408a:	6123      	str	r3, [r4, #16]
 800408c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004090:	4632      	mov	r2, r6
 8004092:	4638      	mov	r0, r7
 8004094:	4798      	blx	r3
 8004096:	465d      	mov	r5, fp
 8004098:	6826      	ldr	r6, [r4, #0]
 800409a:	f016 0610 	ands.w	r6, r6, #16
 800409e:	d176      	bne.n	800418e <_scanf_float+0x3b6>
 80040a0:	702e      	strb	r6, [r5, #0]
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ac:	d141      	bne.n	8004132 <_scanf_float+0x35a>
 80040ae:	9b02      	ldr	r3, [sp, #8]
 80040b0:	eba9 0303 	sub.w	r3, r9, r3
 80040b4:	425a      	negs	r2, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d148      	bne.n	800414c <_scanf_float+0x374>
 80040ba:	4641      	mov	r1, r8
 80040bc:	2200      	movs	r2, #0
 80040be:	4638      	mov	r0, r7
 80040c0:	f000 febe 	bl	8004e40 <_strtod_r>
 80040c4:	6825      	ldr	r5, [r4, #0]
 80040c6:	4680      	mov	r8, r0
 80040c8:	f015 0f02 	tst.w	r5, #2
 80040cc:	4689      	mov	r9, r1
 80040ce:	f8da 3000 	ldr.w	r3, [sl]
 80040d2:	d046      	beq.n	8004162 <_scanf_float+0x38a>
 80040d4:	1d1a      	adds	r2, r3, #4
 80040d6:	f8ca 2000 	str.w	r2, [sl]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	e9c3 8900 	strd	r8, r9, [r3]
 80040e0:	68e3      	ldr	r3, [r4, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60e3      	str	r3, [r4, #12]
 80040e6:	e6bf      	b.n	8003e68 <_scanf_float+0x90>
 80040e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80040ec:	4632      	mov	r2, r6
 80040ee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80040f2:	4638      	mov	r0, r7
 80040f4:	4798      	blx	r3
 80040f6:	6923      	ldr	r3, [r4, #16]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	6123      	str	r3, [r4, #16]
 80040fc:	e7a7      	b.n	800404e <_scanf_float+0x276>
 80040fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004102:	4632      	mov	r2, r6
 8004104:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004108:	4638      	mov	r0, r7
 800410a:	4798      	blx	r3
 800410c:	6923      	ldr	r3, [r4, #16]
 800410e:	3b01      	subs	r3, #1
 8004110:	6123      	str	r3, [r4, #16]
 8004112:	4545      	cmp	r5, r8
 8004114:	d8f3      	bhi.n	80040fe <_scanf_float+0x326>
 8004116:	e6a6      	b.n	8003e66 <_scanf_float+0x8e>
 8004118:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800411c:	4632      	mov	r2, r6
 800411e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004122:	4638      	mov	r0, r7
 8004124:	4798      	blx	r3
 8004126:	6923      	ldr	r3, [r4, #16]
 8004128:	3b01      	subs	r3, #1
 800412a:	6123      	str	r3, [r4, #16]
 800412c:	4545      	cmp	r5, r8
 800412e:	d8f3      	bhi.n	8004118 <_scanf_float+0x340>
 8004130:	e699      	b.n	8003e66 <_scanf_float+0x8e>
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0c0      	beq.n	80040ba <_scanf_float+0x2e2>
 8004138:	9904      	ldr	r1, [sp, #16]
 800413a:	230a      	movs	r3, #10
 800413c:	4632      	mov	r2, r6
 800413e:	3101      	adds	r1, #1
 8004140:	4638      	mov	r0, r7
 8004142:	f000 ff09 	bl	8004f58 <_strtol_r>
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	9d04      	ldr	r5, [sp, #16]
 800414a:	1ac2      	subs	r2, r0, r3
 800414c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004150:	429d      	cmp	r5, r3
 8004152:	bf28      	it	cs
 8004154:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004158:	490e      	ldr	r1, [pc, #56]	; (8004194 <_scanf_float+0x3bc>)
 800415a:	4628      	mov	r0, r5
 800415c:	f000 f820 	bl	80041a0 <siprintf>
 8004160:	e7ab      	b.n	80040ba <_scanf_float+0x2e2>
 8004162:	1d1f      	adds	r7, r3, #4
 8004164:	f015 0504 	ands.w	r5, r5, #4
 8004168:	f8ca 7000 	str.w	r7, [sl]
 800416c:	d1b5      	bne.n	80040da <_scanf_float+0x302>
 800416e:	681f      	ldr	r7, [r3, #0]
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	f7fc fcb6 	bl	8000ae4 <__aeabi_dcmpun>
 8004178:	b120      	cbz	r0, 8004184 <_scanf_float+0x3ac>
 800417a:	4628      	mov	r0, r5
 800417c:	f000 f80c 	bl	8004198 <nanf>
 8004180:	6038      	str	r0, [r7, #0]
 8004182:	e7ad      	b.n	80040e0 <_scanf_float+0x308>
 8004184:	4640      	mov	r0, r8
 8004186:	4649      	mov	r1, r9
 8004188:	f7fc fd0a 	bl	8000ba0 <__aeabi_d2f>
 800418c:	e7f8      	b.n	8004180 <_scanf_float+0x3a8>
 800418e:	2600      	movs	r6, #0
 8004190:	e66a      	b.n	8003e68 <_scanf_float+0x90>
 8004192:	bf00      	nop
 8004194:	080070b0 	.word	0x080070b0

08004198 <nanf>:
 8004198:	4800      	ldr	r0, [pc, #0]	; (800419c <nanf+0x4>)
 800419a:	4770      	bx	lr
 800419c:	7fc00000 	.word	0x7fc00000

080041a0 <siprintf>:
 80041a0:	b40e      	push	{r1, r2, r3}
 80041a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041a6:	b500      	push	{lr}
 80041a8:	b09c      	sub	sp, #112	; 0x70
 80041aa:	ab1d      	add	r3, sp, #116	; 0x74
 80041ac:	9002      	str	r0, [sp, #8]
 80041ae:	9006      	str	r0, [sp, #24]
 80041b0:	9107      	str	r1, [sp, #28]
 80041b2:	9104      	str	r1, [sp, #16]
 80041b4:	4808      	ldr	r0, [pc, #32]	; (80041d8 <siprintf+0x38>)
 80041b6:	4909      	ldr	r1, [pc, #36]	; (80041dc <siprintf+0x3c>)
 80041b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041bc:	9105      	str	r1, [sp, #20]
 80041be:	6800      	ldr	r0, [r0, #0]
 80041c0:	a902      	add	r1, sp, #8
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	f002 fd9e 	bl	8006d04 <_svfiprintf_r>
 80041c8:	2200      	movs	r2, #0
 80041ca:	9b02      	ldr	r3, [sp, #8]
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	b01c      	add	sp, #112	; 0x70
 80041d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041d4:	b003      	add	sp, #12
 80041d6:	4770      	bx	lr
 80041d8:	20000024 	.word	0x20000024
 80041dc:	ffff0208 	.word	0xffff0208

080041e0 <strcat>:
 80041e0:	4603      	mov	r3, r0
 80041e2:	b510      	push	{r4, lr}
 80041e4:	781a      	ldrb	r2, [r3, #0]
 80041e6:	1c5c      	adds	r4, r3, #1
 80041e8:	b93a      	cbnz	r2, 80041fa <strcat+0x1a>
 80041ea:	3b01      	subs	r3, #1
 80041ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041f4:	2a00      	cmp	r2, #0
 80041f6:	d1f9      	bne.n	80041ec <strcat+0xc>
 80041f8:	bd10      	pop	{r4, pc}
 80041fa:	4623      	mov	r3, r4
 80041fc:	e7f2      	b.n	80041e4 <strcat+0x4>

080041fe <sulp>:
 80041fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004202:	460f      	mov	r7, r1
 8004204:	4690      	mov	r8, r2
 8004206:	f002 fb41 	bl	800688c <__ulp>
 800420a:	4604      	mov	r4, r0
 800420c:	460d      	mov	r5, r1
 800420e:	f1b8 0f00 	cmp.w	r8, #0
 8004212:	d011      	beq.n	8004238 <sulp+0x3a>
 8004214:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004218:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800421c:	2b00      	cmp	r3, #0
 800421e:	dd0b      	ble.n	8004238 <sulp+0x3a>
 8004220:	2400      	movs	r4, #0
 8004222:	051b      	lsls	r3, r3, #20
 8004224:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004228:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800422c:	4622      	mov	r2, r4
 800422e:	462b      	mov	r3, r5
 8004230:	f7fc f9be 	bl	80005b0 <__aeabi_dmul>
 8004234:	4604      	mov	r4, r0
 8004236:	460d      	mov	r5, r1
 8004238:	4620      	mov	r0, r4
 800423a:	4629      	mov	r1, r5
 800423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004240 <_strtod_l>:
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	461f      	mov	r7, r3
 8004246:	2300      	movs	r3, #0
 8004248:	b0a1      	sub	sp, #132	; 0x84
 800424a:	4683      	mov	fp, r0
 800424c:	4638      	mov	r0, r7
 800424e:	460e      	mov	r6, r1
 8004250:	9217      	str	r2, [sp, #92]	; 0x5c
 8004252:	931c      	str	r3, [sp, #112]	; 0x70
 8004254:	f002 f817 	bl	8006286 <__localeconv_l>
 8004258:	4680      	mov	r8, r0
 800425a:	6800      	ldr	r0, [r0, #0]
 800425c:	f7fb ffe4 	bl	8000228 <strlen>
 8004260:	f04f 0900 	mov.w	r9, #0
 8004264:	4604      	mov	r4, r0
 8004266:	f04f 0a00 	mov.w	sl, #0
 800426a:	961b      	str	r6, [sp, #108]	; 0x6c
 800426c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800426e:	781a      	ldrb	r2, [r3, #0]
 8004270:	2a0d      	cmp	r2, #13
 8004272:	d832      	bhi.n	80042da <_strtod_l+0x9a>
 8004274:	2a09      	cmp	r2, #9
 8004276:	d236      	bcs.n	80042e6 <_strtod_l+0xa6>
 8004278:	2a00      	cmp	r2, #0
 800427a:	d03e      	beq.n	80042fa <_strtod_l+0xba>
 800427c:	2300      	movs	r3, #0
 800427e:	930d      	str	r3, [sp, #52]	; 0x34
 8004280:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004282:	782b      	ldrb	r3, [r5, #0]
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	f040 80ac 	bne.w	80043e2 <_strtod_l+0x1a2>
 800428a:	786b      	ldrb	r3, [r5, #1]
 800428c:	2b58      	cmp	r3, #88	; 0x58
 800428e:	d001      	beq.n	8004294 <_strtod_l+0x54>
 8004290:	2b78      	cmp	r3, #120	; 0x78
 8004292:	d167      	bne.n	8004364 <_strtod_l+0x124>
 8004294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004296:	9702      	str	r7, [sp, #8]
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	ab1c      	add	r3, sp, #112	; 0x70
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	4a89      	ldr	r2, [pc, #548]	; (80044c4 <_strtod_l+0x284>)
 80042a0:	ab1d      	add	r3, sp, #116	; 0x74
 80042a2:	a91b      	add	r1, sp, #108	; 0x6c
 80042a4:	4658      	mov	r0, fp
 80042a6:	f001 fd13 	bl	8005cd0 <__gethex>
 80042aa:	f010 0407 	ands.w	r4, r0, #7
 80042ae:	4606      	mov	r6, r0
 80042b0:	d005      	beq.n	80042be <_strtod_l+0x7e>
 80042b2:	2c06      	cmp	r4, #6
 80042b4:	d12b      	bne.n	800430e <_strtod_l+0xce>
 80042b6:	2300      	movs	r3, #0
 80042b8:	3501      	adds	r5, #1
 80042ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80042bc:	930d      	str	r3, [sp, #52]	; 0x34
 80042be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f040 85a6 	bne.w	8004e12 <_strtod_l+0xbd2>
 80042c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042c8:	b1e3      	cbz	r3, 8004304 <_strtod_l+0xc4>
 80042ca:	464a      	mov	r2, r9
 80042cc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	b021      	add	sp, #132	; 0x84
 80042d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042da:	2a2b      	cmp	r2, #43	; 0x2b
 80042dc:	d015      	beq.n	800430a <_strtod_l+0xca>
 80042de:	2a2d      	cmp	r2, #45	; 0x2d
 80042e0:	d004      	beq.n	80042ec <_strtod_l+0xac>
 80042e2:	2a20      	cmp	r2, #32
 80042e4:	d1ca      	bne.n	800427c <_strtod_l+0x3c>
 80042e6:	3301      	adds	r3, #1
 80042e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80042ea:	e7bf      	b.n	800426c <_strtod_l+0x2c>
 80042ec:	2201      	movs	r2, #1
 80042ee:	920d      	str	r2, [sp, #52]	; 0x34
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1c2      	bne.n	8004280 <_strtod_l+0x40>
 80042fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f040 8585 	bne.w	8004e0e <_strtod_l+0xbce>
 8004304:	464a      	mov	r2, r9
 8004306:	4653      	mov	r3, sl
 8004308:	e7e2      	b.n	80042d0 <_strtod_l+0x90>
 800430a:	2200      	movs	r2, #0
 800430c:	e7ef      	b.n	80042ee <_strtod_l+0xae>
 800430e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004310:	b13a      	cbz	r2, 8004322 <_strtod_l+0xe2>
 8004312:	2135      	movs	r1, #53	; 0x35
 8004314:	a81e      	add	r0, sp, #120	; 0x78
 8004316:	f002 fbac 	bl	8006a72 <__copybits>
 800431a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800431c:	4658      	mov	r0, fp
 800431e:	f002 f81f 	bl	8006360 <_Bfree>
 8004322:	3c01      	subs	r4, #1
 8004324:	2c04      	cmp	r4, #4
 8004326:	d806      	bhi.n	8004336 <_strtod_l+0xf6>
 8004328:	e8df f004 	tbb	[pc, r4]
 800432c:	1714030a 	.word	0x1714030a
 8004330:	0a          	.byte	0x0a
 8004331:	00          	.byte	0x00
 8004332:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004336:	0731      	lsls	r1, r6, #28
 8004338:	d5c1      	bpl.n	80042be <_strtod_l+0x7e>
 800433a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800433e:	e7be      	b.n	80042be <_strtod_l+0x7e>
 8004340:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004342:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8004346:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800434a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800434e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8004352:	e7f0      	b.n	8004336 <_strtod_l+0xf6>
 8004354:	f8df a170 	ldr.w	sl, [pc, #368]	; 80044c8 <_strtod_l+0x288>
 8004358:	e7ed      	b.n	8004336 <_strtod_l+0xf6>
 800435a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800435e:	f04f 39ff 	mov.w	r9, #4294967295
 8004362:	e7e8      	b.n	8004336 <_strtod_l+0xf6>
 8004364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	921b      	str	r2, [sp, #108]	; 0x6c
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d0f9      	beq.n	8004364 <_strtod_l+0x124>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0a4      	beq.n	80042be <_strtod_l+0x7e>
 8004374:	2301      	movs	r3, #1
 8004376:	2500      	movs	r5, #0
 8004378:	220a      	movs	r2, #10
 800437a:	9307      	str	r3, [sp, #28]
 800437c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800437e:	9506      	str	r5, [sp, #24]
 8004380:	9308      	str	r3, [sp, #32]
 8004382:	9504      	str	r5, [sp, #16]
 8004384:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004386:	7807      	ldrb	r7, [r0, #0]
 8004388:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800438c:	b2d9      	uxtb	r1, r3
 800438e:	2909      	cmp	r1, #9
 8004390:	d929      	bls.n	80043e6 <_strtod_l+0x1a6>
 8004392:	4622      	mov	r2, r4
 8004394:	f8d8 1000 	ldr.w	r1, [r8]
 8004398:	f002 fdbc 	bl	8006f14 <strncmp>
 800439c:	2800      	cmp	r0, #0
 800439e:	d031      	beq.n	8004404 <_strtod_l+0x1c4>
 80043a0:	2000      	movs	r0, #0
 80043a2:	463b      	mov	r3, r7
 80043a4:	4602      	mov	r2, r0
 80043a6:	9c04      	ldr	r4, [sp, #16]
 80043a8:	9005      	str	r0, [sp, #20]
 80043aa:	2b65      	cmp	r3, #101	; 0x65
 80043ac:	d001      	beq.n	80043b2 <_strtod_l+0x172>
 80043ae:	2b45      	cmp	r3, #69	; 0x45
 80043b0:	d114      	bne.n	80043dc <_strtod_l+0x19c>
 80043b2:	b924      	cbnz	r4, 80043be <_strtod_l+0x17e>
 80043b4:	b910      	cbnz	r0, 80043bc <_strtod_l+0x17c>
 80043b6:	9b07      	ldr	r3, [sp, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d09e      	beq.n	80042fa <_strtod_l+0xba>
 80043bc:	2400      	movs	r4, #0
 80043be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80043c0:	1c73      	adds	r3, r6, #1
 80043c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80043c4:	7873      	ldrb	r3, [r6, #1]
 80043c6:	2b2b      	cmp	r3, #43	; 0x2b
 80043c8:	d078      	beq.n	80044bc <_strtod_l+0x27c>
 80043ca:	2b2d      	cmp	r3, #45	; 0x2d
 80043cc:	d070      	beq.n	80044b0 <_strtod_l+0x270>
 80043ce:	f04f 0c00 	mov.w	ip, #0
 80043d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80043d6:	2f09      	cmp	r7, #9
 80043d8:	d97c      	bls.n	80044d4 <_strtod_l+0x294>
 80043da:	961b      	str	r6, [sp, #108]	; 0x6c
 80043dc:	f04f 0e00 	mov.w	lr, #0
 80043e0:	e09a      	b.n	8004518 <_strtod_l+0x2d8>
 80043e2:	2300      	movs	r3, #0
 80043e4:	e7c7      	b.n	8004376 <_strtod_l+0x136>
 80043e6:	9904      	ldr	r1, [sp, #16]
 80043e8:	3001      	adds	r0, #1
 80043ea:	2908      	cmp	r1, #8
 80043ec:	bfd7      	itett	le
 80043ee:	9906      	ldrle	r1, [sp, #24]
 80043f0:	fb02 3505 	mlagt	r5, r2, r5, r3
 80043f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80043f8:	9306      	strle	r3, [sp, #24]
 80043fa:	9b04      	ldr	r3, [sp, #16]
 80043fc:	901b      	str	r0, [sp, #108]	; 0x6c
 80043fe:	3301      	adds	r3, #1
 8004400:	9304      	str	r3, [sp, #16]
 8004402:	e7bf      	b.n	8004384 <_strtod_l+0x144>
 8004404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004406:	191a      	adds	r2, r3, r4
 8004408:	921b      	str	r2, [sp, #108]	; 0x6c
 800440a:	9a04      	ldr	r2, [sp, #16]
 800440c:	5d1b      	ldrb	r3, [r3, r4]
 800440e:	2a00      	cmp	r2, #0
 8004410:	d037      	beq.n	8004482 <_strtod_l+0x242>
 8004412:	4602      	mov	r2, r0
 8004414:	9c04      	ldr	r4, [sp, #16]
 8004416:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800441a:	2909      	cmp	r1, #9
 800441c:	d913      	bls.n	8004446 <_strtod_l+0x206>
 800441e:	2101      	movs	r1, #1
 8004420:	9105      	str	r1, [sp, #20]
 8004422:	e7c2      	b.n	80043aa <_strtod_l+0x16a>
 8004424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004426:	3001      	adds	r0, #1
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	921b      	str	r2, [sp, #108]	; 0x6c
 800442c:	785b      	ldrb	r3, [r3, #1]
 800442e:	2b30      	cmp	r3, #48	; 0x30
 8004430:	d0f8      	beq.n	8004424 <_strtod_l+0x1e4>
 8004432:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004436:	2a08      	cmp	r2, #8
 8004438:	f200 84f0 	bhi.w	8004e1c <_strtod_l+0xbdc>
 800443c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800443e:	9208      	str	r2, [sp, #32]
 8004440:	4602      	mov	r2, r0
 8004442:	2000      	movs	r0, #0
 8004444:	4604      	mov	r4, r0
 8004446:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800444a:	f100 0101 	add.w	r1, r0, #1
 800444e:	d012      	beq.n	8004476 <_strtod_l+0x236>
 8004450:	440a      	add	r2, r1
 8004452:	270a      	movs	r7, #10
 8004454:	4621      	mov	r1, r4
 8004456:	eb00 0c04 	add.w	ip, r0, r4
 800445a:	458c      	cmp	ip, r1
 800445c:	d113      	bne.n	8004486 <_strtod_l+0x246>
 800445e:	1821      	adds	r1, r4, r0
 8004460:	2908      	cmp	r1, #8
 8004462:	f104 0401 	add.w	r4, r4, #1
 8004466:	4404      	add	r4, r0
 8004468:	dc19      	bgt.n	800449e <_strtod_l+0x25e>
 800446a:	210a      	movs	r1, #10
 800446c:	9b06      	ldr	r3, [sp, #24]
 800446e:	fb01 e303 	mla	r3, r1, r3, lr
 8004472:	9306      	str	r3, [sp, #24]
 8004474:	2100      	movs	r1, #0
 8004476:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004478:	1c58      	adds	r0, r3, #1
 800447a:	901b      	str	r0, [sp, #108]	; 0x6c
 800447c:	785b      	ldrb	r3, [r3, #1]
 800447e:	4608      	mov	r0, r1
 8004480:	e7c9      	b.n	8004416 <_strtod_l+0x1d6>
 8004482:	9804      	ldr	r0, [sp, #16]
 8004484:	e7d3      	b.n	800442e <_strtod_l+0x1ee>
 8004486:	2908      	cmp	r1, #8
 8004488:	f101 0101 	add.w	r1, r1, #1
 800448c:	dc03      	bgt.n	8004496 <_strtod_l+0x256>
 800448e:	9b06      	ldr	r3, [sp, #24]
 8004490:	437b      	muls	r3, r7
 8004492:	9306      	str	r3, [sp, #24]
 8004494:	e7e1      	b.n	800445a <_strtod_l+0x21a>
 8004496:	2910      	cmp	r1, #16
 8004498:	bfd8      	it	le
 800449a:	437d      	mulle	r5, r7
 800449c:	e7dd      	b.n	800445a <_strtod_l+0x21a>
 800449e:	2c10      	cmp	r4, #16
 80044a0:	bfdc      	itt	le
 80044a2:	210a      	movle	r1, #10
 80044a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80044a8:	e7e4      	b.n	8004474 <_strtod_l+0x234>
 80044aa:	2301      	movs	r3, #1
 80044ac:	9305      	str	r3, [sp, #20]
 80044ae:	e781      	b.n	80043b4 <_strtod_l+0x174>
 80044b0:	f04f 0c01 	mov.w	ip, #1
 80044b4:	1cb3      	adds	r3, r6, #2
 80044b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80044b8:	78b3      	ldrb	r3, [r6, #2]
 80044ba:	e78a      	b.n	80043d2 <_strtod_l+0x192>
 80044bc:	f04f 0c00 	mov.w	ip, #0
 80044c0:	e7f8      	b.n	80044b4 <_strtod_l+0x274>
 80044c2:	bf00      	nop
 80044c4:	080070b8 	.word	0x080070b8
 80044c8:	7ff00000 	.word	0x7ff00000
 80044cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044ce:	1c5f      	adds	r7, r3, #1
 80044d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	2b30      	cmp	r3, #48	; 0x30
 80044d6:	d0f9      	beq.n	80044cc <_strtod_l+0x28c>
 80044d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80044dc:	2f08      	cmp	r7, #8
 80044de:	f63f af7d 	bhi.w	80043dc <_strtod_l+0x19c>
 80044e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80044e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044e8:	9309      	str	r3, [sp, #36]	; 0x24
 80044ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044ec:	1c5f      	adds	r7, r3, #1
 80044ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80044f6:	f1b8 0f09 	cmp.w	r8, #9
 80044fa:	d937      	bls.n	800456c <_strtod_l+0x32c>
 80044fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044fe:	1a7f      	subs	r7, r7, r1
 8004500:	2f08      	cmp	r7, #8
 8004502:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004506:	dc37      	bgt.n	8004578 <_strtod_l+0x338>
 8004508:	45be      	cmp	lr, r7
 800450a:	bfa8      	it	ge
 800450c:	46be      	movge	lr, r7
 800450e:	f1bc 0f00 	cmp.w	ip, #0
 8004512:	d001      	beq.n	8004518 <_strtod_l+0x2d8>
 8004514:	f1ce 0e00 	rsb	lr, lr, #0
 8004518:	2c00      	cmp	r4, #0
 800451a:	d151      	bne.n	80045c0 <_strtod_l+0x380>
 800451c:	2800      	cmp	r0, #0
 800451e:	f47f aece 	bne.w	80042be <_strtod_l+0x7e>
 8004522:	9a07      	ldr	r2, [sp, #28]
 8004524:	2a00      	cmp	r2, #0
 8004526:	f47f aeca 	bne.w	80042be <_strtod_l+0x7e>
 800452a:	9a05      	ldr	r2, [sp, #20]
 800452c:	2a00      	cmp	r2, #0
 800452e:	f47f aee4 	bne.w	80042fa <_strtod_l+0xba>
 8004532:	2b4e      	cmp	r3, #78	; 0x4e
 8004534:	d027      	beq.n	8004586 <_strtod_l+0x346>
 8004536:	dc21      	bgt.n	800457c <_strtod_l+0x33c>
 8004538:	2b49      	cmp	r3, #73	; 0x49
 800453a:	f47f aede 	bne.w	80042fa <_strtod_l+0xba>
 800453e:	49a4      	ldr	r1, [pc, #656]	; (80047d0 <_strtod_l+0x590>)
 8004540:	a81b      	add	r0, sp, #108	; 0x6c
 8004542:	f001 fdf9 	bl	8006138 <__match>
 8004546:	2800      	cmp	r0, #0
 8004548:	f43f aed7 	beq.w	80042fa <_strtod_l+0xba>
 800454c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800454e:	49a1      	ldr	r1, [pc, #644]	; (80047d4 <_strtod_l+0x594>)
 8004550:	3b01      	subs	r3, #1
 8004552:	a81b      	add	r0, sp, #108	; 0x6c
 8004554:	931b      	str	r3, [sp, #108]	; 0x6c
 8004556:	f001 fdef 	bl	8006138 <__match>
 800455a:	b910      	cbnz	r0, 8004562 <_strtod_l+0x322>
 800455c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800455e:	3301      	adds	r3, #1
 8004560:	931b      	str	r3, [sp, #108]	; 0x6c
 8004562:	f8df a284 	ldr.w	sl, [pc, #644]	; 80047e8 <_strtod_l+0x5a8>
 8004566:	f04f 0900 	mov.w	r9, #0
 800456a:	e6a8      	b.n	80042be <_strtod_l+0x7e>
 800456c:	210a      	movs	r1, #10
 800456e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004572:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004576:	e7b8      	b.n	80044ea <_strtod_l+0x2aa>
 8004578:	46be      	mov	lr, r7
 800457a:	e7c8      	b.n	800450e <_strtod_l+0x2ce>
 800457c:	2b69      	cmp	r3, #105	; 0x69
 800457e:	d0de      	beq.n	800453e <_strtod_l+0x2fe>
 8004580:	2b6e      	cmp	r3, #110	; 0x6e
 8004582:	f47f aeba 	bne.w	80042fa <_strtod_l+0xba>
 8004586:	4994      	ldr	r1, [pc, #592]	; (80047d8 <_strtod_l+0x598>)
 8004588:	a81b      	add	r0, sp, #108	; 0x6c
 800458a:	f001 fdd5 	bl	8006138 <__match>
 800458e:	2800      	cmp	r0, #0
 8004590:	f43f aeb3 	beq.w	80042fa <_strtod_l+0xba>
 8004594:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b28      	cmp	r3, #40	; 0x28
 800459a:	d10e      	bne.n	80045ba <_strtod_l+0x37a>
 800459c:	aa1e      	add	r2, sp, #120	; 0x78
 800459e:	498f      	ldr	r1, [pc, #572]	; (80047dc <_strtod_l+0x59c>)
 80045a0:	a81b      	add	r0, sp, #108	; 0x6c
 80045a2:	f001 fddd 	bl	8006160 <__hexnan>
 80045a6:	2805      	cmp	r0, #5
 80045a8:	d107      	bne.n	80045ba <_strtod_l+0x37a>
 80045aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80045ac:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80045b0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80045b4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80045b8:	e681      	b.n	80042be <_strtod_l+0x7e>
 80045ba:	f8df a234 	ldr.w	sl, [pc, #564]	; 80047f0 <_strtod_l+0x5b0>
 80045be:	e7d2      	b.n	8004566 <_strtod_l+0x326>
 80045c0:	ebae 0302 	sub.w	r3, lr, r2
 80045c4:	9307      	str	r3, [sp, #28]
 80045c6:	9b04      	ldr	r3, [sp, #16]
 80045c8:	9806      	ldr	r0, [sp, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bf08      	it	eq
 80045ce:	4623      	moveq	r3, r4
 80045d0:	2c10      	cmp	r4, #16
 80045d2:	9304      	str	r3, [sp, #16]
 80045d4:	46a0      	mov	r8, r4
 80045d6:	bfa8      	it	ge
 80045d8:	f04f 0810 	movge.w	r8, #16
 80045dc:	f7fb ff6e 	bl	80004bc <__aeabi_ui2d>
 80045e0:	2c09      	cmp	r4, #9
 80045e2:	4681      	mov	r9, r0
 80045e4:	468a      	mov	sl, r1
 80045e6:	dc13      	bgt.n	8004610 <_strtod_l+0x3d0>
 80045e8:	9b07      	ldr	r3, [sp, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f43f ae67 	beq.w	80042be <_strtod_l+0x7e>
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	dd7e      	ble.n	80046f2 <_strtod_l+0x4b2>
 80045f4:	2b16      	cmp	r3, #22
 80045f6:	dc65      	bgt.n	80046c4 <_strtod_l+0x484>
 80045f8:	4a79      	ldr	r2, [pc, #484]	; (80047e0 <_strtod_l+0x5a0>)
 80045fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80045fe:	464a      	mov	r2, r9
 8004600:	e9de 0100 	ldrd	r0, r1, [lr]
 8004604:	4653      	mov	r3, sl
 8004606:	f7fb ffd3 	bl	80005b0 <__aeabi_dmul>
 800460a:	4681      	mov	r9, r0
 800460c:	468a      	mov	sl, r1
 800460e:	e656      	b.n	80042be <_strtod_l+0x7e>
 8004610:	4b73      	ldr	r3, [pc, #460]	; (80047e0 <_strtod_l+0x5a0>)
 8004612:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004616:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800461a:	f7fb ffc9 	bl	80005b0 <__aeabi_dmul>
 800461e:	4606      	mov	r6, r0
 8004620:	4628      	mov	r0, r5
 8004622:	460f      	mov	r7, r1
 8004624:	f7fb ff4a 	bl	80004bc <__aeabi_ui2d>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4630      	mov	r0, r6
 800462e:	4639      	mov	r1, r7
 8004630:	f7fb fe08 	bl	8000244 <__adddf3>
 8004634:	2c0f      	cmp	r4, #15
 8004636:	4681      	mov	r9, r0
 8004638:	468a      	mov	sl, r1
 800463a:	ddd5      	ble.n	80045e8 <_strtod_l+0x3a8>
 800463c:	9b07      	ldr	r3, [sp, #28]
 800463e:	eba4 0808 	sub.w	r8, r4, r8
 8004642:	4498      	add	r8, r3
 8004644:	f1b8 0f00 	cmp.w	r8, #0
 8004648:	f340 809a 	ble.w	8004780 <_strtod_l+0x540>
 800464c:	f018 030f 	ands.w	r3, r8, #15
 8004650:	d00a      	beq.n	8004668 <_strtod_l+0x428>
 8004652:	4963      	ldr	r1, [pc, #396]	; (80047e0 <_strtod_l+0x5a0>)
 8004654:	464a      	mov	r2, r9
 8004656:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800465a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800465e:	4653      	mov	r3, sl
 8004660:	f7fb ffa6 	bl	80005b0 <__aeabi_dmul>
 8004664:	4681      	mov	r9, r0
 8004666:	468a      	mov	sl, r1
 8004668:	f038 080f 	bics.w	r8, r8, #15
 800466c:	d077      	beq.n	800475e <_strtod_l+0x51e>
 800466e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004672:	dd4b      	ble.n	800470c <_strtod_l+0x4cc>
 8004674:	f04f 0800 	mov.w	r8, #0
 8004678:	f8cd 8010 	str.w	r8, [sp, #16]
 800467c:	f8cd 8020 	str.w	r8, [sp, #32]
 8004680:	f8cd 8018 	str.w	r8, [sp, #24]
 8004684:	2322      	movs	r3, #34	; 0x22
 8004686:	f04f 0900 	mov.w	r9, #0
 800468a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80047e8 <_strtod_l+0x5a8>
 800468e:	f8cb 3000 	str.w	r3, [fp]
 8004692:	9b08      	ldr	r3, [sp, #32]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f43f ae12 	beq.w	80042be <_strtod_l+0x7e>
 800469a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800469c:	4658      	mov	r0, fp
 800469e:	f001 fe5f 	bl	8006360 <_Bfree>
 80046a2:	9906      	ldr	r1, [sp, #24]
 80046a4:	4658      	mov	r0, fp
 80046a6:	f001 fe5b 	bl	8006360 <_Bfree>
 80046aa:	9904      	ldr	r1, [sp, #16]
 80046ac:	4658      	mov	r0, fp
 80046ae:	f001 fe57 	bl	8006360 <_Bfree>
 80046b2:	9908      	ldr	r1, [sp, #32]
 80046b4:	4658      	mov	r0, fp
 80046b6:	f001 fe53 	bl	8006360 <_Bfree>
 80046ba:	4641      	mov	r1, r8
 80046bc:	4658      	mov	r0, fp
 80046be:	f001 fe4f 	bl	8006360 <_Bfree>
 80046c2:	e5fc      	b.n	80042be <_strtod_l+0x7e>
 80046c4:	9a07      	ldr	r2, [sp, #28]
 80046c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80046ca:	4293      	cmp	r3, r2
 80046cc:	dbb6      	blt.n	800463c <_strtod_l+0x3fc>
 80046ce:	4d44      	ldr	r5, [pc, #272]	; (80047e0 <_strtod_l+0x5a0>)
 80046d0:	f1c4 040f 	rsb	r4, r4, #15
 80046d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80046d8:	464a      	mov	r2, r9
 80046da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046de:	4653      	mov	r3, sl
 80046e0:	f7fb ff66 	bl	80005b0 <__aeabi_dmul>
 80046e4:	9b07      	ldr	r3, [sp, #28]
 80046e6:	1b1c      	subs	r4, r3, r4
 80046e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80046ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046f0:	e789      	b.n	8004606 <_strtod_l+0x3c6>
 80046f2:	f113 0f16 	cmn.w	r3, #22
 80046f6:	dba1      	blt.n	800463c <_strtod_l+0x3fc>
 80046f8:	4a39      	ldr	r2, [pc, #228]	; (80047e0 <_strtod_l+0x5a0>)
 80046fa:	4648      	mov	r0, r9
 80046fc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004700:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004704:	4651      	mov	r1, sl
 8004706:	f7fc f87d 	bl	8000804 <__aeabi_ddiv>
 800470a:	e77e      	b.n	800460a <_strtod_l+0x3ca>
 800470c:	2300      	movs	r3, #0
 800470e:	4648      	mov	r0, r9
 8004710:	4651      	mov	r1, sl
 8004712:	461d      	mov	r5, r3
 8004714:	4e33      	ldr	r6, [pc, #204]	; (80047e4 <_strtod_l+0x5a4>)
 8004716:	ea4f 1828 	mov.w	r8, r8, asr #4
 800471a:	f1b8 0f01 	cmp.w	r8, #1
 800471e:	dc21      	bgt.n	8004764 <_strtod_l+0x524>
 8004720:	b10b      	cbz	r3, 8004726 <_strtod_l+0x4e6>
 8004722:	4681      	mov	r9, r0
 8004724:	468a      	mov	sl, r1
 8004726:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <_strtod_l+0x5a4>)
 8004728:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800472c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004730:	464a      	mov	r2, r9
 8004732:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004736:	4653      	mov	r3, sl
 8004738:	f7fb ff3a 	bl	80005b0 <__aeabi_dmul>
 800473c:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <_strtod_l+0x5a8>)
 800473e:	460a      	mov	r2, r1
 8004740:	400b      	ands	r3, r1
 8004742:	492a      	ldr	r1, [pc, #168]	; (80047ec <_strtod_l+0x5ac>)
 8004744:	4681      	mov	r9, r0
 8004746:	428b      	cmp	r3, r1
 8004748:	d894      	bhi.n	8004674 <_strtod_l+0x434>
 800474a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800474e:	428b      	cmp	r3, r1
 8004750:	bf86      	itte	hi
 8004752:	f04f 39ff 	movhi.w	r9, #4294967295
 8004756:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80047f4 <_strtod_l+0x5b4>
 800475a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800475e:	2300      	movs	r3, #0
 8004760:	9305      	str	r3, [sp, #20]
 8004762:	e07b      	b.n	800485c <_strtod_l+0x61c>
 8004764:	f018 0f01 	tst.w	r8, #1
 8004768:	d006      	beq.n	8004778 <_strtod_l+0x538>
 800476a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f7fb ff1d 	bl	80005b0 <__aeabi_dmul>
 8004776:	2301      	movs	r3, #1
 8004778:	3501      	adds	r5, #1
 800477a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800477e:	e7cc      	b.n	800471a <_strtod_l+0x4da>
 8004780:	d0ed      	beq.n	800475e <_strtod_l+0x51e>
 8004782:	f1c8 0800 	rsb	r8, r8, #0
 8004786:	f018 020f 	ands.w	r2, r8, #15
 800478a:	d00a      	beq.n	80047a2 <_strtod_l+0x562>
 800478c:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <_strtod_l+0x5a0>)
 800478e:	4648      	mov	r0, r9
 8004790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004794:	4651      	mov	r1, sl
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f7fc f833 	bl	8000804 <__aeabi_ddiv>
 800479e:	4681      	mov	r9, r0
 80047a0:	468a      	mov	sl, r1
 80047a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80047a6:	d0da      	beq.n	800475e <_strtod_l+0x51e>
 80047a8:	f1b8 0f1f 	cmp.w	r8, #31
 80047ac:	dd24      	ble.n	80047f8 <_strtod_l+0x5b8>
 80047ae:	f04f 0800 	mov.w	r8, #0
 80047b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80047b6:	f8cd 8020 	str.w	r8, [sp, #32]
 80047ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80047be:	2322      	movs	r3, #34	; 0x22
 80047c0:	f04f 0900 	mov.w	r9, #0
 80047c4:	f04f 0a00 	mov.w	sl, #0
 80047c8:	f8cb 3000 	str.w	r3, [fp]
 80047cc:	e761      	b.n	8004692 <_strtod_l+0x452>
 80047ce:	bf00      	nop
 80047d0:	08007081 	.word	0x08007081
 80047d4:	0800710b 	.word	0x0800710b
 80047d8:	08007089 	.word	0x08007089
 80047dc:	080070cc 	.word	0x080070cc
 80047e0:	08007148 	.word	0x08007148
 80047e4:	08007120 	.word	0x08007120
 80047e8:	7ff00000 	.word	0x7ff00000
 80047ec:	7ca00000 	.word	0x7ca00000
 80047f0:	fff80000 	.word	0xfff80000
 80047f4:	7fefffff 	.word	0x7fefffff
 80047f8:	f018 0310 	ands.w	r3, r8, #16
 80047fc:	bf18      	it	ne
 80047fe:	236a      	movne	r3, #106	; 0x6a
 8004800:	4648      	mov	r0, r9
 8004802:	9305      	str	r3, [sp, #20]
 8004804:	4651      	mov	r1, sl
 8004806:	2300      	movs	r3, #0
 8004808:	4da1      	ldr	r5, [pc, #644]	; (8004a90 <_strtod_l+0x850>)
 800480a:	f1b8 0f00 	cmp.w	r8, #0
 800480e:	f300 8113 	bgt.w	8004a38 <_strtod_l+0x7f8>
 8004812:	b10b      	cbz	r3, 8004818 <_strtod_l+0x5d8>
 8004814:	4681      	mov	r9, r0
 8004816:	468a      	mov	sl, r1
 8004818:	9b05      	ldr	r3, [sp, #20]
 800481a:	b1bb      	cbz	r3, 800484c <_strtod_l+0x60c>
 800481c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004820:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004824:	2b00      	cmp	r3, #0
 8004826:	4651      	mov	r1, sl
 8004828:	dd10      	ble.n	800484c <_strtod_l+0x60c>
 800482a:	2b1f      	cmp	r3, #31
 800482c:	f340 8110 	ble.w	8004a50 <_strtod_l+0x810>
 8004830:	2b34      	cmp	r3, #52	; 0x34
 8004832:	bfd8      	it	le
 8004834:	f04f 32ff 	movle.w	r2, #4294967295
 8004838:	f04f 0900 	mov.w	r9, #0
 800483c:	bfcf      	iteee	gt
 800483e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004842:	3b20      	suble	r3, #32
 8004844:	fa02 f303 	lslle.w	r3, r2, r3
 8004848:	ea03 0a01 	andle.w	sl, r3, r1
 800484c:	2200      	movs	r2, #0
 800484e:	2300      	movs	r3, #0
 8004850:	4648      	mov	r0, r9
 8004852:	4651      	mov	r1, sl
 8004854:	f7fc f914 	bl	8000a80 <__aeabi_dcmpeq>
 8004858:	2800      	cmp	r0, #0
 800485a:	d1a8      	bne.n	80047ae <_strtod_l+0x56e>
 800485c:	9b06      	ldr	r3, [sp, #24]
 800485e:	9a04      	ldr	r2, [sp, #16]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	9908      	ldr	r1, [sp, #32]
 8004864:	4623      	mov	r3, r4
 8004866:	4658      	mov	r0, fp
 8004868:	f001 fdcc 	bl	8006404 <__s2b>
 800486c:	9008      	str	r0, [sp, #32]
 800486e:	2800      	cmp	r0, #0
 8004870:	f43f af00 	beq.w	8004674 <_strtod_l+0x434>
 8004874:	9a07      	ldr	r2, [sp, #28]
 8004876:	9b07      	ldr	r3, [sp, #28]
 8004878:	2a00      	cmp	r2, #0
 800487a:	f1c3 0300 	rsb	r3, r3, #0
 800487e:	bfa8      	it	ge
 8004880:	2300      	movge	r3, #0
 8004882:	f04f 0800 	mov.w	r8, #0
 8004886:	930e      	str	r3, [sp, #56]	; 0x38
 8004888:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800488c:	9316      	str	r3, [sp, #88]	; 0x58
 800488e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004892:	9b08      	ldr	r3, [sp, #32]
 8004894:	4658      	mov	r0, fp
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	f001 fd2e 	bl	80062f8 <_Balloc>
 800489c:	9006      	str	r0, [sp, #24]
 800489e:	2800      	cmp	r0, #0
 80048a0:	f43f aef0 	beq.w	8004684 <_strtod_l+0x444>
 80048a4:	9b08      	ldr	r3, [sp, #32]
 80048a6:	300c      	adds	r0, #12
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	f103 010c 	add.w	r1, r3, #12
 80048ae:	3202      	adds	r2, #2
 80048b0:	0092      	lsls	r2, r2, #2
 80048b2:	f7fe fe2f 	bl	8003514 <memcpy>
 80048b6:	ab1e      	add	r3, sp, #120	; 0x78
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	ab1d      	add	r3, sp, #116	; 0x74
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	464a      	mov	r2, r9
 80048c0:	4653      	mov	r3, sl
 80048c2:	4658      	mov	r0, fp
 80048c4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80048c8:	f002 f856 	bl	8006978 <__d2b>
 80048cc:	901c      	str	r0, [sp, #112]	; 0x70
 80048ce:	2800      	cmp	r0, #0
 80048d0:	f43f aed8 	beq.w	8004684 <_strtod_l+0x444>
 80048d4:	2101      	movs	r1, #1
 80048d6:	4658      	mov	r0, fp
 80048d8:	f001 fe20 	bl	800651c <__i2b>
 80048dc:	9004      	str	r0, [sp, #16]
 80048de:	4603      	mov	r3, r0
 80048e0:	2800      	cmp	r0, #0
 80048e2:	f43f aecf 	beq.w	8004684 <_strtod_l+0x444>
 80048e6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80048e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80048ea:	2d00      	cmp	r5, #0
 80048ec:	bfab      	itete	ge
 80048ee:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80048f0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80048f2:	18ee      	addge	r6, r5, r3
 80048f4:	1b5c      	sublt	r4, r3, r5
 80048f6:	9b05      	ldr	r3, [sp, #20]
 80048f8:	bfa8      	it	ge
 80048fa:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80048fc:	eba5 0503 	sub.w	r5, r5, r3
 8004900:	4415      	add	r5, r2
 8004902:	4b64      	ldr	r3, [pc, #400]	; (8004a94 <_strtod_l+0x854>)
 8004904:	f105 35ff 	add.w	r5, r5, #4294967295
 8004908:	bfb8      	it	lt
 800490a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800490c:	429d      	cmp	r5, r3
 800490e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004912:	f280 80af 	bge.w	8004a74 <_strtod_l+0x834>
 8004916:	1b5b      	subs	r3, r3, r5
 8004918:	2b1f      	cmp	r3, #31
 800491a:	eba2 0203 	sub.w	r2, r2, r3
 800491e:	f04f 0701 	mov.w	r7, #1
 8004922:	f300 809c 	bgt.w	8004a5e <_strtod_l+0x81e>
 8004926:	2500      	movs	r5, #0
 8004928:	fa07 f303 	lsl.w	r3, r7, r3
 800492c:	930f      	str	r3, [sp, #60]	; 0x3c
 800492e:	18b7      	adds	r7, r6, r2
 8004930:	9b05      	ldr	r3, [sp, #20]
 8004932:	42be      	cmp	r6, r7
 8004934:	4414      	add	r4, r2
 8004936:	441c      	add	r4, r3
 8004938:	4633      	mov	r3, r6
 800493a:	bfa8      	it	ge
 800493c:	463b      	movge	r3, r7
 800493e:	42a3      	cmp	r3, r4
 8004940:	bfa8      	it	ge
 8004942:	4623      	movge	r3, r4
 8004944:	2b00      	cmp	r3, #0
 8004946:	bfc2      	ittt	gt
 8004948:	1aff      	subgt	r7, r7, r3
 800494a:	1ae4      	subgt	r4, r4, r3
 800494c:	1af6      	subgt	r6, r6, r3
 800494e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004950:	b1bb      	cbz	r3, 8004982 <_strtod_l+0x742>
 8004952:	461a      	mov	r2, r3
 8004954:	9904      	ldr	r1, [sp, #16]
 8004956:	4658      	mov	r0, fp
 8004958:	f001 fe7e 	bl	8006658 <__pow5mult>
 800495c:	9004      	str	r0, [sp, #16]
 800495e:	2800      	cmp	r0, #0
 8004960:	f43f ae90 	beq.w	8004684 <_strtod_l+0x444>
 8004964:	4601      	mov	r1, r0
 8004966:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004968:	4658      	mov	r0, fp
 800496a:	f001 fde0 	bl	800652e <__multiply>
 800496e:	9009      	str	r0, [sp, #36]	; 0x24
 8004970:	2800      	cmp	r0, #0
 8004972:	f43f ae87 	beq.w	8004684 <_strtod_l+0x444>
 8004976:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004978:	4658      	mov	r0, fp
 800497a:	f001 fcf1 	bl	8006360 <_Bfree>
 800497e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004980:	931c      	str	r3, [sp, #112]	; 0x70
 8004982:	2f00      	cmp	r7, #0
 8004984:	dc7a      	bgt.n	8004a7c <_strtod_l+0x83c>
 8004986:	9b07      	ldr	r3, [sp, #28]
 8004988:	2b00      	cmp	r3, #0
 800498a:	dd08      	ble.n	800499e <_strtod_l+0x75e>
 800498c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800498e:	9906      	ldr	r1, [sp, #24]
 8004990:	4658      	mov	r0, fp
 8004992:	f001 fe61 	bl	8006658 <__pow5mult>
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	2800      	cmp	r0, #0
 800499a:	f43f ae73 	beq.w	8004684 <_strtod_l+0x444>
 800499e:	2c00      	cmp	r4, #0
 80049a0:	dd08      	ble.n	80049b4 <_strtod_l+0x774>
 80049a2:	4622      	mov	r2, r4
 80049a4:	9906      	ldr	r1, [sp, #24]
 80049a6:	4658      	mov	r0, fp
 80049a8:	f001 fea4 	bl	80066f4 <__lshift>
 80049ac:	9006      	str	r0, [sp, #24]
 80049ae:	2800      	cmp	r0, #0
 80049b0:	f43f ae68 	beq.w	8004684 <_strtod_l+0x444>
 80049b4:	2e00      	cmp	r6, #0
 80049b6:	dd08      	ble.n	80049ca <_strtod_l+0x78a>
 80049b8:	4632      	mov	r2, r6
 80049ba:	9904      	ldr	r1, [sp, #16]
 80049bc:	4658      	mov	r0, fp
 80049be:	f001 fe99 	bl	80066f4 <__lshift>
 80049c2:	9004      	str	r0, [sp, #16]
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f43f ae5d 	beq.w	8004684 <_strtod_l+0x444>
 80049ca:	9a06      	ldr	r2, [sp, #24]
 80049cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80049ce:	4658      	mov	r0, fp
 80049d0:	f001 fefe 	bl	80067d0 <__mdiff>
 80049d4:	4680      	mov	r8, r0
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f43f ae54 	beq.w	8004684 <_strtod_l+0x444>
 80049dc:	2400      	movs	r4, #0
 80049de:	68c3      	ldr	r3, [r0, #12]
 80049e0:	9904      	ldr	r1, [sp, #16]
 80049e2:	60c4      	str	r4, [r0, #12]
 80049e4:	930c      	str	r3, [sp, #48]	; 0x30
 80049e6:	f001 fed9 	bl	800679c <__mcmp>
 80049ea:	42a0      	cmp	r0, r4
 80049ec:	da54      	bge.n	8004a98 <_strtod_l+0x858>
 80049ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049f0:	b9f3      	cbnz	r3, 8004a30 <_strtod_l+0x7f0>
 80049f2:	f1b9 0f00 	cmp.w	r9, #0
 80049f6:	d11b      	bne.n	8004a30 <_strtod_l+0x7f0>
 80049f8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80049fc:	b9c3      	cbnz	r3, 8004a30 <_strtod_l+0x7f0>
 80049fe:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a02:	0d1b      	lsrs	r3, r3, #20
 8004a04:	051b      	lsls	r3, r3, #20
 8004a06:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004a0a:	d911      	bls.n	8004a30 <_strtod_l+0x7f0>
 8004a0c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004a10:	b91b      	cbnz	r3, 8004a1a <_strtod_l+0x7da>
 8004a12:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	dd0a      	ble.n	8004a30 <_strtod_l+0x7f0>
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4658      	mov	r0, fp
 8004a20:	f001 fe68 	bl	80066f4 <__lshift>
 8004a24:	9904      	ldr	r1, [sp, #16]
 8004a26:	4680      	mov	r8, r0
 8004a28:	f001 feb8 	bl	800679c <__mcmp>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	dc68      	bgt.n	8004b02 <_strtod_l+0x8c2>
 8004a30:	9b05      	ldr	r3, [sp, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d172      	bne.n	8004b1c <_strtod_l+0x8dc>
 8004a36:	e630      	b.n	800469a <_strtod_l+0x45a>
 8004a38:	f018 0f01 	tst.w	r8, #1
 8004a3c:	d004      	beq.n	8004a48 <_strtod_l+0x808>
 8004a3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a42:	f7fb fdb5 	bl	80005b0 <__aeabi_dmul>
 8004a46:	2301      	movs	r3, #1
 8004a48:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004a4c:	3508      	adds	r5, #8
 8004a4e:	e6dc      	b.n	800480a <_strtod_l+0x5ca>
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	ea03 0909 	and.w	r9, r3, r9
 8004a5c:	e6f6      	b.n	800484c <_strtod_l+0x60c>
 8004a5e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004a62:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004a66:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004a6a:	35e2      	adds	r5, #226	; 0xe2
 8004a6c:	fa07 f505 	lsl.w	r5, r7, r5
 8004a70:	970f      	str	r7, [sp, #60]	; 0x3c
 8004a72:	e75c      	b.n	800492e <_strtod_l+0x6ee>
 8004a74:	2301      	movs	r3, #1
 8004a76:	2500      	movs	r5, #0
 8004a78:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a7a:	e758      	b.n	800492e <_strtod_l+0x6ee>
 8004a7c:	463a      	mov	r2, r7
 8004a7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a80:	4658      	mov	r0, fp
 8004a82:	f001 fe37 	bl	80066f4 <__lshift>
 8004a86:	901c      	str	r0, [sp, #112]	; 0x70
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	f47f af7c 	bne.w	8004986 <_strtod_l+0x746>
 8004a8e:	e5f9      	b.n	8004684 <_strtod_l+0x444>
 8004a90:	080070e0 	.word	0x080070e0
 8004a94:	fffffc02 	.word	0xfffffc02
 8004a98:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004a9c:	f040 8089 	bne.w	8004bb2 <_strtod_l+0x972>
 8004aa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004aa2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004aa6:	b342      	cbz	r2, 8004afa <_strtod_l+0x8ba>
 8004aa8:	4aaf      	ldr	r2, [pc, #700]	; (8004d68 <_strtod_l+0xb28>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d156      	bne.n	8004b5c <_strtod_l+0x91c>
 8004aae:	9b05      	ldr	r3, [sp, #20]
 8004ab0:	4648      	mov	r0, r9
 8004ab2:	b1eb      	cbz	r3, 8004af0 <_strtod_l+0x8b0>
 8004ab4:	4653      	mov	r3, sl
 8004ab6:	4aad      	ldr	r2, [pc, #692]	; (8004d6c <_strtod_l+0xb2c>)
 8004ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8004abc:	401a      	ands	r2, r3
 8004abe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004ac2:	d818      	bhi.n	8004af6 <_strtod_l+0x8b6>
 8004ac4:	0d12      	lsrs	r2, r2, #20
 8004ac6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004aca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ace:	4298      	cmp	r0, r3
 8004ad0:	d144      	bne.n	8004b5c <_strtod_l+0x91c>
 8004ad2:	4ba7      	ldr	r3, [pc, #668]	; (8004d70 <_strtod_l+0xb30>)
 8004ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d102      	bne.n	8004ae0 <_strtod_l+0x8a0>
 8004ada:	3001      	adds	r0, #1
 8004adc:	f43f add2 	beq.w	8004684 <_strtod_l+0x444>
 8004ae0:	4ba2      	ldr	r3, [pc, #648]	; (8004d6c <_strtod_l+0xb2c>)
 8004ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ae4:	f04f 0900 	mov.w	r9, #0
 8004ae8:	401a      	ands	r2, r3
 8004aea:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8004aee:	e79f      	b.n	8004a30 <_strtod_l+0x7f0>
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
 8004af4:	e7eb      	b.n	8004ace <_strtod_l+0x88e>
 8004af6:	460b      	mov	r3, r1
 8004af8:	e7e9      	b.n	8004ace <_strtod_l+0x88e>
 8004afa:	bb7b      	cbnz	r3, 8004b5c <_strtod_l+0x91c>
 8004afc:	f1b9 0f00 	cmp.w	r9, #0
 8004b00:	d12c      	bne.n	8004b5c <_strtod_l+0x91c>
 8004b02:	9905      	ldr	r1, [sp, #20]
 8004b04:	4653      	mov	r3, sl
 8004b06:	4a99      	ldr	r2, [pc, #612]	; (8004d6c <_strtod_l+0xb2c>)
 8004b08:	b1f1      	cbz	r1, 8004b48 <_strtod_l+0x908>
 8004b0a:	ea02 010a 	and.w	r1, r2, sl
 8004b0e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004b12:	dc19      	bgt.n	8004b48 <_strtod_l+0x908>
 8004b14:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004b18:	f77f ae51 	ble.w	80047be <_strtod_l+0x57e>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4a95      	ldr	r2, [pc, #596]	; (8004d74 <_strtod_l+0xb34>)
 8004b20:	4648      	mov	r0, r9
 8004b22:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004b26:	4651      	mov	r1, sl
 8004b28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004b2c:	f7fb fd40 	bl	80005b0 <__aeabi_dmul>
 8004b30:	4681      	mov	r9, r0
 8004b32:	468a      	mov	sl, r1
 8004b34:	2900      	cmp	r1, #0
 8004b36:	f47f adb0 	bne.w	800469a <_strtod_l+0x45a>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	f47f adad 	bne.w	800469a <_strtod_l+0x45a>
 8004b40:	2322      	movs	r3, #34	; 0x22
 8004b42:	f8cb 3000 	str.w	r3, [fp]
 8004b46:	e5a8      	b.n	800469a <_strtod_l+0x45a>
 8004b48:	4013      	ands	r3, r2
 8004b4a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004b4e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8004b52:	f04f 39ff 	mov.w	r9, #4294967295
 8004b56:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8004b5a:	e769      	b.n	8004a30 <_strtod_l+0x7f0>
 8004b5c:	b19d      	cbz	r5, 8004b86 <_strtod_l+0x946>
 8004b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b60:	421d      	tst	r5, r3
 8004b62:	f43f af65 	beq.w	8004a30 <_strtod_l+0x7f0>
 8004b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b68:	9a05      	ldr	r2, [sp, #20]
 8004b6a:	4648      	mov	r0, r9
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	b173      	cbz	r3, 8004b8e <_strtod_l+0x94e>
 8004b70:	f7ff fb45 	bl	80041fe <sulp>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b7c:	f7fb fb62 	bl	8000244 <__adddf3>
 8004b80:	4681      	mov	r9, r0
 8004b82:	468a      	mov	sl, r1
 8004b84:	e754      	b.n	8004a30 <_strtod_l+0x7f0>
 8004b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b88:	ea13 0f09 	tst.w	r3, r9
 8004b8c:	e7e9      	b.n	8004b62 <_strtod_l+0x922>
 8004b8e:	f7ff fb36 	bl	80041fe <sulp>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b9a:	f7fb fb51 	bl	8000240 <__aeabi_dsub>
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4681      	mov	r9, r0
 8004ba4:	468a      	mov	sl, r1
 8004ba6:	f7fb ff6b 	bl	8000a80 <__aeabi_dcmpeq>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	f47f ae07 	bne.w	80047be <_strtod_l+0x57e>
 8004bb0:	e73e      	b.n	8004a30 <_strtod_l+0x7f0>
 8004bb2:	9904      	ldr	r1, [sp, #16]
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	f001 ff2e 	bl	8006a16 <__ratio>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	460f      	mov	r7, r1
 8004bc4:	f7fb ff70 	bl	8000aa8 <__aeabi_dcmple>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d075      	beq.n	8004cb8 <_strtod_l+0xa78>
 8004bcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d047      	beq.n	8004c62 <_strtod_l+0xa22>
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	4f68      	ldr	r7, [pc, #416]	; (8004d78 <_strtod_l+0xb38>)
 8004bd6:	4d68      	ldr	r5, [pc, #416]	; (8004d78 <_strtod_l+0xb38>)
 8004bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bde:	0d1b      	lsrs	r3, r3, #20
 8004be0:	051b      	lsls	r3, r3, #20
 8004be2:	930f      	str	r3, [sp, #60]	; 0x3c
 8004be4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004be6:	4b65      	ldr	r3, [pc, #404]	; (8004d7c <_strtod_l+0xb3c>)
 8004be8:	429a      	cmp	r2, r3
 8004bea:	f040 80cf 	bne.w	8004d8c <_strtod_l+0xb4c>
 8004bee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004bf2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf8:	4648      	mov	r0, r9
 8004bfa:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8004bfe:	4651      	mov	r1, sl
 8004c00:	f001 fe44 	bl	800688c <__ulp>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4630      	mov	r0, r6
 8004c0a:	4639      	mov	r1, r7
 8004c0c:	f7fb fcd0 	bl	80005b0 <__aeabi_dmul>
 8004c10:	464a      	mov	r2, r9
 8004c12:	4653      	mov	r3, sl
 8004c14:	f7fb fb16 	bl	8000244 <__adddf3>
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4954      	ldr	r1, [pc, #336]	; (8004d6c <_strtod_l+0xb2c>)
 8004c1c:	4a58      	ldr	r2, [pc, #352]	; (8004d80 <_strtod_l+0xb40>)
 8004c1e:	4019      	ands	r1, r3
 8004c20:	4291      	cmp	r1, r2
 8004c22:	4681      	mov	r9, r0
 8004c24:	d95e      	bls.n	8004ce4 <_strtod_l+0xaa4>
 8004c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c28:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d103      	bne.n	8004c38 <_strtod_l+0x9f8>
 8004c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c32:	3301      	adds	r3, #1
 8004c34:	f43f ad26 	beq.w	8004684 <_strtod_l+0x444>
 8004c38:	f04f 39ff 	mov.w	r9, #4294967295
 8004c3c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004d70 <_strtod_l+0xb30>
 8004c40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c42:	4658      	mov	r0, fp
 8004c44:	f001 fb8c 	bl	8006360 <_Bfree>
 8004c48:	9906      	ldr	r1, [sp, #24]
 8004c4a:	4658      	mov	r0, fp
 8004c4c:	f001 fb88 	bl	8006360 <_Bfree>
 8004c50:	9904      	ldr	r1, [sp, #16]
 8004c52:	4658      	mov	r0, fp
 8004c54:	f001 fb84 	bl	8006360 <_Bfree>
 8004c58:	4641      	mov	r1, r8
 8004c5a:	4658      	mov	r0, fp
 8004c5c:	f001 fb80 	bl	8006360 <_Bfree>
 8004c60:	e617      	b.n	8004892 <_strtod_l+0x652>
 8004c62:	f1b9 0f00 	cmp.w	r9, #0
 8004c66:	d119      	bne.n	8004c9c <_strtod_l+0xa5c>
 8004c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c6e:	b9e3      	cbnz	r3, 8004caa <_strtod_l+0xa6a>
 8004c70:	2200      	movs	r2, #0
 8004c72:	4b41      	ldr	r3, [pc, #260]	; (8004d78 <_strtod_l+0xb38>)
 8004c74:	4630      	mov	r0, r6
 8004c76:	4639      	mov	r1, r7
 8004c78:	f7fb ff0c 	bl	8000a94 <__aeabi_dcmplt>
 8004c7c:	b9c8      	cbnz	r0, 8004cb2 <_strtod_l+0xa72>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	4b40      	ldr	r3, [pc, #256]	; (8004d84 <_strtod_l+0xb44>)
 8004c82:	4630      	mov	r0, r6
 8004c84:	4639      	mov	r1, r7
 8004c86:	f7fb fc93 	bl	80005b0 <__aeabi_dmul>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004c92:	9418      	str	r4, [sp, #96]	; 0x60
 8004c94:	9319      	str	r3, [sp, #100]	; 0x64
 8004c96:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004c9a:	e79d      	b.n	8004bd8 <_strtod_l+0x998>
 8004c9c:	f1b9 0f01 	cmp.w	r9, #1
 8004ca0:	d103      	bne.n	8004caa <_strtod_l+0xa6a>
 8004ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f43f ad8a 	beq.w	80047be <_strtod_l+0x57e>
 8004caa:	2600      	movs	r6, #0
 8004cac:	4f36      	ldr	r7, [pc, #216]	; (8004d88 <_strtod_l+0xb48>)
 8004cae:	2400      	movs	r4, #0
 8004cb0:	e791      	b.n	8004bd6 <_strtod_l+0x996>
 8004cb2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004cb4:	4d33      	ldr	r5, [pc, #204]	; (8004d84 <_strtod_l+0xb44>)
 8004cb6:	e7ea      	b.n	8004c8e <_strtod_l+0xa4e>
 8004cb8:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <_strtod_l+0xb44>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	f7fb fc76 	bl	80005b0 <__aeabi_dmul>
 8004cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	460d      	mov	r5, r1
 8004cca:	b933      	cbnz	r3, 8004cda <_strtod_l+0xa9a>
 8004ccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cd0:	9010      	str	r0, [sp, #64]	; 0x40
 8004cd2:	9311      	str	r3, [sp, #68]	; 0x44
 8004cd4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004cd8:	e77e      	b.n	8004bd8 <_strtod_l+0x998>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004ce2:	e7f7      	b.n	8004cd4 <_strtod_l+0xa94>
 8004ce4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8004ce8:	9b05      	ldr	r3, [sp, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1a8      	bne.n	8004c40 <_strtod_l+0xa00>
 8004cee:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004cf2:	0d1b      	lsrs	r3, r3, #20
 8004cf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cf6:	051b      	lsls	r3, r3, #20
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	4656      	mov	r6, sl
 8004cfc:	d1a0      	bne.n	8004c40 <_strtod_l+0xa00>
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4620      	mov	r0, r4
 8004d02:	f7fb ff05 	bl	8000b10 <__aeabi_d2iz>
 8004d06:	f7fb fbe9 	bl	80004dc <__aeabi_i2d>
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4629      	mov	r1, r5
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7fb fa95 	bl	8000240 <__aeabi_dsub>
 8004d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d18:	4604      	mov	r4, r0
 8004d1a:	460d      	mov	r5, r1
 8004d1c:	b933      	cbnz	r3, 8004d2c <_strtod_l+0xaec>
 8004d1e:	f1b9 0f00 	cmp.w	r9, #0
 8004d22:	d103      	bne.n	8004d2c <_strtod_l+0xaec>
 8004d24:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004d28:	2e00      	cmp	r6, #0
 8004d2a:	d06a      	beq.n	8004e02 <_strtod_l+0xbc2>
 8004d2c:	a30a      	add	r3, pc, #40	; (adr r3, 8004d58 <_strtod_l+0xb18>)
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	4620      	mov	r0, r4
 8004d34:	4629      	mov	r1, r5
 8004d36:	f7fb fead 	bl	8000a94 <__aeabi_dcmplt>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	f47f acad 	bne.w	800469a <_strtod_l+0x45a>
 8004d40:	a307      	add	r3, pc, #28	; (adr r3, 8004d60 <_strtod_l+0xb20>)
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb fec1 	bl	8000ad0 <__aeabi_dcmpgt>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	f43f af76 	beq.w	8004c40 <_strtod_l+0xa00>
 8004d54:	e4a1      	b.n	800469a <_strtod_l+0x45a>
 8004d56:	bf00      	nop
 8004d58:	94a03595 	.word	0x94a03595
 8004d5c:	3fdfffff 	.word	0x3fdfffff
 8004d60:	35afe535 	.word	0x35afe535
 8004d64:	3fe00000 	.word	0x3fe00000
 8004d68:	000fffff 	.word	0x000fffff
 8004d6c:	7ff00000 	.word	0x7ff00000
 8004d70:	7fefffff 	.word	0x7fefffff
 8004d74:	39500000 	.word	0x39500000
 8004d78:	3ff00000 	.word	0x3ff00000
 8004d7c:	7fe00000 	.word	0x7fe00000
 8004d80:	7c9fffff 	.word	0x7c9fffff
 8004d84:	3fe00000 	.word	0x3fe00000
 8004d88:	bff00000 	.word	0xbff00000
 8004d8c:	9b05      	ldr	r3, [sp, #20]
 8004d8e:	b313      	cbz	r3, 8004dd6 <_strtod_l+0xb96>
 8004d90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d92:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d96:	d81e      	bhi.n	8004dd6 <_strtod_l+0xb96>
 8004d98:	a325      	add	r3, pc, #148	; (adr r3, 8004e30 <_strtod_l+0xbf0>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	4629      	mov	r1, r5
 8004da2:	f7fb fe81 	bl	8000aa8 <__aeabi_dcmple>
 8004da6:	b190      	cbz	r0, 8004dce <_strtod_l+0xb8e>
 8004da8:	4629      	mov	r1, r5
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7fb fed8 	bl	8000b60 <__aeabi_d2uiz>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	bf08      	it	eq
 8004db4:	2001      	moveq	r0, #1
 8004db6:	f7fb fb81 	bl	80004bc <__aeabi_ui2d>
 8004dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	b9d3      	cbnz	r3, 8004df8 <_strtod_l+0xbb8>
 8004dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004dc6:	9012      	str	r0, [sp, #72]	; 0x48
 8004dc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8004dca:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004dce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dd0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004dd4:	1a9f      	subs	r7, r3, r2
 8004dd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dda:	f001 fd57 	bl	800688c <__ulp>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4630      	mov	r0, r6
 8004de4:	4639      	mov	r1, r7
 8004de6:	f7fb fbe3 	bl	80005b0 <__aeabi_dmul>
 8004dea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004dee:	f7fb fa29 	bl	8000244 <__adddf3>
 8004df2:	4681      	mov	r9, r0
 8004df4:	468a      	mov	sl, r1
 8004df6:	e777      	b.n	8004ce8 <_strtod_l+0xaa8>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004e00:	e7e3      	b.n	8004dca <_strtod_l+0xb8a>
 8004e02:	a30d      	add	r3, pc, #52	; (adr r3, 8004e38 <_strtod_l+0xbf8>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb fe44 	bl	8000a94 <__aeabi_dcmplt>
 8004e0c:	e79f      	b.n	8004d4e <_strtod_l+0xb0e>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	930d      	str	r3, [sp, #52]	; 0x34
 8004e12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	f7ff ba55 	b.w	80042c6 <_strtod_l+0x86>
 8004e1c:	2b65      	cmp	r3, #101	; 0x65
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f43f ab42 	beq.w	80044aa <_strtod_l+0x26a>
 8004e26:	2101      	movs	r1, #1
 8004e28:	4614      	mov	r4, r2
 8004e2a:	9105      	str	r1, [sp, #20]
 8004e2c:	f7ff babf 	b.w	80043ae <_strtod_l+0x16e>
 8004e30:	ffc00000 	.word	0xffc00000
 8004e34:	41dfffff 	.word	0x41dfffff
 8004e38:	94a03595 	.word	0x94a03595
 8004e3c:	3fcfffff 	.word	0x3fcfffff

08004e40 <_strtod_r>:
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <_strtod_r+0x18>)
 8004e42:	b410      	push	{r4}
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4c05      	ldr	r4, [pc, #20]	; (8004e5c <_strtod_r+0x1c>)
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf08      	it	eq
 8004e4e:	4623      	moveq	r3, r4
 8004e50:	bc10      	pop	{r4}
 8004e52:	f7ff b9f5 	b.w	8004240 <_strtod_l>
 8004e56:	bf00      	nop
 8004e58:	20000024 	.word	0x20000024
 8004e5c:	20000088 	.word	0x20000088

08004e60 <_strtol_l.isra.0>:
 8004e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e64:	4680      	mov	r8, r0
 8004e66:	4689      	mov	r9, r1
 8004e68:	4692      	mov	sl, r2
 8004e6a:	461e      	mov	r6, r3
 8004e6c:	460f      	mov	r7, r1
 8004e6e:	463d      	mov	r5, r7
 8004e70:	9808      	ldr	r0, [sp, #32]
 8004e72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e76:	f001 fa03 	bl	8006280 <__locale_ctype_ptr_l>
 8004e7a:	4420      	add	r0, r4
 8004e7c:	7843      	ldrb	r3, [r0, #1]
 8004e7e:	f013 0308 	ands.w	r3, r3, #8
 8004e82:	d132      	bne.n	8004eea <_strtol_l.isra.0+0x8a>
 8004e84:	2c2d      	cmp	r4, #45	; 0x2d
 8004e86:	d132      	bne.n	8004eee <_strtol_l.isra.0+0x8e>
 8004e88:	2201      	movs	r2, #1
 8004e8a:	787c      	ldrb	r4, [r7, #1]
 8004e8c:	1cbd      	adds	r5, r7, #2
 8004e8e:	2e00      	cmp	r6, #0
 8004e90:	d05d      	beq.n	8004f4e <_strtol_l.isra.0+0xee>
 8004e92:	2e10      	cmp	r6, #16
 8004e94:	d109      	bne.n	8004eaa <_strtol_l.isra.0+0x4a>
 8004e96:	2c30      	cmp	r4, #48	; 0x30
 8004e98:	d107      	bne.n	8004eaa <_strtol_l.isra.0+0x4a>
 8004e9a:	782b      	ldrb	r3, [r5, #0]
 8004e9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004ea0:	2b58      	cmp	r3, #88	; 0x58
 8004ea2:	d14f      	bne.n	8004f44 <_strtol_l.isra.0+0xe4>
 8004ea4:	2610      	movs	r6, #16
 8004ea6:	786c      	ldrb	r4, [r5, #1]
 8004ea8:	3502      	adds	r5, #2
 8004eaa:	2a00      	cmp	r2, #0
 8004eac:	bf14      	ite	ne
 8004eae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004eb2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004eb6:	2700      	movs	r7, #0
 8004eb8:	fbb1 fcf6 	udiv	ip, r1, r6
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004ec2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004ec6:	2b09      	cmp	r3, #9
 8004ec8:	d817      	bhi.n	8004efa <_strtol_l.isra.0+0x9a>
 8004eca:	461c      	mov	r4, r3
 8004ecc:	42a6      	cmp	r6, r4
 8004ece:	dd23      	ble.n	8004f18 <_strtol_l.isra.0+0xb8>
 8004ed0:	1c7b      	adds	r3, r7, #1
 8004ed2:	d007      	beq.n	8004ee4 <_strtol_l.isra.0+0x84>
 8004ed4:	4584      	cmp	ip, r0
 8004ed6:	d31c      	bcc.n	8004f12 <_strtol_l.isra.0+0xb2>
 8004ed8:	d101      	bne.n	8004ede <_strtol_l.isra.0+0x7e>
 8004eda:	45a6      	cmp	lr, r4
 8004edc:	db19      	blt.n	8004f12 <_strtol_l.isra.0+0xb2>
 8004ede:	2701      	movs	r7, #1
 8004ee0:	fb00 4006 	mla	r0, r0, r6, r4
 8004ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ee8:	e7eb      	b.n	8004ec2 <_strtol_l.isra.0+0x62>
 8004eea:	462f      	mov	r7, r5
 8004eec:	e7bf      	b.n	8004e6e <_strtol_l.isra.0+0xe>
 8004eee:	2c2b      	cmp	r4, #43	; 0x2b
 8004ef0:	bf04      	itt	eq
 8004ef2:	1cbd      	addeq	r5, r7, #2
 8004ef4:	787c      	ldrbeq	r4, [r7, #1]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	e7c9      	b.n	8004e8e <_strtol_l.isra.0+0x2e>
 8004efa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004efe:	2b19      	cmp	r3, #25
 8004f00:	d801      	bhi.n	8004f06 <_strtol_l.isra.0+0xa6>
 8004f02:	3c37      	subs	r4, #55	; 0x37
 8004f04:	e7e2      	b.n	8004ecc <_strtol_l.isra.0+0x6c>
 8004f06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004f0a:	2b19      	cmp	r3, #25
 8004f0c:	d804      	bhi.n	8004f18 <_strtol_l.isra.0+0xb8>
 8004f0e:	3c57      	subs	r4, #87	; 0x57
 8004f10:	e7dc      	b.n	8004ecc <_strtol_l.isra.0+0x6c>
 8004f12:	f04f 37ff 	mov.w	r7, #4294967295
 8004f16:	e7e5      	b.n	8004ee4 <_strtol_l.isra.0+0x84>
 8004f18:	1c7b      	adds	r3, r7, #1
 8004f1a:	d108      	bne.n	8004f2e <_strtol_l.isra.0+0xce>
 8004f1c:	2322      	movs	r3, #34	; 0x22
 8004f1e:	4608      	mov	r0, r1
 8004f20:	f8c8 3000 	str.w	r3, [r8]
 8004f24:	f1ba 0f00 	cmp.w	sl, #0
 8004f28:	d107      	bne.n	8004f3a <_strtol_l.isra.0+0xda>
 8004f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2e:	b102      	cbz	r2, 8004f32 <_strtol_l.isra.0+0xd2>
 8004f30:	4240      	negs	r0, r0
 8004f32:	f1ba 0f00 	cmp.w	sl, #0
 8004f36:	d0f8      	beq.n	8004f2a <_strtol_l.isra.0+0xca>
 8004f38:	b10f      	cbz	r7, 8004f3e <_strtol_l.isra.0+0xde>
 8004f3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8004f3e:	f8ca 9000 	str.w	r9, [sl]
 8004f42:	e7f2      	b.n	8004f2a <_strtol_l.isra.0+0xca>
 8004f44:	2430      	movs	r4, #48	; 0x30
 8004f46:	2e00      	cmp	r6, #0
 8004f48:	d1af      	bne.n	8004eaa <_strtol_l.isra.0+0x4a>
 8004f4a:	2608      	movs	r6, #8
 8004f4c:	e7ad      	b.n	8004eaa <_strtol_l.isra.0+0x4a>
 8004f4e:	2c30      	cmp	r4, #48	; 0x30
 8004f50:	d0a3      	beq.n	8004e9a <_strtol_l.isra.0+0x3a>
 8004f52:	260a      	movs	r6, #10
 8004f54:	e7a9      	b.n	8004eaa <_strtol_l.isra.0+0x4a>
	...

08004f58 <_strtol_r>:
 8004f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f5a:	4c06      	ldr	r4, [pc, #24]	; (8004f74 <_strtol_r+0x1c>)
 8004f5c:	4d06      	ldr	r5, [pc, #24]	; (8004f78 <_strtol_r+0x20>)
 8004f5e:	6824      	ldr	r4, [r4, #0]
 8004f60:	6a24      	ldr	r4, [r4, #32]
 8004f62:	2c00      	cmp	r4, #0
 8004f64:	bf08      	it	eq
 8004f66:	462c      	moveq	r4, r5
 8004f68:	9400      	str	r4, [sp, #0]
 8004f6a:	f7ff ff79 	bl	8004e60 <_strtol_l.isra.0>
 8004f6e:	b003      	add	sp, #12
 8004f70:	bd30      	pop	{r4, r5, pc}
 8004f72:	bf00      	nop
 8004f74:	20000024 	.word	0x20000024
 8004f78:	20000088 	.word	0x20000088

08004f7c <strtol>:
 8004f7c:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <strtol+0x24>)
 8004f7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f80:	681c      	ldr	r4, [r3, #0]
 8004f82:	4d08      	ldr	r5, [pc, #32]	; (8004fa4 <strtol+0x28>)
 8004f84:	6a23      	ldr	r3, [r4, #32]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf08      	it	eq
 8004f8a:	462b      	moveq	r3, r5
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	460a      	mov	r2, r1
 8004f92:	4601      	mov	r1, r0
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff ff63 	bl	8004e60 <_strtol_l.isra.0>
 8004f9a:	b003      	add	sp, #12
 8004f9c:	bd30      	pop	{r4, r5, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000024 	.word	0x20000024
 8004fa4:	20000088 	.word	0x20000088

08004fa8 <quorem>:
 8004fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	6903      	ldr	r3, [r0, #16]
 8004fae:	690c      	ldr	r4, [r1, #16]
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	42a3      	cmp	r3, r4
 8004fb4:	f2c0 8084 	blt.w	80050c0 <quorem+0x118>
 8004fb8:	3c01      	subs	r4, #1
 8004fba:	f101 0714 	add.w	r7, r1, #20
 8004fbe:	f100 0614 	add.w	r6, r0, #20
 8004fc2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004fc6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004fca:	3501      	adds	r5, #1
 8004fcc:	fbb0 f5f5 	udiv	r5, r0, r5
 8004fd0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004fd4:	eb06 030c 	add.w	r3, r6, ip
 8004fd8:	eb07 090c 	add.w	r9, r7, ip
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	b39d      	cbz	r5, 8005048 <quorem+0xa0>
 8004fe0:	f04f 0a00 	mov.w	sl, #0
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	46b6      	mov	lr, r6
 8004fe8:	46d3      	mov	fp, sl
 8004fea:	f850 2b04 	ldr.w	r2, [r0], #4
 8004fee:	b293      	uxth	r3, r2
 8004ff0:	fb05 a303 	mla	r3, r5, r3, sl
 8004ff4:	0c12      	lsrs	r2, r2, #16
 8004ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ffa:	fb05 a202 	mla	r2, r5, r2, sl
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	ebab 0303 	sub.w	r3, fp, r3
 8005004:	f8de b000 	ldr.w	fp, [lr]
 8005008:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800500c:	fa1f fb8b 	uxth.w	fp, fp
 8005010:	445b      	add	r3, fp
 8005012:	fa1f fb82 	uxth.w	fp, r2
 8005016:	f8de 2000 	ldr.w	r2, [lr]
 800501a:	4581      	cmp	r9, r0
 800501c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005024:	b29b      	uxth	r3, r3
 8005026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800502a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800502e:	f84e 3b04 	str.w	r3, [lr], #4
 8005032:	d2da      	bcs.n	8004fea <quorem+0x42>
 8005034:	f856 300c 	ldr.w	r3, [r6, ip]
 8005038:	b933      	cbnz	r3, 8005048 <quorem+0xa0>
 800503a:	9b01      	ldr	r3, [sp, #4]
 800503c:	3b04      	subs	r3, #4
 800503e:	429e      	cmp	r6, r3
 8005040:	461a      	mov	r2, r3
 8005042:	d331      	bcc.n	80050a8 <quorem+0x100>
 8005044:	f8c8 4010 	str.w	r4, [r8, #16]
 8005048:	4640      	mov	r0, r8
 800504a:	f001 fba7 	bl	800679c <__mcmp>
 800504e:	2800      	cmp	r0, #0
 8005050:	db26      	blt.n	80050a0 <quorem+0xf8>
 8005052:	4630      	mov	r0, r6
 8005054:	f04f 0c00 	mov.w	ip, #0
 8005058:	3501      	adds	r5, #1
 800505a:	f857 1b04 	ldr.w	r1, [r7], #4
 800505e:	f8d0 e000 	ldr.w	lr, [r0]
 8005062:	b28b      	uxth	r3, r1
 8005064:	ebac 0303 	sub.w	r3, ip, r3
 8005068:	fa1f f28e 	uxth.w	r2, lr
 800506c:	4413      	add	r3, r2
 800506e:	0c0a      	lsrs	r2, r1, #16
 8005070:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005078:	b29b      	uxth	r3, r3
 800507a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800507e:	45b9      	cmp	r9, r7
 8005080:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005084:	f840 3b04 	str.w	r3, [r0], #4
 8005088:	d2e7      	bcs.n	800505a <quorem+0xb2>
 800508a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800508e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005092:	b92a      	cbnz	r2, 80050a0 <quorem+0xf8>
 8005094:	3b04      	subs	r3, #4
 8005096:	429e      	cmp	r6, r3
 8005098:	461a      	mov	r2, r3
 800509a:	d30b      	bcc.n	80050b4 <quorem+0x10c>
 800509c:	f8c8 4010 	str.w	r4, [r8, #16]
 80050a0:	4628      	mov	r0, r5
 80050a2:	b003      	add	sp, #12
 80050a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	3b04      	subs	r3, #4
 80050ac:	2a00      	cmp	r2, #0
 80050ae:	d1c9      	bne.n	8005044 <quorem+0x9c>
 80050b0:	3c01      	subs	r4, #1
 80050b2:	e7c4      	b.n	800503e <quorem+0x96>
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	3b04      	subs	r3, #4
 80050b8:	2a00      	cmp	r2, #0
 80050ba:	d1ef      	bne.n	800509c <quorem+0xf4>
 80050bc:	3c01      	subs	r4, #1
 80050be:	e7ea      	b.n	8005096 <quorem+0xee>
 80050c0:	2000      	movs	r0, #0
 80050c2:	e7ee      	b.n	80050a2 <quorem+0xfa>
 80050c4:	0000      	movs	r0, r0
	...

080050c8 <_dtoa_r>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	4616      	mov	r6, r2
 80050ce:	461f      	mov	r7, r3
 80050d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050d2:	b095      	sub	sp, #84	; 0x54
 80050d4:	4604      	mov	r4, r0
 80050d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80050da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80050de:	b93d      	cbnz	r5, 80050f0 <_dtoa_r+0x28>
 80050e0:	2010      	movs	r0, #16
 80050e2:	f001 f8e1 	bl	80062a8 <malloc>
 80050e6:	6260      	str	r0, [r4, #36]	; 0x24
 80050e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050ec:	6005      	str	r5, [r0, #0]
 80050ee:	60c5      	str	r5, [r0, #12]
 80050f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	b151      	cbz	r1, 800510c <_dtoa_r+0x44>
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	2301      	movs	r3, #1
 80050fa:	4093      	lsls	r3, r2
 80050fc:	604a      	str	r2, [r1, #4]
 80050fe:	608b      	str	r3, [r1, #8]
 8005100:	4620      	mov	r0, r4
 8005102:	f001 f92d 	bl	8006360 <_Bfree>
 8005106:	2200      	movs	r2, #0
 8005108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	1e3b      	subs	r3, r7, #0
 800510e:	bfaf      	iteee	ge
 8005110:	2300      	movge	r3, #0
 8005112:	2201      	movlt	r2, #1
 8005114:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005118:	9303      	strlt	r3, [sp, #12]
 800511a:	bfac      	ite	ge
 800511c:	f8c8 3000 	strge.w	r3, [r8]
 8005120:	f8c8 2000 	strlt.w	r2, [r8]
 8005124:	4bae      	ldr	r3, [pc, #696]	; (80053e0 <_dtoa_r+0x318>)
 8005126:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800512a:	ea33 0308 	bics.w	r3, r3, r8
 800512e:	d11b      	bne.n	8005168 <_dtoa_r+0xa0>
 8005130:	f242 730f 	movw	r3, #9999	; 0x270f
 8005134:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	9b02      	ldr	r3, [sp, #8]
 800513a:	b923      	cbnz	r3, 8005146 <_dtoa_r+0x7e>
 800513c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005140:	2800      	cmp	r0, #0
 8005142:	f000 8545 	beq.w	8005bd0 <_dtoa_r+0xb08>
 8005146:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005148:	b953      	cbnz	r3, 8005160 <_dtoa_r+0x98>
 800514a:	4ba6      	ldr	r3, [pc, #664]	; (80053e4 <_dtoa_r+0x31c>)
 800514c:	e021      	b.n	8005192 <_dtoa_r+0xca>
 800514e:	4ba6      	ldr	r3, [pc, #664]	; (80053e8 <_dtoa_r+0x320>)
 8005150:	9306      	str	r3, [sp, #24]
 8005152:	3308      	adds	r3, #8
 8005154:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	9806      	ldr	r0, [sp, #24]
 800515a:	b015      	add	sp, #84	; 0x54
 800515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005160:	4ba0      	ldr	r3, [pc, #640]	; (80053e4 <_dtoa_r+0x31c>)
 8005162:	9306      	str	r3, [sp, #24]
 8005164:	3303      	adds	r3, #3
 8005166:	e7f5      	b.n	8005154 <_dtoa_r+0x8c>
 8005168:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800516c:	2200      	movs	r2, #0
 800516e:	2300      	movs	r3, #0
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	f7fb fc84 	bl	8000a80 <__aeabi_dcmpeq>
 8005178:	4682      	mov	sl, r0
 800517a:	b160      	cbz	r0, 8005196 <_dtoa_r+0xce>
 800517c:	2301      	movs	r3, #1
 800517e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8520 	beq.w	8005bca <_dtoa_r+0xb02>
 800518a:	4b98      	ldr	r3, [pc, #608]	; (80053ec <_dtoa_r+0x324>)
 800518c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	3b01      	subs	r3, #1
 8005192:	9306      	str	r3, [sp, #24]
 8005194:	e7e0      	b.n	8005158 <_dtoa_r+0x90>
 8005196:	ab12      	add	r3, sp, #72	; 0x48
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	ab13      	add	r3, sp, #76	; 0x4c
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	4632      	mov	r2, r6
 80051a0:	463b      	mov	r3, r7
 80051a2:	4620      	mov	r0, r4
 80051a4:	f001 fbe8 	bl	8006978 <__d2b>
 80051a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80051ac:	4683      	mov	fp, r0
 80051ae:	2d00      	cmp	r5, #0
 80051b0:	d07d      	beq.n	80052ae <_dtoa_r+0x1e6>
 80051b2:	46b0      	mov	r8, r6
 80051b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80051b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80051bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80051c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80051c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80051c8:	2200      	movs	r2, #0
 80051ca:	4b89      	ldr	r3, [pc, #548]	; (80053f0 <_dtoa_r+0x328>)
 80051cc:	4640      	mov	r0, r8
 80051ce:	4649      	mov	r1, r9
 80051d0:	f7fb f836 	bl	8000240 <__aeabi_dsub>
 80051d4:	a37c      	add	r3, pc, #496	; (adr r3, 80053c8 <_dtoa_r+0x300>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f7fb f9e9 	bl	80005b0 <__aeabi_dmul>
 80051de:	a37c      	add	r3, pc, #496	; (adr r3, 80053d0 <_dtoa_r+0x308>)
 80051e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e4:	f7fb f82e 	bl	8000244 <__adddf3>
 80051e8:	4606      	mov	r6, r0
 80051ea:	4628      	mov	r0, r5
 80051ec:	460f      	mov	r7, r1
 80051ee:	f7fb f975 	bl	80004dc <__aeabi_i2d>
 80051f2:	a379      	add	r3, pc, #484	; (adr r3, 80053d8 <_dtoa_r+0x310>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fb f9da 	bl	80005b0 <__aeabi_dmul>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4630      	mov	r0, r6
 8005202:	4639      	mov	r1, r7
 8005204:	f7fb f81e 	bl	8000244 <__adddf3>
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	f7fb fc80 	bl	8000b10 <__aeabi_d2iz>
 8005210:	2200      	movs	r2, #0
 8005212:	4682      	mov	sl, r0
 8005214:	2300      	movs	r3, #0
 8005216:	4630      	mov	r0, r6
 8005218:	4639      	mov	r1, r7
 800521a:	f7fb fc3b 	bl	8000a94 <__aeabi_dcmplt>
 800521e:	b148      	cbz	r0, 8005234 <_dtoa_r+0x16c>
 8005220:	4650      	mov	r0, sl
 8005222:	f7fb f95b 	bl	80004dc <__aeabi_i2d>
 8005226:	4632      	mov	r2, r6
 8005228:	463b      	mov	r3, r7
 800522a:	f7fb fc29 	bl	8000a80 <__aeabi_dcmpeq>
 800522e:	b908      	cbnz	r0, 8005234 <_dtoa_r+0x16c>
 8005230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005234:	f1ba 0f16 	cmp.w	sl, #22
 8005238:	d85a      	bhi.n	80052f0 <_dtoa_r+0x228>
 800523a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800523e:	496d      	ldr	r1, [pc, #436]	; (80053f4 <_dtoa_r+0x32c>)
 8005240:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005248:	f7fb fc42 	bl	8000ad0 <__aeabi_dcmpgt>
 800524c:	2800      	cmp	r0, #0
 800524e:	d051      	beq.n	80052f4 <_dtoa_r+0x22c>
 8005250:	2300      	movs	r3, #0
 8005252:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005256:	930d      	str	r3, [sp, #52]	; 0x34
 8005258:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800525a:	1b5d      	subs	r5, r3, r5
 800525c:	1e6b      	subs	r3, r5, #1
 800525e:	9307      	str	r3, [sp, #28]
 8005260:	bf43      	ittte	mi
 8005262:	2300      	movmi	r3, #0
 8005264:	f1c5 0901 	rsbmi	r9, r5, #1
 8005268:	9307      	strmi	r3, [sp, #28]
 800526a:	f04f 0900 	movpl.w	r9, #0
 800526e:	f1ba 0f00 	cmp.w	sl, #0
 8005272:	db41      	blt.n	80052f8 <_dtoa_r+0x230>
 8005274:	9b07      	ldr	r3, [sp, #28]
 8005276:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800527a:	4453      	add	r3, sl
 800527c:	9307      	str	r3, [sp, #28]
 800527e:	2300      	movs	r3, #0
 8005280:	9308      	str	r3, [sp, #32]
 8005282:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005284:	2b09      	cmp	r3, #9
 8005286:	f200 808f 	bhi.w	80053a8 <_dtoa_r+0x2e0>
 800528a:	2b05      	cmp	r3, #5
 800528c:	bfc4      	itt	gt
 800528e:	3b04      	subgt	r3, #4
 8005290:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005292:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005294:	bfc8      	it	gt
 8005296:	2500      	movgt	r5, #0
 8005298:	f1a3 0302 	sub.w	r3, r3, #2
 800529c:	bfd8      	it	le
 800529e:	2501      	movle	r5, #1
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	f200 808d 	bhi.w	80053c0 <_dtoa_r+0x2f8>
 80052a6:	e8df f003 	tbb	[pc, r3]
 80052aa:	7d7b      	.short	0x7d7b
 80052ac:	6f2f      	.short	0x6f2f
 80052ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80052b2:	441d      	add	r5, r3
 80052b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80052b8:	2820      	cmp	r0, #32
 80052ba:	dd13      	ble.n	80052e4 <_dtoa_r+0x21c>
 80052bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80052c0:	9b02      	ldr	r3, [sp, #8]
 80052c2:	fa08 f800 	lsl.w	r8, r8, r0
 80052c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80052ca:	fa23 f000 	lsr.w	r0, r3, r0
 80052ce:	ea48 0000 	orr.w	r0, r8, r0
 80052d2:	f7fb f8f3 	bl	80004bc <__aeabi_ui2d>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4680      	mov	r8, r0
 80052da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80052de:	3d01      	subs	r5, #1
 80052e0:	9310      	str	r3, [sp, #64]	; 0x40
 80052e2:	e771      	b.n	80051c8 <_dtoa_r+0x100>
 80052e4:	9b02      	ldr	r3, [sp, #8]
 80052e6:	f1c0 0020 	rsb	r0, r0, #32
 80052ea:	fa03 f000 	lsl.w	r0, r3, r0
 80052ee:	e7f0      	b.n	80052d2 <_dtoa_r+0x20a>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e7b0      	b.n	8005256 <_dtoa_r+0x18e>
 80052f4:	900d      	str	r0, [sp, #52]	; 0x34
 80052f6:	e7af      	b.n	8005258 <_dtoa_r+0x190>
 80052f8:	f1ca 0300 	rsb	r3, sl, #0
 80052fc:	9308      	str	r3, [sp, #32]
 80052fe:	2300      	movs	r3, #0
 8005300:	eba9 090a 	sub.w	r9, r9, sl
 8005304:	930c      	str	r3, [sp, #48]	; 0x30
 8005306:	e7bc      	b.n	8005282 <_dtoa_r+0x1ba>
 8005308:	2301      	movs	r3, #1
 800530a:	9309      	str	r3, [sp, #36]	; 0x24
 800530c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800530e:	2b00      	cmp	r3, #0
 8005310:	dd74      	ble.n	80053fc <_dtoa_r+0x334>
 8005312:	4698      	mov	r8, r3
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	2200      	movs	r2, #0
 8005318:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800531a:	6072      	str	r2, [r6, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	f102 0014 	add.w	r0, r2, #20
 8005322:	4298      	cmp	r0, r3
 8005324:	6871      	ldr	r1, [r6, #4]
 8005326:	d96e      	bls.n	8005406 <_dtoa_r+0x33e>
 8005328:	4620      	mov	r0, r4
 800532a:	f000 ffe5 	bl	80062f8 <_Balloc>
 800532e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005330:	6030      	str	r0, [r6, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f1b8 0f0e 	cmp.w	r8, #14
 8005338:	9306      	str	r3, [sp, #24]
 800533a:	f200 80ed 	bhi.w	8005518 <_dtoa_r+0x450>
 800533e:	2d00      	cmp	r5, #0
 8005340:	f000 80ea 	beq.w	8005518 <_dtoa_r+0x450>
 8005344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005348:	f1ba 0f00 	cmp.w	sl, #0
 800534c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005350:	dd77      	ble.n	8005442 <_dtoa_r+0x37a>
 8005352:	4a28      	ldr	r2, [pc, #160]	; (80053f4 <_dtoa_r+0x32c>)
 8005354:	f00a 030f 	and.w	r3, sl, #15
 8005358:	ea4f 162a 	mov.w	r6, sl, asr #4
 800535c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005360:	06f0      	lsls	r0, r6, #27
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800536a:	d568      	bpl.n	800543e <_dtoa_r+0x376>
 800536c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005370:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <_dtoa_r+0x330>)
 8005372:	2503      	movs	r5, #3
 8005374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005378:	f7fb fa44 	bl	8000804 <__aeabi_ddiv>
 800537c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005380:	f006 060f 	and.w	r6, r6, #15
 8005384:	4f1c      	ldr	r7, [pc, #112]	; (80053f8 <_dtoa_r+0x330>)
 8005386:	e04f      	b.n	8005428 <_dtoa_r+0x360>
 8005388:	2301      	movs	r3, #1
 800538a:	9309      	str	r3, [sp, #36]	; 0x24
 800538c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800538e:	4453      	add	r3, sl
 8005390:	f103 0801 	add.w	r8, r3, #1
 8005394:	9304      	str	r3, [sp, #16]
 8005396:	4643      	mov	r3, r8
 8005398:	2b01      	cmp	r3, #1
 800539a:	bfb8      	it	lt
 800539c:	2301      	movlt	r3, #1
 800539e:	e7ba      	b.n	8005316 <_dtoa_r+0x24e>
 80053a0:	2300      	movs	r3, #0
 80053a2:	e7b2      	b.n	800530a <_dtoa_r+0x242>
 80053a4:	2300      	movs	r3, #0
 80053a6:	e7f0      	b.n	800538a <_dtoa_r+0x2c2>
 80053a8:	2501      	movs	r5, #1
 80053aa:	2300      	movs	r3, #0
 80053ac:	9509      	str	r5, [sp, #36]	; 0x24
 80053ae:	931e      	str	r3, [sp, #120]	; 0x78
 80053b0:	f04f 33ff 	mov.w	r3, #4294967295
 80053b4:	2200      	movs	r2, #0
 80053b6:	9304      	str	r3, [sp, #16]
 80053b8:	4698      	mov	r8, r3
 80053ba:	2312      	movs	r3, #18
 80053bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80053be:	e7aa      	b.n	8005316 <_dtoa_r+0x24e>
 80053c0:	2301      	movs	r3, #1
 80053c2:	9309      	str	r3, [sp, #36]	; 0x24
 80053c4:	e7f4      	b.n	80053b0 <_dtoa_r+0x2e8>
 80053c6:	bf00      	nop
 80053c8:	636f4361 	.word	0x636f4361
 80053cc:	3fd287a7 	.word	0x3fd287a7
 80053d0:	8b60c8b3 	.word	0x8b60c8b3
 80053d4:	3fc68a28 	.word	0x3fc68a28
 80053d8:	509f79fb 	.word	0x509f79fb
 80053dc:	3fd34413 	.word	0x3fd34413
 80053e0:	7ff00000 	.word	0x7ff00000
 80053e4:	08007111 	.word	0x08007111
 80053e8:	08007108 	.word	0x08007108
 80053ec:	0800708d 	.word	0x0800708d
 80053f0:	3ff80000 	.word	0x3ff80000
 80053f4:	08007148 	.word	0x08007148
 80053f8:	08007120 	.word	0x08007120
 80053fc:	2301      	movs	r3, #1
 80053fe:	9304      	str	r3, [sp, #16]
 8005400:	4698      	mov	r8, r3
 8005402:	461a      	mov	r2, r3
 8005404:	e7da      	b.n	80053bc <_dtoa_r+0x2f4>
 8005406:	3101      	adds	r1, #1
 8005408:	6071      	str	r1, [r6, #4]
 800540a:	0052      	lsls	r2, r2, #1
 800540c:	e787      	b.n	800531e <_dtoa_r+0x256>
 800540e:	07f1      	lsls	r1, r6, #31
 8005410:	d508      	bpl.n	8005424 <_dtoa_r+0x35c>
 8005412:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800541a:	f7fb f8c9 	bl	80005b0 <__aeabi_dmul>
 800541e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005422:	3501      	adds	r5, #1
 8005424:	1076      	asrs	r6, r6, #1
 8005426:	3708      	adds	r7, #8
 8005428:	2e00      	cmp	r6, #0
 800542a:	d1f0      	bne.n	800540e <_dtoa_r+0x346>
 800542c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005434:	f7fb f9e6 	bl	8000804 <__aeabi_ddiv>
 8005438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800543c:	e01b      	b.n	8005476 <_dtoa_r+0x3ae>
 800543e:	2502      	movs	r5, #2
 8005440:	e7a0      	b.n	8005384 <_dtoa_r+0x2bc>
 8005442:	f000 80a4 	beq.w	800558e <_dtoa_r+0x4c6>
 8005446:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800544a:	f1ca 0600 	rsb	r6, sl, #0
 800544e:	4ba0      	ldr	r3, [pc, #640]	; (80056d0 <_dtoa_r+0x608>)
 8005450:	f006 020f 	and.w	r2, r6, #15
 8005454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f7fb f8a8 	bl	80005b0 <__aeabi_dmul>
 8005460:	2502      	movs	r5, #2
 8005462:	2300      	movs	r3, #0
 8005464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005468:	4f9a      	ldr	r7, [pc, #616]	; (80056d4 <_dtoa_r+0x60c>)
 800546a:	1136      	asrs	r6, r6, #4
 800546c:	2e00      	cmp	r6, #0
 800546e:	f040 8083 	bne.w	8005578 <_dtoa_r+0x4b0>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e0      	bne.n	8005438 <_dtoa_r+0x370>
 8005476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 808a 	beq.w	8005592 <_dtoa_r+0x4ca>
 800547e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005482:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005486:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800548a:	2200      	movs	r2, #0
 800548c:	4b92      	ldr	r3, [pc, #584]	; (80056d8 <_dtoa_r+0x610>)
 800548e:	f7fb fb01 	bl	8000a94 <__aeabi_dcmplt>
 8005492:	2800      	cmp	r0, #0
 8005494:	d07d      	beq.n	8005592 <_dtoa_r+0x4ca>
 8005496:	f1b8 0f00 	cmp.w	r8, #0
 800549a:	d07a      	beq.n	8005592 <_dtoa_r+0x4ca>
 800549c:	9b04      	ldr	r3, [sp, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	dd36      	ble.n	8005510 <_dtoa_r+0x448>
 80054a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054a6:	2200      	movs	r2, #0
 80054a8:	4b8c      	ldr	r3, [pc, #560]	; (80056dc <_dtoa_r+0x614>)
 80054aa:	f7fb f881 	bl	80005b0 <__aeabi_dmul>
 80054ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b2:	9e04      	ldr	r6, [sp, #16]
 80054b4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80054b8:	3501      	adds	r5, #1
 80054ba:	4628      	mov	r0, r5
 80054bc:	f7fb f80e 	bl	80004dc <__aeabi_i2d>
 80054c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054c4:	f7fb f874 	bl	80005b0 <__aeabi_dmul>
 80054c8:	2200      	movs	r2, #0
 80054ca:	4b85      	ldr	r3, [pc, #532]	; (80056e0 <_dtoa_r+0x618>)
 80054cc:	f7fa feba 	bl	8000244 <__adddf3>
 80054d0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80054d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054d8:	950b      	str	r5, [sp, #44]	; 0x2c
 80054da:	2e00      	cmp	r6, #0
 80054dc:	d15c      	bne.n	8005598 <_dtoa_r+0x4d0>
 80054de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e2:	2200      	movs	r2, #0
 80054e4:	4b7f      	ldr	r3, [pc, #508]	; (80056e4 <_dtoa_r+0x61c>)
 80054e6:	f7fa feab 	bl	8000240 <__aeabi_dsub>
 80054ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ec:	462b      	mov	r3, r5
 80054ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f2:	f7fb faed 	bl	8000ad0 <__aeabi_dcmpgt>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f040 8281 	bne.w	80059fe <_dtoa_r+0x936>
 80054fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005502:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005506:	f7fb fac5 	bl	8000a94 <__aeabi_dcmplt>
 800550a:	2800      	cmp	r0, #0
 800550c:	f040 8275 	bne.w	80059fa <_dtoa_r+0x932>
 8005510:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005514:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005518:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800551a:	2b00      	cmp	r3, #0
 800551c:	f2c0 814b 	blt.w	80057b6 <_dtoa_r+0x6ee>
 8005520:	f1ba 0f0e 	cmp.w	sl, #14
 8005524:	f300 8147 	bgt.w	80057b6 <_dtoa_r+0x6ee>
 8005528:	4b69      	ldr	r3, [pc, #420]	; (80056d0 <_dtoa_r+0x608>)
 800552a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005536:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005538:	2b00      	cmp	r3, #0
 800553a:	f280 80d7 	bge.w	80056ec <_dtoa_r+0x624>
 800553e:	f1b8 0f00 	cmp.w	r8, #0
 8005542:	f300 80d3 	bgt.w	80056ec <_dtoa_r+0x624>
 8005546:	f040 8257 	bne.w	80059f8 <_dtoa_r+0x930>
 800554a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800554e:	2200      	movs	r2, #0
 8005550:	4b64      	ldr	r3, [pc, #400]	; (80056e4 <_dtoa_r+0x61c>)
 8005552:	f7fb f82d 	bl	80005b0 <__aeabi_dmul>
 8005556:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800555a:	f7fb faaf 	bl	8000abc <__aeabi_dcmpge>
 800555e:	4646      	mov	r6, r8
 8005560:	4647      	mov	r7, r8
 8005562:	2800      	cmp	r0, #0
 8005564:	f040 822d 	bne.w	80059c2 <_dtoa_r+0x8fa>
 8005568:	9b06      	ldr	r3, [sp, #24]
 800556a:	9a06      	ldr	r2, [sp, #24]
 800556c:	1c5d      	adds	r5, r3, #1
 800556e:	2331      	movs	r3, #49	; 0x31
 8005570:	f10a 0a01 	add.w	sl, sl, #1
 8005574:	7013      	strb	r3, [r2, #0]
 8005576:	e228      	b.n	80059ca <_dtoa_r+0x902>
 8005578:	07f2      	lsls	r2, r6, #31
 800557a:	d505      	bpl.n	8005588 <_dtoa_r+0x4c0>
 800557c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005580:	f7fb f816 	bl	80005b0 <__aeabi_dmul>
 8005584:	2301      	movs	r3, #1
 8005586:	3501      	adds	r5, #1
 8005588:	1076      	asrs	r6, r6, #1
 800558a:	3708      	adds	r7, #8
 800558c:	e76e      	b.n	800546c <_dtoa_r+0x3a4>
 800558e:	2502      	movs	r5, #2
 8005590:	e771      	b.n	8005476 <_dtoa_r+0x3ae>
 8005592:	4657      	mov	r7, sl
 8005594:	4646      	mov	r6, r8
 8005596:	e790      	b.n	80054ba <_dtoa_r+0x3f2>
 8005598:	4b4d      	ldr	r3, [pc, #308]	; (80056d0 <_dtoa_r+0x608>)
 800559a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800559e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80055a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d048      	beq.n	800563a <_dtoa_r+0x572>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	2000      	movs	r0, #0
 80055ae:	494e      	ldr	r1, [pc, #312]	; (80056e8 <_dtoa_r+0x620>)
 80055b0:	f7fb f928 	bl	8000804 <__aeabi_ddiv>
 80055b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055b8:	f7fa fe42 	bl	8000240 <__aeabi_dsub>
 80055bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80055c0:	9d06      	ldr	r5, [sp, #24]
 80055c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c6:	f7fb faa3 	bl	8000b10 <__aeabi_d2iz>
 80055ca:	9011      	str	r0, [sp, #68]	; 0x44
 80055cc:	f7fa ff86 	bl	80004dc <__aeabi_i2d>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055d8:	f7fa fe32 	bl	8000240 <__aeabi_dsub>
 80055dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e2:	3330      	adds	r3, #48	; 0x30
 80055e4:	f805 3b01 	strb.w	r3, [r5], #1
 80055e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055ec:	f7fb fa52 	bl	8000a94 <__aeabi_dcmplt>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d163      	bne.n	80056bc <_dtoa_r+0x5f4>
 80055f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055f8:	2000      	movs	r0, #0
 80055fa:	4937      	ldr	r1, [pc, #220]	; (80056d8 <_dtoa_r+0x610>)
 80055fc:	f7fa fe20 	bl	8000240 <__aeabi_dsub>
 8005600:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005604:	f7fb fa46 	bl	8000a94 <__aeabi_dcmplt>
 8005608:	2800      	cmp	r0, #0
 800560a:	f040 80b5 	bne.w	8005778 <_dtoa_r+0x6b0>
 800560e:	9b06      	ldr	r3, [sp, #24]
 8005610:	1aeb      	subs	r3, r5, r3
 8005612:	429e      	cmp	r6, r3
 8005614:	f77f af7c 	ble.w	8005510 <_dtoa_r+0x448>
 8005618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800561c:	2200      	movs	r2, #0
 800561e:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <_dtoa_r+0x614>)
 8005620:	f7fa ffc6 	bl	80005b0 <__aeabi_dmul>
 8005624:	2200      	movs	r2, #0
 8005626:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800562a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <_dtoa_r+0x614>)
 8005630:	f7fa ffbe 	bl	80005b0 <__aeabi_dmul>
 8005634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005638:	e7c3      	b.n	80055c2 <_dtoa_r+0x4fa>
 800563a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800563e:	f7fa ffb7 	bl	80005b0 <__aeabi_dmul>
 8005642:	9b06      	ldr	r3, [sp, #24]
 8005644:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005648:	199d      	adds	r5, r3, r6
 800564a:	461e      	mov	r6, r3
 800564c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005650:	f7fb fa5e 	bl	8000b10 <__aeabi_d2iz>
 8005654:	9011      	str	r0, [sp, #68]	; 0x44
 8005656:	f7fa ff41 	bl	80004dc <__aeabi_i2d>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005662:	f7fa fded 	bl	8000240 <__aeabi_dsub>
 8005666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800566c:	3330      	adds	r3, #48	; 0x30
 800566e:	f806 3b01 	strb.w	r3, [r6], #1
 8005672:	42ae      	cmp	r6, r5
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	d124      	bne.n	80056c4 <_dtoa_r+0x5fc>
 800567a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <_dtoa_r+0x620>)
 8005680:	f7fa fde0 	bl	8000244 <__adddf3>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800568c:	f7fb fa20 	bl	8000ad0 <__aeabi_dcmpgt>
 8005690:	2800      	cmp	r0, #0
 8005692:	d171      	bne.n	8005778 <_dtoa_r+0x6b0>
 8005694:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005698:	2000      	movs	r0, #0
 800569a:	4913      	ldr	r1, [pc, #76]	; (80056e8 <_dtoa_r+0x620>)
 800569c:	f7fa fdd0 	bl	8000240 <__aeabi_dsub>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056a8:	f7fb f9f4 	bl	8000a94 <__aeabi_dcmplt>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	f43f af2f 	beq.w	8005510 <_dtoa_r+0x448>
 80056b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056b6:	1e6a      	subs	r2, r5, #1
 80056b8:	2b30      	cmp	r3, #48	; 0x30
 80056ba:	d001      	beq.n	80056c0 <_dtoa_r+0x5f8>
 80056bc:	46ba      	mov	sl, r7
 80056be:	e04a      	b.n	8005756 <_dtoa_r+0x68e>
 80056c0:	4615      	mov	r5, r2
 80056c2:	e7f6      	b.n	80056b2 <_dtoa_r+0x5ea>
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <_dtoa_r+0x614>)
 80056c6:	f7fa ff73 	bl	80005b0 <__aeabi_dmul>
 80056ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ce:	e7bd      	b.n	800564c <_dtoa_r+0x584>
 80056d0:	08007148 	.word	0x08007148
 80056d4:	08007120 	.word	0x08007120
 80056d8:	3ff00000 	.word	0x3ff00000
 80056dc:	40240000 	.word	0x40240000
 80056e0:	401c0000 	.word	0x401c0000
 80056e4:	40140000 	.word	0x40140000
 80056e8:	3fe00000 	.word	0x3fe00000
 80056ec:	9d06      	ldr	r5, [sp, #24]
 80056ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f6:	4630      	mov	r0, r6
 80056f8:	4639      	mov	r1, r7
 80056fa:	f7fb f883 	bl	8000804 <__aeabi_ddiv>
 80056fe:	f7fb fa07 	bl	8000b10 <__aeabi_d2iz>
 8005702:	4681      	mov	r9, r0
 8005704:	f7fa feea 	bl	80004dc <__aeabi_i2d>
 8005708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800570c:	f7fa ff50 	bl	80005b0 <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4630      	mov	r0, r6
 8005716:	4639      	mov	r1, r7
 8005718:	f7fa fd92 	bl	8000240 <__aeabi_dsub>
 800571c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005720:	f805 6b01 	strb.w	r6, [r5], #1
 8005724:	9e06      	ldr	r6, [sp, #24]
 8005726:	4602      	mov	r2, r0
 8005728:	1bae      	subs	r6, r5, r6
 800572a:	45b0      	cmp	r8, r6
 800572c:	460b      	mov	r3, r1
 800572e:	d135      	bne.n	800579c <_dtoa_r+0x6d4>
 8005730:	f7fa fd88 	bl	8000244 <__adddf3>
 8005734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005738:	4606      	mov	r6, r0
 800573a:	460f      	mov	r7, r1
 800573c:	f7fb f9c8 	bl	8000ad0 <__aeabi_dcmpgt>
 8005740:	b9c8      	cbnz	r0, 8005776 <_dtoa_r+0x6ae>
 8005742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005746:	4630      	mov	r0, r6
 8005748:	4639      	mov	r1, r7
 800574a:	f7fb f999 	bl	8000a80 <__aeabi_dcmpeq>
 800574e:	b110      	cbz	r0, 8005756 <_dtoa_r+0x68e>
 8005750:	f019 0f01 	tst.w	r9, #1
 8005754:	d10f      	bne.n	8005776 <_dtoa_r+0x6ae>
 8005756:	4659      	mov	r1, fp
 8005758:	4620      	mov	r0, r4
 800575a:	f000 fe01 	bl	8006360 <_Bfree>
 800575e:	2300      	movs	r3, #0
 8005760:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005762:	702b      	strb	r3, [r5, #0]
 8005764:	f10a 0301 	add.w	r3, sl, #1
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800576c:	2b00      	cmp	r3, #0
 800576e:	f43f acf3 	beq.w	8005158 <_dtoa_r+0x90>
 8005772:	601d      	str	r5, [r3, #0]
 8005774:	e4f0      	b.n	8005158 <_dtoa_r+0x90>
 8005776:	4657      	mov	r7, sl
 8005778:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800577c:	1e6b      	subs	r3, r5, #1
 800577e:	2a39      	cmp	r2, #57	; 0x39
 8005780:	d106      	bne.n	8005790 <_dtoa_r+0x6c8>
 8005782:	9a06      	ldr	r2, [sp, #24]
 8005784:	429a      	cmp	r2, r3
 8005786:	d107      	bne.n	8005798 <_dtoa_r+0x6d0>
 8005788:	2330      	movs	r3, #48	; 0x30
 800578a:	7013      	strb	r3, [r2, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	3701      	adds	r7, #1
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	3201      	adds	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e791      	b.n	80056bc <_dtoa_r+0x5f4>
 8005798:	461d      	mov	r5, r3
 800579a:	e7ed      	b.n	8005778 <_dtoa_r+0x6b0>
 800579c:	2200      	movs	r2, #0
 800579e:	4b99      	ldr	r3, [pc, #612]	; (8005a04 <_dtoa_r+0x93c>)
 80057a0:	f7fa ff06 	bl	80005b0 <__aeabi_dmul>
 80057a4:	2200      	movs	r2, #0
 80057a6:	2300      	movs	r3, #0
 80057a8:	4606      	mov	r6, r0
 80057aa:	460f      	mov	r7, r1
 80057ac:	f7fb f968 	bl	8000a80 <__aeabi_dcmpeq>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d09e      	beq.n	80056f2 <_dtoa_r+0x62a>
 80057b4:	e7cf      	b.n	8005756 <_dtoa_r+0x68e>
 80057b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	f000 8088 	beq.w	80058ce <_dtoa_r+0x806>
 80057be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80057c0:	2a01      	cmp	r2, #1
 80057c2:	dc6d      	bgt.n	80058a0 <_dtoa_r+0x7d8>
 80057c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	d066      	beq.n	8005898 <_dtoa_r+0x7d0>
 80057ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057ce:	464d      	mov	r5, r9
 80057d0:	9e08      	ldr	r6, [sp, #32]
 80057d2:	9a07      	ldr	r2, [sp, #28]
 80057d4:	2101      	movs	r1, #1
 80057d6:	441a      	add	r2, r3
 80057d8:	4620      	mov	r0, r4
 80057da:	4499      	add	r9, r3
 80057dc:	9207      	str	r2, [sp, #28]
 80057de:	f000 fe9d 	bl	800651c <__i2b>
 80057e2:	4607      	mov	r7, r0
 80057e4:	2d00      	cmp	r5, #0
 80057e6:	dd0b      	ble.n	8005800 <_dtoa_r+0x738>
 80057e8:	9b07      	ldr	r3, [sp, #28]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	dd08      	ble.n	8005800 <_dtoa_r+0x738>
 80057ee:	42ab      	cmp	r3, r5
 80057f0:	bfa8      	it	ge
 80057f2:	462b      	movge	r3, r5
 80057f4:	9a07      	ldr	r2, [sp, #28]
 80057f6:	eba9 0903 	sub.w	r9, r9, r3
 80057fa:	1aed      	subs	r5, r5, r3
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	9307      	str	r3, [sp, #28]
 8005800:	9b08      	ldr	r3, [sp, #32]
 8005802:	b1eb      	cbz	r3, 8005840 <_dtoa_r+0x778>
 8005804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d065      	beq.n	80058d6 <_dtoa_r+0x80e>
 800580a:	b18e      	cbz	r6, 8005830 <_dtoa_r+0x768>
 800580c:	4639      	mov	r1, r7
 800580e:	4632      	mov	r2, r6
 8005810:	4620      	mov	r0, r4
 8005812:	f000 ff21 	bl	8006658 <__pow5mult>
 8005816:	465a      	mov	r2, fp
 8005818:	4601      	mov	r1, r0
 800581a:	4607      	mov	r7, r0
 800581c:	4620      	mov	r0, r4
 800581e:	f000 fe86 	bl	800652e <__multiply>
 8005822:	4659      	mov	r1, fp
 8005824:	900a      	str	r0, [sp, #40]	; 0x28
 8005826:	4620      	mov	r0, r4
 8005828:	f000 fd9a 	bl	8006360 <_Bfree>
 800582c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582e:	469b      	mov	fp, r3
 8005830:	9b08      	ldr	r3, [sp, #32]
 8005832:	1b9a      	subs	r2, r3, r6
 8005834:	d004      	beq.n	8005840 <_dtoa_r+0x778>
 8005836:	4659      	mov	r1, fp
 8005838:	4620      	mov	r0, r4
 800583a:	f000 ff0d 	bl	8006658 <__pow5mult>
 800583e:	4683      	mov	fp, r0
 8005840:	2101      	movs	r1, #1
 8005842:	4620      	mov	r0, r4
 8005844:	f000 fe6a 	bl	800651c <__i2b>
 8005848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800584a:	4606      	mov	r6, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 81c6 	beq.w	8005bde <_dtoa_r+0xb16>
 8005852:	461a      	mov	r2, r3
 8005854:	4601      	mov	r1, r0
 8005856:	4620      	mov	r0, r4
 8005858:	f000 fefe 	bl	8006658 <__pow5mult>
 800585c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800585e:	4606      	mov	r6, r0
 8005860:	2b01      	cmp	r3, #1
 8005862:	dc3e      	bgt.n	80058e2 <_dtoa_r+0x81a>
 8005864:	9b02      	ldr	r3, [sp, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d137      	bne.n	80058da <_dtoa_r+0x812>
 800586a:	9b03      	ldr	r3, [sp, #12]
 800586c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005870:	2b00      	cmp	r3, #0
 8005872:	d134      	bne.n	80058de <_dtoa_r+0x816>
 8005874:	9b03      	ldr	r3, [sp, #12]
 8005876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800587a:	0d1b      	lsrs	r3, r3, #20
 800587c:	051b      	lsls	r3, r3, #20
 800587e:	b12b      	cbz	r3, 800588c <_dtoa_r+0x7c4>
 8005880:	9b07      	ldr	r3, [sp, #28]
 8005882:	f109 0901 	add.w	r9, r9, #1
 8005886:	3301      	adds	r3, #1
 8005888:	9307      	str	r3, [sp, #28]
 800588a:	2301      	movs	r3, #1
 800588c:	9308      	str	r3, [sp, #32]
 800588e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005890:	2b00      	cmp	r3, #0
 8005892:	d128      	bne.n	80058e6 <_dtoa_r+0x81e>
 8005894:	2001      	movs	r0, #1
 8005896:	e02e      	b.n	80058f6 <_dtoa_r+0x82e>
 8005898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800589a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800589e:	e796      	b.n	80057ce <_dtoa_r+0x706>
 80058a0:	9b08      	ldr	r3, [sp, #32]
 80058a2:	f108 36ff 	add.w	r6, r8, #4294967295
 80058a6:	42b3      	cmp	r3, r6
 80058a8:	bfb7      	itett	lt
 80058aa:	9b08      	ldrlt	r3, [sp, #32]
 80058ac:	1b9e      	subge	r6, r3, r6
 80058ae:	1af2      	sublt	r2, r6, r3
 80058b0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80058b2:	bfbf      	itttt	lt
 80058b4:	9608      	strlt	r6, [sp, #32]
 80058b6:	189b      	addlt	r3, r3, r2
 80058b8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80058ba:	2600      	movlt	r6, #0
 80058bc:	f1b8 0f00 	cmp.w	r8, #0
 80058c0:	bfb9      	ittee	lt
 80058c2:	eba9 0508 	sublt.w	r5, r9, r8
 80058c6:	2300      	movlt	r3, #0
 80058c8:	464d      	movge	r5, r9
 80058ca:	4643      	movge	r3, r8
 80058cc:	e781      	b.n	80057d2 <_dtoa_r+0x70a>
 80058ce:	9e08      	ldr	r6, [sp, #32]
 80058d0:	464d      	mov	r5, r9
 80058d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80058d4:	e786      	b.n	80057e4 <_dtoa_r+0x71c>
 80058d6:	9a08      	ldr	r2, [sp, #32]
 80058d8:	e7ad      	b.n	8005836 <_dtoa_r+0x76e>
 80058da:	2300      	movs	r3, #0
 80058dc:	e7d6      	b.n	800588c <_dtoa_r+0x7c4>
 80058de:	9b02      	ldr	r3, [sp, #8]
 80058e0:	e7d4      	b.n	800588c <_dtoa_r+0x7c4>
 80058e2:	2300      	movs	r3, #0
 80058e4:	9308      	str	r3, [sp, #32]
 80058e6:	6933      	ldr	r3, [r6, #16]
 80058e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80058ec:	6918      	ldr	r0, [r3, #16]
 80058ee:	f000 fdc7 	bl	8006480 <__hi0bits>
 80058f2:	f1c0 0020 	rsb	r0, r0, #32
 80058f6:	9b07      	ldr	r3, [sp, #28]
 80058f8:	4418      	add	r0, r3
 80058fa:	f010 001f 	ands.w	r0, r0, #31
 80058fe:	d047      	beq.n	8005990 <_dtoa_r+0x8c8>
 8005900:	f1c0 0320 	rsb	r3, r0, #32
 8005904:	2b04      	cmp	r3, #4
 8005906:	dd3b      	ble.n	8005980 <_dtoa_r+0x8b8>
 8005908:	9b07      	ldr	r3, [sp, #28]
 800590a:	f1c0 001c 	rsb	r0, r0, #28
 800590e:	4481      	add	r9, r0
 8005910:	4405      	add	r5, r0
 8005912:	4403      	add	r3, r0
 8005914:	9307      	str	r3, [sp, #28]
 8005916:	f1b9 0f00 	cmp.w	r9, #0
 800591a:	dd05      	ble.n	8005928 <_dtoa_r+0x860>
 800591c:	4659      	mov	r1, fp
 800591e:	464a      	mov	r2, r9
 8005920:	4620      	mov	r0, r4
 8005922:	f000 fee7 	bl	80066f4 <__lshift>
 8005926:	4683      	mov	fp, r0
 8005928:	9b07      	ldr	r3, [sp, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	dd05      	ble.n	800593a <_dtoa_r+0x872>
 800592e:	4631      	mov	r1, r6
 8005930:	461a      	mov	r2, r3
 8005932:	4620      	mov	r0, r4
 8005934:	f000 fede 	bl	80066f4 <__lshift>
 8005938:	4606      	mov	r6, r0
 800593a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800593c:	b353      	cbz	r3, 8005994 <_dtoa_r+0x8cc>
 800593e:	4631      	mov	r1, r6
 8005940:	4658      	mov	r0, fp
 8005942:	f000 ff2b 	bl	800679c <__mcmp>
 8005946:	2800      	cmp	r0, #0
 8005948:	da24      	bge.n	8005994 <_dtoa_r+0x8cc>
 800594a:	2300      	movs	r3, #0
 800594c:	4659      	mov	r1, fp
 800594e:	220a      	movs	r2, #10
 8005950:	4620      	mov	r0, r4
 8005952:	f000 fd1c 	bl	800638e <__multadd>
 8005956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005958:	f10a 3aff 	add.w	sl, sl, #4294967295
 800595c:	4683      	mov	fp, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 8144 	beq.w	8005bec <_dtoa_r+0xb24>
 8005964:	2300      	movs	r3, #0
 8005966:	4639      	mov	r1, r7
 8005968:	220a      	movs	r2, #10
 800596a:	4620      	mov	r0, r4
 800596c:	f000 fd0f 	bl	800638e <__multadd>
 8005970:	9b04      	ldr	r3, [sp, #16]
 8005972:	4607      	mov	r7, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	dc4d      	bgt.n	8005a14 <_dtoa_r+0x94c>
 8005978:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800597a:	2b02      	cmp	r3, #2
 800597c:	dd4a      	ble.n	8005a14 <_dtoa_r+0x94c>
 800597e:	e011      	b.n	80059a4 <_dtoa_r+0x8dc>
 8005980:	d0c9      	beq.n	8005916 <_dtoa_r+0x84e>
 8005982:	9a07      	ldr	r2, [sp, #28]
 8005984:	331c      	adds	r3, #28
 8005986:	441a      	add	r2, r3
 8005988:	4499      	add	r9, r3
 800598a:	441d      	add	r5, r3
 800598c:	4613      	mov	r3, r2
 800598e:	e7c1      	b.n	8005914 <_dtoa_r+0x84c>
 8005990:	4603      	mov	r3, r0
 8005992:	e7f6      	b.n	8005982 <_dtoa_r+0x8ba>
 8005994:	f1b8 0f00 	cmp.w	r8, #0
 8005998:	dc36      	bgt.n	8005a08 <_dtoa_r+0x940>
 800599a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800599c:	2b02      	cmp	r3, #2
 800599e:	dd33      	ble.n	8005a08 <_dtoa_r+0x940>
 80059a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80059a4:	9b04      	ldr	r3, [sp, #16]
 80059a6:	b963      	cbnz	r3, 80059c2 <_dtoa_r+0x8fa>
 80059a8:	4631      	mov	r1, r6
 80059aa:	2205      	movs	r2, #5
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 fcee 	bl	800638e <__multadd>
 80059b2:	4601      	mov	r1, r0
 80059b4:	4606      	mov	r6, r0
 80059b6:	4658      	mov	r0, fp
 80059b8:	f000 fef0 	bl	800679c <__mcmp>
 80059bc:	2800      	cmp	r0, #0
 80059be:	f73f add3 	bgt.w	8005568 <_dtoa_r+0x4a0>
 80059c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80059c4:	9d06      	ldr	r5, [sp, #24]
 80059c6:	ea6f 0a03 	mvn.w	sl, r3
 80059ca:	f04f 0900 	mov.w	r9, #0
 80059ce:	4631      	mov	r1, r6
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 fcc5 	bl	8006360 <_Bfree>
 80059d6:	2f00      	cmp	r7, #0
 80059d8:	f43f aebd 	beq.w	8005756 <_dtoa_r+0x68e>
 80059dc:	f1b9 0f00 	cmp.w	r9, #0
 80059e0:	d005      	beq.n	80059ee <_dtoa_r+0x926>
 80059e2:	45b9      	cmp	r9, r7
 80059e4:	d003      	beq.n	80059ee <_dtoa_r+0x926>
 80059e6:	4649      	mov	r1, r9
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 fcb9 	bl	8006360 <_Bfree>
 80059ee:	4639      	mov	r1, r7
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 fcb5 	bl	8006360 <_Bfree>
 80059f6:	e6ae      	b.n	8005756 <_dtoa_r+0x68e>
 80059f8:	2600      	movs	r6, #0
 80059fa:	4637      	mov	r7, r6
 80059fc:	e7e1      	b.n	80059c2 <_dtoa_r+0x8fa>
 80059fe:	46ba      	mov	sl, r7
 8005a00:	4637      	mov	r7, r6
 8005a02:	e5b1      	b.n	8005568 <_dtoa_r+0x4a0>
 8005a04:	40240000 	.word	0x40240000
 8005a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80f3 	beq.w	8005bfa <_dtoa_r+0xb32>
 8005a14:	2d00      	cmp	r5, #0
 8005a16:	dd05      	ble.n	8005a24 <_dtoa_r+0x95c>
 8005a18:	4639      	mov	r1, r7
 8005a1a:	462a      	mov	r2, r5
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 fe69 	bl	80066f4 <__lshift>
 8005a22:	4607      	mov	r7, r0
 8005a24:	9b08      	ldr	r3, [sp, #32]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d04c      	beq.n	8005ac4 <_dtoa_r+0x9fc>
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f000 fc63 	bl	80062f8 <_Balloc>
 8005a32:	4605      	mov	r5, r0
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	f107 010c 	add.w	r1, r7, #12
 8005a3a:	3202      	adds	r2, #2
 8005a3c:	0092      	lsls	r2, r2, #2
 8005a3e:	300c      	adds	r0, #12
 8005a40:	f7fd fd68 	bl	8003514 <memcpy>
 8005a44:	2201      	movs	r2, #1
 8005a46:	4629      	mov	r1, r5
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f000 fe53 	bl	80066f4 <__lshift>
 8005a4e:	46b9      	mov	r9, r7
 8005a50:	4607      	mov	r7, r0
 8005a52:	9b06      	ldr	r3, [sp, #24]
 8005a54:	9307      	str	r3, [sp, #28]
 8005a56:	9b02      	ldr	r3, [sp, #8]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	9308      	str	r3, [sp, #32]
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4658      	mov	r0, fp
 8005a62:	f7ff faa1 	bl	8004fa8 <quorem>
 8005a66:	4649      	mov	r1, r9
 8005a68:	4605      	mov	r5, r0
 8005a6a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a6e:	4658      	mov	r0, fp
 8005a70:	f000 fe94 	bl	800679c <__mcmp>
 8005a74:	463a      	mov	r2, r7
 8005a76:	9002      	str	r0, [sp, #8]
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f000 fea8 	bl	80067d0 <__mdiff>
 8005a80:	68c3      	ldr	r3, [r0, #12]
 8005a82:	4602      	mov	r2, r0
 8005a84:	bb03      	cbnz	r3, 8005ac8 <_dtoa_r+0xa00>
 8005a86:	4601      	mov	r1, r0
 8005a88:	9009      	str	r0, [sp, #36]	; 0x24
 8005a8a:	4658      	mov	r0, fp
 8005a8c:	f000 fe86 	bl	800679c <__mcmp>
 8005a90:	4603      	mov	r3, r0
 8005a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a94:	4611      	mov	r1, r2
 8005a96:	4620      	mov	r0, r4
 8005a98:	9309      	str	r3, [sp, #36]	; 0x24
 8005a9a:	f000 fc61 	bl	8006360 <_Bfree>
 8005a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa0:	b9a3      	cbnz	r3, 8005acc <_dtoa_r+0xa04>
 8005aa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005aa4:	b992      	cbnz	r2, 8005acc <_dtoa_r+0xa04>
 8005aa6:	9a08      	ldr	r2, [sp, #32]
 8005aa8:	b982      	cbnz	r2, 8005acc <_dtoa_r+0xa04>
 8005aaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005aae:	d029      	beq.n	8005b04 <_dtoa_r+0xa3c>
 8005ab0:	9b02      	ldr	r3, [sp, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	dd01      	ble.n	8005aba <_dtoa_r+0x9f2>
 8005ab6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005aba:	9b07      	ldr	r3, [sp, #28]
 8005abc:	1c5d      	adds	r5, r3, #1
 8005abe:	f883 8000 	strb.w	r8, [r3]
 8005ac2:	e784      	b.n	80059ce <_dtoa_r+0x906>
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	e7c2      	b.n	8005a4e <_dtoa_r+0x986>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e7e3      	b.n	8005a94 <_dtoa_r+0x9cc>
 8005acc:	9a02      	ldr	r2, [sp, #8]
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	db04      	blt.n	8005adc <_dtoa_r+0xa14>
 8005ad2:	d123      	bne.n	8005b1c <_dtoa_r+0xa54>
 8005ad4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ad6:	bb0a      	cbnz	r2, 8005b1c <_dtoa_r+0xa54>
 8005ad8:	9a08      	ldr	r2, [sp, #32]
 8005ada:	b9fa      	cbnz	r2, 8005b1c <_dtoa_r+0xa54>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	ddec      	ble.n	8005aba <_dtoa_r+0x9f2>
 8005ae0:	4659      	mov	r1, fp
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 fe05 	bl	80066f4 <__lshift>
 8005aea:	4631      	mov	r1, r6
 8005aec:	4683      	mov	fp, r0
 8005aee:	f000 fe55 	bl	800679c <__mcmp>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	dc03      	bgt.n	8005afe <_dtoa_r+0xa36>
 8005af6:	d1e0      	bne.n	8005aba <_dtoa_r+0x9f2>
 8005af8:	f018 0f01 	tst.w	r8, #1
 8005afc:	d0dd      	beq.n	8005aba <_dtoa_r+0x9f2>
 8005afe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b02:	d1d8      	bne.n	8005ab6 <_dtoa_r+0x9ee>
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	9a07      	ldr	r2, [sp, #28]
 8005b08:	1c5d      	adds	r5, r3, #1
 8005b0a:	2339      	movs	r3, #57	; 0x39
 8005b0c:	7013      	strb	r3, [r2, #0]
 8005b0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b12:	1e6a      	subs	r2, r5, #1
 8005b14:	2b39      	cmp	r3, #57	; 0x39
 8005b16:	d04d      	beq.n	8005bb4 <_dtoa_r+0xaec>
 8005b18:	3301      	adds	r3, #1
 8005b1a:	e052      	b.n	8005bc2 <_dtoa_r+0xafa>
 8005b1c:	9a07      	ldr	r2, [sp, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f102 0501 	add.w	r5, r2, #1
 8005b24:	dd06      	ble.n	8005b34 <_dtoa_r+0xa6c>
 8005b26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b2a:	d0eb      	beq.n	8005b04 <_dtoa_r+0xa3c>
 8005b2c:	f108 0801 	add.w	r8, r8, #1
 8005b30:	9b07      	ldr	r3, [sp, #28]
 8005b32:	e7c4      	b.n	8005abe <_dtoa_r+0x9f6>
 8005b34:	9b06      	ldr	r3, [sp, #24]
 8005b36:	9a04      	ldr	r2, [sp, #16]
 8005b38:	1aeb      	subs	r3, r5, r3
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005b40:	d021      	beq.n	8005b86 <_dtoa_r+0xabe>
 8005b42:	4659      	mov	r1, fp
 8005b44:	2300      	movs	r3, #0
 8005b46:	220a      	movs	r2, #10
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fc20 	bl	800638e <__multadd>
 8005b4e:	45b9      	cmp	r9, r7
 8005b50:	4683      	mov	fp, r0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	f04f 020a 	mov.w	r2, #10
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	d105      	bne.n	8005b6c <_dtoa_r+0xaa4>
 8005b60:	f000 fc15 	bl	800638e <__multadd>
 8005b64:	4681      	mov	r9, r0
 8005b66:	4607      	mov	r7, r0
 8005b68:	9507      	str	r5, [sp, #28]
 8005b6a:	e778      	b.n	8005a5e <_dtoa_r+0x996>
 8005b6c:	f000 fc0f 	bl	800638e <__multadd>
 8005b70:	4639      	mov	r1, r7
 8005b72:	4681      	mov	r9, r0
 8005b74:	2300      	movs	r3, #0
 8005b76:	220a      	movs	r2, #10
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 fc08 	bl	800638e <__multadd>
 8005b7e:	4607      	mov	r7, r0
 8005b80:	e7f2      	b.n	8005b68 <_dtoa_r+0xaa0>
 8005b82:	f04f 0900 	mov.w	r9, #0
 8005b86:	4659      	mov	r1, fp
 8005b88:	2201      	movs	r2, #1
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f000 fdb2 	bl	80066f4 <__lshift>
 8005b90:	4631      	mov	r1, r6
 8005b92:	4683      	mov	fp, r0
 8005b94:	f000 fe02 	bl	800679c <__mcmp>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	dcb8      	bgt.n	8005b0e <_dtoa_r+0xa46>
 8005b9c:	d102      	bne.n	8005ba4 <_dtoa_r+0xadc>
 8005b9e:	f018 0f01 	tst.w	r8, #1
 8005ba2:	d1b4      	bne.n	8005b0e <_dtoa_r+0xa46>
 8005ba4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ba8:	1e6a      	subs	r2, r5, #1
 8005baa:	2b30      	cmp	r3, #48	; 0x30
 8005bac:	f47f af0f 	bne.w	80059ce <_dtoa_r+0x906>
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	e7f7      	b.n	8005ba4 <_dtoa_r+0xadc>
 8005bb4:	9b06      	ldr	r3, [sp, #24]
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d105      	bne.n	8005bc6 <_dtoa_r+0xafe>
 8005bba:	2331      	movs	r3, #49	; 0x31
 8005bbc:	9a06      	ldr	r2, [sp, #24]
 8005bbe:	f10a 0a01 	add.w	sl, sl, #1
 8005bc2:	7013      	strb	r3, [r2, #0]
 8005bc4:	e703      	b.n	80059ce <_dtoa_r+0x906>
 8005bc6:	4615      	mov	r5, r2
 8005bc8:	e7a1      	b.n	8005b0e <_dtoa_r+0xa46>
 8005bca:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <_dtoa_r+0xb60>)
 8005bcc:	f7ff bae1 	b.w	8005192 <_dtoa_r+0xca>
 8005bd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f47f aabb 	bne.w	800514e <_dtoa_r+0x86>
 8005bd8:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <_dtoa_r+0xb64>)
 8005bda:	f7ff bada 	b.w	8005192 <_dtoa_r+0xca>
 8005bde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	f77f ae3f 	ble.w	8005864 <_dtoa_r+0x79c>
 8005be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005be8:	9308      	str	r3, [sp, #32]
 8005bea:	e653      	b.n	8005894 <_dtoa_r+0x7cc>
 8005bec:	9b04      	ldr	r3, [sp, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	dc03      	bgt.n	8005bfa <_dtoa_r+0xb32>
 8005bf2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	f73f aed5 	bgt.w	80059a4 <_dtoa_r+0x8dc>
 8005bfa:	9d06      	ldr	r5, [sp, #24]
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4658      	mov	r0, fp
 8005c00:	f7ff f9d2 	bl	8004fa8 <quorem>
 8005c04:	9b06      	ldr	r3, [sp, #24]
 8005c06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005c0a:	f805 8b01 	strb.w	r8, [r5], #1
 8005c0e:	9a04      	ldr	r2, [sp, #16]
 8005c10:	1aeb      	subs	r3, r5, r3
 8005c12:	429a      	cmp	r2, r3
 8005c14:	ddb5      	ble.n	8005b82 <_dtoa_r+0xaba>
 8005c16:	4659      	mov	r1, fp
 8005c18:	2300      	movs	r3, #0
 8005c1a:	220a      	movs	r2, #10
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f000 fbb6 	bl	800638e <__multadd>
 8005c22:	4683      	mov	fp, r0
 8005c24:	e7ea      	b.n	8005bfc <_dtoa_r+0xb34>
 8005c26:	bf00      	nop
 8005c28:	0800708c 	.word	0x0800708c
 8005c2c:	08007108 	.word	0x08007108

08005c30 <rshift>:
 8005c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c32:	6906      	ldr	r6, [r0, #16]
 8005c34:	114b      	asrs	r3, r1, #5
 8005c36:	429e      	cmp	r6, r3
 8005c38:	f100 0414 	add.w	r4, r0, #20
 8005c3c:	dd31      	ble.n	8005ca2 <rshift+0x72>
 8005c3e:	f011 011f 	ands.w	r1, r1, #31
 8005c42:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005c46:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005c4a:	d108      	bne.n	8005c5e <rshift+0x2e>
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	42b2      	cmp	r2, r6
 8005c50:	460b      	mov	r3, r1
 8005c52:	d211      	bcs.n	8005c78 <rshift+0x48>
 8005c54:	f852 3b04 	ldr.w	r3, [r2], #4
 8005c58:	f841 3b04 	str.w	r3, [r1], #4
 8005c5c:	e7f7      	b.n	8005c4e <rshift+0x1e>
 8005c5e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005c62:	4623      	mov	r3, r4
 8005c64:	f1c1 0c20 	rsb	ip, r1, #32
 8005c68:	40cd      	lsrs	r5, r1
 8005c6a:	3204      	adds	r2, #4
 8005c6c:	42b2      	cmp	r2, r6
 8005c6e:	4617      	mov	r7, r2
 8005c70:	d30d      	bcc.n	8005c8e <rshift+0x5e>
 8005c72:	601d      	str	r5, [r3, #0]
 8005c74:	b105      	cbz	r5, 8005c78 <rshift+0x48>
 8005c76:	3304      	adds	r3, #4
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	eba3 0204 	sub.w	r2, r3, r4
 8005c7e:	bf08      	it	eq
 8005c80:	2300      	moveq	r3, #0
 8005c82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005c86:	6102      	str	r2, [r0, #16]
 8005c88:	bf08      	it	eq
 8005c8a:	6143      	streq	r3, [r0, #20]
 8005c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c8e:	683f      	ldr	r7, [r7, #0]
 8005c90:	fa07 f70c 	lsl.w	r7, r7, ip
 8005c94:	433d      	orrs	r5, r7
 8005c96:	f843 5b04 	str.w	r5, [r3], #4
 8005c9a:	f852 5b04 	ldr.w	r5, [r2], #4
 8005c9e:	40cd      	lsrs	r5, r1
 8005ca0:	e7e4      	b.n	8005c6c <rshift+0x3c>
 8005ca2:	4623      	mov	r3, r4
 8005ca4:	e7e8      	b.n	8005c78 <rshift+0x48>

08005ca6 <__hexdig_fun>:
 8005ca6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005caa:	2b09      	cmp	r3, #9
 8005cac:	d802      	bhi.n	8005cb4 <__hexdig_fun+0xe>
 8005cae:	3820      	subs	r0, #32
 8005cb0:	b2c0      	uxtb	r0, r0
 8005cb2:	4770      	bx	lr
 8005cb4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005cb8:	2b05      	cmp	r3, #5
 8005cba:	d801      	bhi.n	8005cc0 <__hexdig_fun+0x1a>
 8005cbc:	3847      	subs	r0, #71	; 0x47
 8005cbe:	e7f7      	b.n	8005cb0 <__hexdig_fun+0xa>
 8005cc0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d801      	bhi.n	8005ccc <__hexdig_fun+0x26>
 8005cc8:	3827      	subs	r0, #39	; 0x27
 8005cca:	e7f1      	b.n	8005cb0 <__hexdig_fun+0xa>
 8005ccc:	2000      	movs	r0, #0
 8005cce:	4770      	bx	lr

08005cd0 <__gethex>:
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	b08b      	sub	sp, #44	; 0x2c
 8005cd6:	9002      	str	r0, [sp, #8]
 8005cd8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005cda:	468a      	mov	sl, r1
 8005cdc:	4690      	mov	r8, r2
 8005cde:	9306      	str	r3, [sp, #24]
 8005ce0:	f000 fad1 	bl	8006286 <__localeconv_l>
 8005ce4:	6803      	ldr	r3, [r0, #0]
 8005ce6:	f04f 0b00 	mov.w	fp, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	9303      	str	r3, [sp, #12]
 8005cee:	f7fa fa9b 	bl	8000228 <strlen>
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	9001      	str	r0, [sp, #4]
 8005cf6:	4403      	add	r3, r0
 8005cf8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005cfc:	9307      	str	r3, [sp, #28]
 8005cfe:	f8da 3000 	ldr.w	r3, [sl]
 8005d02:	3302      	adds	r3, #2
 8005d04:	461f      	mov	r7, r3
 8005d06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005d0a:	2830      	cmp	r0, #48	; 0x30
 8005d0c:	d06c      	beq.n	8005de8 <__gethex+0x118>
 8005d0e:	f7ff ffca 	bl	8005ca6 <__hexdig_fun>
 8005d12:	4604      	mov	r4, r0
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d16a      	bne.n	8005dee <__gethex+0x11e>
 8005d18:	9a01      	ldr	r2, [sp, #4]
 8005d1a:	9903      	ldr	r1, [sp, #12]
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f001 f8f9 	bl	8006f14 <strncmp>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d166      	bne.n	8005df4 <__gethex+0x124>
 8005d26:	9b01      	ldr	r3, [sp, #4]
 8005d28:	5cf8      	ldrb	r0, [r7, r3]
 8005d2a:	18fe      	adds	r6, r7, r3
 8005d2c:	f7ff ffbb 	bl	8005ca6 <__hexdig_fun>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d062      	beq.n	8005dfa <__gethex+0x12a>
 8005d34:	4633      	mov	r3, r6
 8005d36:	7818      	ldrb	r0, [r3, #0]
 8005d38:	461f      	mov	r7, r3
 8005d3a:	2830      	cmp	r0, #48	; 0x30
 8005d3c:	f103 0301 	add.w	r3, r3, #1
 8005d40:	d0f9      	beq.n	8005d36 <__gethex+0x66>
 8005d42:	f7ff ffb0 	bl	8005ca6 <__hexdig_fun>
 8005d46:	fab0 f580 	clz	r5, r0
 8005d4a:	4634      	mov	r4, r6
 8005d4c:	f04f 0b01 	mov.w	fp, #1
 8005d50:	096d      	lsrs	r5, r5, #5
 8005d52:	463a      	mov	r2, r7
 8005d54:	4616      	mov	r6, r2
 8005d56:	7830      	ldrb	r0, [r6, #0]
 8005d58:	3201      	adds	r2, #1
 8005d5a:	f7ff ffa4 	bl	8005ca6 <__hexdig_fun>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d1f8      	bne.n	8005d54 <__gethex+0x84>
 8005d62:	9a01      	ldr	r2, [sp, #4]
 8005d64:	9903      	ldr	r1, [sp, #12]
 8005d66:	4630      	mov	r0, r6
 8005d68:	f001 f8d4 	bl	8006f14 <strncmp>
 8005d6c:	b950      	cbnz	r0, 8005d84 <__gethex+0xb4>
 8005d6e:	b954      	cbnz	r4, 8005d86 <__gethex+0xb6>
 8005d70:	9b01      	ldr	r3, [sp, #4]
 8005d72:	18f4      	adds	r4, r6, r3
 8005d74:	4622      	mov	r2, r4
 8005d76:	4616      	mov	r6, r2
 8005d78:	7830      	ldrb	r0, [r6, #0]
 8005d7a:	3201      	adds	r2, #1
 8005d7c:	f7ff ff93 	bl	8005ca6 <__hexdig_fun>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d1f8      	bne.n	8005d76 <__gethex+0xa6>
 8005d84:	b10c      	cbz	r4, 8005d8a <__gethex+0xba>
 8005d86:	1ba4      	subs	r4, r4, r6
 8005d88:	00a4      	lsls	r4, r4, #2
 8005d8a:	7833      	ldrb	r3, [r6, #0]
 8005d8c:	2b50      	cmp	r3, #80	; 0x50
 8005d8e:	d001      	beq.n	8005d94 <__gethex+0xc4>
 8005d90:	2b70      	cmp	r3, #112	; 0x70
 8005d92:	d140      	bne.n	8005e16 <__gethex+0x146>
 8005d94:	7873      	ldrb	r3, [r6, #1]
 8005d96:	2b2b      	cmp	r3, #43	; 0x2b
 8005d98:	d031      	beq.n	8005dfe <__gethex+0x12e>
 8005d9a:	2b2d      	cmp	r3, #45	; 0x2d
 8005d9c:	d033      	beq.n	8005e06 <__gethex+0x136>
 8005d9e:	f04f 0900 	mov.w	r9, #0
 8005da2:	1c71      	adds	r1, r6, #1
 8005da4:	7808      	ldrb	r0, [r1, #0]
 8005da6:	f7ff ff7e 	bl	8005ca6 <__hexdig_fun>
 8005daa:	1e43      	subs	r3, r0, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b18      	cmp	r3, #24
 8005db0:	d831      	bhi.n	8005e16 <__gethex+0x146>
 8005db2:	f1a0 0210 	sub.w	r2, r0, #16
 8005db6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005dba:	f7ff ff74 	bl	8005ca6 <__hexdig_fun>
 8005dbe:	1e43      	subs	r3, r0, #1
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b18      	cmp	r3, #24
 8005dc4:	d922      	bls.n	8005e0c <__gethex+0x13c>
 8005dc6:	f1b9 0f00 	cmp.w	r9, #0
 8005dca:	d000      	beq.n	8005dce <__gethex+0xfe>
 8005dcc:	4252      	negs	r2, r2
 8005dce:	4414      	add	r4, r2
 8005dd0:	f8ca 1000 	str.w	r1, [sl]
 8005dd4:	b30d      	cbz	r5, 8005e1a <__gethex+0x14a>
 8005dd6:	f1bb 0f00 	cmp.w	fp, #0
 8005dda:	bf0c      	ite	eq
 8005ddc:	2706      	moveq	r7, #6
 8005dde:	2700      	movne	r7, #0
 8005de0:	4638      	mov	r0, r7
 8005de2:	b00b      	add	sp, #44	; 0x2c
 8005de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de8:	f10b 0b01 	add.w	fp, fp, #1
 8005dec:	e78a      	b.n	8005d04 <__gethex+0x34>
 8005dee:	2500      	movs	r5, #0
 8005df0:	462c      	mov	r4, r5
 8005df2:	e7ae      	b.n	8005d52 <__gethex+0x82>
 8005df4:	463e      	mov	r6, r7
 8005df6:	2501      	movs	r5, #1
 8005df8:	e7c7      	b.n	8005d8a <__gethex+0xba>
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	e7fb      	b.n	8005df6 <__gethex+0x126>
 8005dfe:	f04f 0900 	mov.w	r9, #0
 8005e02:	1cb1      	adds	r1, r6, #2
 8005e04:	e7ce      	b.n	8005da4 <__gethex+0xd4>
 8005e06:	f04f 0901 	mov.w	r9, #1
 8005e0a:	e7fa      	b.n	8005e02 <__gethex+0x132>
 8005e0c:	230a      	movs	r3, #10
 8005e0e:	fb03 0202 	mla	r2, r3, r2, r0
 8005e12:	3a10      	subs	r2, #16
 8005e14:	e7cf      	b.n	8005db6 <__gethex+0xe6>
 8005e16:	4631      	mov	r1, r6
 8005e18:	e7da      	b.n	8005dd0 <__gethex+0x100>
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	1bf3      	subs	r3, r6, r7
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	2b07      	cmp	r3, #7
 8005e22:	dc49      	bgt.n	8005eb8 <__gethex+0x1e8>
 8005e24:	9802      	ldr	r0, [sp, #8]
 8005e26:	f000 fa67 	bl	80062f8 <_Balloc>
 8005e2a:	f04f 0b00 	mov.w	fp, #0
 8005e2e:	4605      	mov	r5, r0
 8005e30:	46da      	mov	sl, fp
 8005e32:	9b01      	ldr	r3, [sp, #4]
 8005e34:	f100 0914 	add.w	r9, r0, #20
 8005e38:	f1c3 0301 	rsb	r3, r3, #1
 8005e3c:	f8cd 9010 	str.w	r9, [sp, #16]
 8005e40:	9308      	str	r3, [sp, #32]
 8005e42:	42b7      	cmp	r7, r6
 8005e44:	d33b      	bcc.n	8005ebe <__gethex+0x1ee>
 8005e46:	9804      	ldr	r0, [sp, #16]
 8005e48:	f840 ab04 	str.w	sl, [r0], #4
 8005e4c:	eba0 0009 	sub.w	r0, r0, r9
 8005e50:	1080      	asrs	r0, r0, #2
 8005e52:	6128      	str	r0, [r5, #16]
 8005e54:	0147      	lsls	r7, r0, #5
 8005e56:	4650      	mov	r0, sl
 8005e58:	f000 fb12 	bl	8006480 <__hi0bits>
 8005e5c:	f8d8 6000 	ldr.w	r6, [r8]
 8005e60:	1a3f      	subs	r7, r7, r0
 8005e62:	42b7      	cmp	r7, r6
 8005e64:	dd64      	ble.n	8005f30 <__gethex+0x260>
 8005e66:	1bbf      	subs	r7, r7, r6
 8005e68:	4639      	mov	r1, r7
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 fe1b 	bl	8006aa6 <__any_on>
 8005e70:	4682      	mov	sl, r0
 8005e72:	b178      	cbz	r0, 8005e94 <__gethex+0x1c4>
 8005e74:	f04f 0a01 	mov.w	sl, #1
 8005e78:	1e7b      	subs	r3, r7, #1
 8005e7a:	1159      	asrs	r1, r3, #5
 8005e7c:	f003 021f 	and.w	r2, r3, #31
 8005e80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005e84:	fa0a f202 	lsl.w	r2, sl, r2
 8005e88:	420a      	tst	r2, r1
 8005e8a:	d003      	beq.n	8005e94 <__gethex+0x1c4>
 8005e8c:	4553      	cmp	r3, sl
 8005e8e:	dc46      	bgt.n	8005f1e <__gethex+0x24e>
 8005e90:	f04f 0a02 	mov.w	sl, #2
 8005e94:	4639      	mov	r1, r7
 8005e96:	4628      	mov	r0, r5
 8005e98:	f7ff feca 	bl	8005c30 <rshift>
 8005e9c:	443c      	add	r4, r7
 8005e9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	da52      	bge.n	8005f4c <__gethex+0x27c>
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	9802      	ldr	r0, [sp, #8]
 8005eaa:	f000 fa59 	bl	8006360 <_Bfree>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005eb2:	27a3      	movs	r7, #163	; 0xa3
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e793      	b.n	8005de0 <__gethex+0x110>
 8005eb8:	3101      	adds	r1, #1
 8005eba:	105b      	asrs	r3, r3, #1
 8005ebc:	e7b0      	b.n	8005e20 <__gethex+0x150>
 8005ebe:	1e73      	subs	r3, r6, #1
 8005ec0:	9305      	str	r3, [sp, #20]
 8005ec2:	9a07      	ldr	r2, [sp, #28]
 8005ec4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d018      	beq.n	8005efe <__gethex+0x22e>
 8005ecc:	f1bb 0f20 	cmp.w	fp, #32
 8005ed0:	d107      	bne.n	8005ee2 <__gethex+0x212>
 8005ed2:	9b04      	ldr	r3, [sp, #16]
 8005ed4:	f8c3 a000 	str.w	sl, [r3]
 8005ed8:	f04f 0a00 	mov.w	sl, #0
 8005edc:	46d3      	mov	fp, sl
 8005ede:	3304      	adds	r3, #4
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005ee6:	f7ff fede 	bl	8005ca6 <__hexdig_fun>
 8005eea:	f000 000f 	and.w	r0, r0, #15
 8005eee:	fa00 f00b 	lsl.w	r0, r0, fp
 8005ef2:	ea4a 0a00 	orr.w	sl, sl, r0
 8005ef6:	f10b 0b04 	add.w	fp, fp, #4
 8005efa:	9b05      	ldr	r3, [sp, #20]
 8005efc:	e00d      	b.n	8005f1a <__gethex+0x24a>
 8005efe:	9b05      	ldr	r3, [sp, #20]
 8005f00:	9a08      	ldr	r2, [sp, #32]
 8005f02:	4413      	add	r3, r2
 8005f04:	42bb      	cmp	r3, r7
 8005f06:	d3e1      	bcc.n	8005ecc <__gethex+0x1fc>
 8005f08:	4618      	mov	r0, r3
 8005f0a:	9a01      	ldr	r2, [sp, #4]
 8005f0c:	9903      	ldr	r1, [sp, #12]
 8005f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f10:	f001 f800 	bl	8006f14 <strncmp>
 8005f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d1d8      	bne.n	8005ecc <__gethex+0x1fc>
 8005f1a:	461e      	mov	r6, r3
 8005f1c:	e791      	b.n	8005e42 <__gethex+0x172>
 8005f1e:	1eb9      	subs	r1, r7, #2
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 fdc0 	bl	8006aa6 <__any_on>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d0b2      	beq.n	8005e90 <__gethex+0x1c0>
 8005f2a:	f04f 0a03 	mov.w	sl, #3
 8005f2e:	e7b1      	b.n	8005e94 <__gethex+0x1c4>
 8005f30:	da09      	bge.n	8005f46 <__gethex+0x276>
 8005f32:	1bf7      	subs	r7, r6, r7
 8005f34:	4629      	mov	r1, r5
 8005f36:	463a      	mov	r2, r7
 8005f38:	9802      	ldr	r0, [sp, #8]
 8005f3a:	f000 fbdb 	bl	80066f4 <__lshift>
 8005f3e:	4605      	mov	r5, r0
 8005f40:	1be4      	subs	r4, r4, r7
 8005f42:	f100 0914 	add.w	r9, r0, #20
 8005f46:	f04f 0a00 	mov.w	sl, #0
 8005f4a:	e7a8      	b.n	8005e9e <__gethex+0x1ce>
 8005f4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005f50:	42a0      	cmp	r0, r4
 8005f52:	dd6b      	ble.n	800602c <__gethex+0x35c>
 8005f54:	1b04      	subs	r4, r0, r4
 8005f56:	42a6      	cmp	r6, r4
 8005f58:	dc2e      	bgt.n	8005fb8 <__gethex+0x2e8>
 8005f5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d022      	beq.n	8005fa8 <__gethex+0x2d8>
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d024      	beq.n	8005fb0 <__gethex+0x2e0>
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d115      	bne.n	8005f96 <__gethex+0x2c6>
 8005f6a:	42a6      	cmp	r6, r4
 8005f6c:	d113      	bne.n	8005f96 <__gethex+0x2c6>
 8005f6e:	2e01      	cmp	r6, #1
 8005f70:	dc0b      	bgt.n	8005f8a <__gethex+0x2ba>
 8005f72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f76:	9a06      	ldr	r2, [sp, #24]
 8005f78:	2762      	movs	r7, #98	; 0x62
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	612b      	str	r3, [r5, #16]
 8005f80:	f8c9 3000 	str.w	r3, [r9]
 8005f84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f86:	601d      	str	r5, [r3, #0]
 8005f88:	e72a      	b.n	8005de0 <__gethex+0x110>
 8005f8a:	1e71      	subs	r1, r6, #1
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 fd8a 	bl	8006aa6 <__any_on>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d1ed      	bne.n	8005f72 <__gethex+0x2a2>
 8005f96:	4629      	mov	r1, r5
 8005f98:	9802      	ldr	r0, [sp, #8]
 8005f9a:	f000 f9e1 	bl	8006360 <_Bfree>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005fa2:	2750      	movs	r7, #80	; 0x50
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	e71b      	b.n	8005de0 <__gethex+0x110>
 8005fa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0e1      	beq.n	8005f72 <__gethex+0x2a2>
 8005fae:	e7f2      	b.n	8005f96 <__gethex+0x2c6>
 8005fb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1dd      	bne.n	8005f72 <__gethex+0x2a2>
 8005fb6:	e7ee      	b.n	8005f96 <__gethex+0x2c6>
 8005fb8:	1e67      	subs	r7, r4, #1
 8005fba:	f1ba 0f00 	cmp.w	sl, #0
 8005fbe:	d132      	bne.n	8006026 <__gethex+0x356>
 8005fc0:	b127      	cbz	r7, 8005fcc <__gethex+0x2fc>
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 fd6e 	bl	8006aa6 <__any_on>
 8005fca:	4682      	mov	sl, r0
 8005fcc:	2301      	movs	r3, #1
 8005fce:	117a      	asrs	r2, r7, #5
 8005fd0:	f007 071f 	and.w	r7, r7, #31
 8005fd4:	fa03 f707 	lsl.w	r7, r3, r7
 8005fd8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005fdc:	4621      	mov	r1, r4
 8005fde:	421f      	tst	r7, r3
 8005fe0:	f04f 0702 	mov.w	r7, #2
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	bf18      	it	ne
 8005fe8:	f04a 0a02 	orrne.w	sl, sl, #2
 8005fec:	1b36      	subs	r6, r6, r4
 8005fee:	f7ff fe1f 	bl	8005c30 <rshift>
 8005ff2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005ff6:	f1ba 0f00 	cmp.w	sl, #0
 8005ffa:	d048      	beq.n	800608e <__gethex+0x3be>
 8005ffc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d015      	beq.n	8006030 <__gethex+0x360>
 8006004:	2b03      	cmp	r3, #3
 8006006:	d017      	beq.n	8006038 <__gethex+0x368>
 8006008:	2b01      	cmp	r3, #1
 800600a:	d109      	bne.n	8006020 <__gethex+0x350>
 800600c:	f01a 0f02 	tst.w	sl, #2
 8006010:	d006      	beq.n	8006020 <__gethex+0x350>
 8006012:	f8d9 3000 	ldr.w	r3, [r9]
 8006016:	ea4a 0a03 	orr.w	sl, sl, r3
 800601a:	f01a 0f01 	tst.w	sl, #1
 800601e:	d10e      	bne.n	800603e <__gethex+0x36e>
 8006020:	f047 0710 	orr.w	r7, r7, #16
 8006024:	e033      	b.n	800608e <__gethex+0x3be>
 8006026:	f04f 0a01 	mov.w	sl, #1
 800602a:	e7cf      	b.n	8005fcc <__gethex+0x2fc>
 800602c:	2701      	movs	r7, #1
 800602e:	e7e2      	b.n	8005ff6 <__gethex+0x326>
 8006030:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006032:	f1c3 0301 	rsb	r3, r3, #1
 8006036:	9315      	str	r3, [sp, #84]	; 0x54
 8006038:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0f0      	beq.n	8006020 <__gethex+0x350>
 800603e:	f04f 0c00 	mov.w	ip, #0
 8006042:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006046:	f105 0314 	add.w	r3, r5, #20
 800604a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800604e:	eb03 010a 	add.w	r1, r3, sl
 8006052:	4618      	mov	r0, r3
 8006054:	f853 2b04 	ldr.w	r2, [r3], #4
 8006058:	f1b2 3fff 	cmp.w	r2, #4294967295
 800605c:	d01c      	beq.n	8006098 <__gethex+0x3c8>
 800605e:	3201      	adds	r2, #1
 8006060:	6002      	str	r2, [r0, #0]
 8006062:	2f02      	cmp	r7, #2
 8006064:	f105 0314 	add.w	r3, r5, #20
 8006068:	d138      	bne.n	80060dc <__gethex+0x40c>
 800606a:	f8d8 2000 	ldr.w	r2, [r8]
 800606e:	3a01      	subs	r2, #1
 8006070:	42b2      	cmp	r2, r6
 8006072:	d10a      	bne.n	800608a <__gethex+0x3ba>
 8006074:	2201      	movs	r2, #1
 8006076:	1171      	asrs	r1, r6, #5
 8006078:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800607c:	f006 061f 	and.w	r6, r6, #31
 8006080:	fa02 f606 	lsl.w	r6, r2, r6
 8006084:	421e      	tst	r6, r3
 8006086:	bf18      	it	ne
 8006088:	4617      	movne	r7, r2
 800608a:	f047 0720 	orr.w	r7, r7, #32
 800608e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006090:	601d      	str	r5, [r3, #0]
 8006092:	9b06      	ldr	r3, [sp, #24]
 8006094:	601c      	str	r4, [r3, #0]
 8006096:	e6a3      	b.n	8005de0 <__gethex+0x110>
 8006098:	4299      	cmp	r1, r3
 800609a:	f843 cc04 	str.w	ip, [r3, #-4]
 800609e:	d8d8      	bhi.n	8006052 <__gethex+0x382>
 80060a0:	68ab      	ldr	r3, [r5, #8]
 80060a2:	4599      	cmp	r9, r3
 80060a4:	db12      	blt.n	80060cc <__gethex+0x3fc>
 80060a6:	6869      	ldr	r1, [r5, #4]
 80060a8:	9802      	ldr	r0, [sp, #8]
 80060aa:	3101      	adds	r1, #1
 80060ac:	f000 f924 	bl	80062f8 <_Balloc>
 80060b0:	4683      	mov	fp, r0
 80060b2:	692a      	ldr	r2, [r5, #16]
 80060b4:	f105 010c 	add.w	r1, r5, #12
 80060b8:	3202      	adds	r2, #2
 80060ba:	0092      	lsls	r2, r2, #2
 80060bc:	300c      	adds	r0, #12
 80060be:	f7fd fa29 	bl	8003514 <memcpy>
 80060c2:	4629      	mov	r1, r5
 80060c4:	9802      	ldr	r0, [sp, #8]
 80060c6:	f000 f94b 	bl	8006360 <_Bfree>
 80060ca:	465d      	mov	r5, fp
 80060cc:	692b      	ldr	r3, [r5, #16]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	612a      	str	r2, [r5, #16]
 80060d2:	2201      	movs	r2, #1
 80060d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80060d8:	615a      	str	r2, [r3, #20]
 80060da:	e7c2      	b.n	8006062 <__gethex+0x392>
 80060dc:	692a      	ldr	r2, [r5, #16]
 80060de:	454a      	cmp	r2, r9
 80060e0:	dd0b      	ble.n	80060fa <__gethex+0x42a>
 80060e2:	2101      	movs	r1, #1
 80060e4:	4628      	mov	r0, r5
 80060e6:	f7ff fda3 	bl	8005c30 <rshift>
 80060ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060ee:	3401      	adds	r4, #1
 80060f0:	42a3      	cmp	r3, r4
 80060f2:	f6ff aed8 	blt.w	8005ea6 <__gethex+0x1d6>
 80060f6:	2701      	movs	r7, #1
 80060f8:	e7c7      	b.n	800608a <__gethex+0x3ba>
 80060fa:	f016 061f 	ands.w	r6, r6, #31
 80060fe:	d0fa      	beq.n	80060f6 <__gethex+0x426>
 8006100:	449a      	add	sl, r3
 8006102:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006106:	f000 f9bb 	bl	8006480 <__hi0bits>
 800610a:	f1c6 0620 	rsb	r6, r6, #32
 800610e:	42b0      	cmp	r0, r6
 8006110:	dbe7      	blt.n	80060e2 <__gethex+0x412>
 8006112:	e7f0      	b.n	80060f6 <__gethex+0x426>

08006114 <L_shift>:
 8006114:	f1c2 0208 	rsb	r2, r2, #8
 8006118:	0092      	lsls	r2, r2, #2
 800611a:	b570      	push	{r4, r5, r6, lr}
 800611c:	f1c2 0620 	rsb	r6, r2, #32
 8006120:	6843      	ldr	r3, [r0, #4]
 8006122:	6804      	ldr	r4, [r0, #0]
 8006124:	fa03 f506 	lsl.w	r5, r3, r6
 8006128:	432c      	orrs	r4, r5
 800612a:	40d3      	lsrs	r3, r2
 800612c:	6004      	str	r4, [r0, #0]
 800612e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006132:	4288      	cmp	r0, r1
 8006134:	d3f4      	bcc.n	8006120 <L_shift+0xc>
 8006136:	bd70      	pop	{r4, r5, r6, pc}

08006138 <__match>:
 8006138:	b530      	push	{r4, r5, lr}
 800613a:	6803      	ldr	r3, [r0, #0]
 800613c:	3301      	adds	r3, #1
 800613e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006142:	b914      	cbnz	r4, 800614a <__match+0x12>
 8006144:	6003      	str	r3, [r0, #0]
 8006146:	2001      	movs	r0, #1
 8006148:	bd30      	pop	{r4, r5, pc}
 800614a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800614e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006152:	2d19      	cmp	r5, #25
 8006154:	bf98      	it	ls
 8006156:	3220      	addls	r2, #32
 8006158:	42a2      	cmp	r2, r4
 800615a:	d0f0      	beq.n	800613e <__match+0x6>
 800615c:	2000      	movs	r0, #0
 800615e:	e7f3      	b.n	8006148 <__match+0x10>

08006160 <__hexnan>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	2500      	movs	r5, #0
 8006166:	680b      	ldr	r3, [r1, #0]
 8006168:	4682      	mov	sl, r0
 800616a:	115f      	asrs	r7, r3, #5
 800616c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006170:	f013 031f 	ands.w	r3, r3, #31
 8006174:	bf18      	it	ne
 8006176:	3704      	addne	r7, #4
 8006178:	1f3e      	subs	r6, r7, #4
 800617a:	4690      	mov	r8, r2
 800617c:	46b1      	mov	r9, r6
 800617e:	4634      	mov	r4, r6
 8006180:	46ab      	mov	fp, r5
 8006182:	b087      	sub	sp, #28
 8006184:	6801      	ldr	r1, [r0, #0]
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	f847 5c04 	str.w	r5, [r7, #-4]
 800618c:	9502      	str	r5, [sp, #8]
 800618e:	784a      	ldrb	r2, [r1, #1]
 8006190:	1c4b      	adds	r3, r1, #1
 8006192:	9303      	str	r3, [sp, #12]
 8006194:	b342      	cbz	r2, 80061e8 <__hexnan+0x88>
 8006196:	4610      	mov	r0, r2
 8006198:	9105      	str	r1, [sp, #20]
 800619a:	9204      	str	r2, [sp, #16]
 800619c:	f7ff fd83 	bl	8005ca6 <__hexdig_fun>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d143      	bne.n	800622c <__hexnan+0xcc>
 80061a4:	9a04      	ldr	r2, [sp, #16]
 80061a6:	9905      	ldr	r1, [sp, #20]
 80061a8:	2a20      	cmp	r2, #32
 80061aa:	d818      	bhi.n	80061de <__hexnan+0x7e>
 80061ac:	9b02      	ldr	r3, [sp, #8]
 80061ae:	459b      	cmp	fp, r3
 80061b0:	dd13      	ble.n	80061da <__hexnan+0x7a>
 80061b2:	454c      	cmp	r4, r9
 80061b4:	d206      	bcs.n	80061c4 <__hexnan+0x64>
 80061b6:	2d07      	cmp	r5, #7
 80061b8:	dc04      	bgt.n	80061c4 <__hexnan+0x64>
 80061ba:	462a      	mov	r2, r5
 80061bc:	4649      	mov	r1, r9
 80061be:	4620      	mov	r0, r4
 80061c0:	f7ff ffa8 	bl	8006114 <L_shift>
 80061c4:	4544      	cmp	r4, r8
 80061c6:	d944      	bls.n	8006252 <__hexnan+0xf2>
 80061c8:	2300      	movs	r3, #0
 80061ca:	f1a4 0904 	sub.w	r9, r4, #4
 80061ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80061d2:	461d      	mov	r5, r3
 80061d4:	464c      	mov	r4, r9
 80061d6:	f8cd b008 	str.w	fp, [sp, #8]
 80061da:	9903      	ldr	r1, [sp, #12]
 80061dc:	e7d7      	b.n	800618e <__hexnan+0x2e>
 80061de:	2a29      	cmp	r2, #41	; 0x29
 80061e0:	d14a      	bne.n	8006278 <__hexnan+0x118>
 80061e2:	3102      	adds	r1, #2
 80061e4:	f8ca 1000 	str.w	r1, [sl]
 80061e8:	f1bb 0f00 	cmp.w	fp, #0
 80061ec:	d044      	beq.n	8006278 <__hexnan+0x118>
 80061ee:	454c      	cmp	r4, r9
 80061f0:	d206      	bcs.n	8006200 <__hexnan+0xa0>
 80061f2:	2d07      	cmp	r5, #7
 80061f4:	dc04      	bgt.n	8006200 <__hexnan+0xa0>
 80061f6:	462a      	mov	r2, r5
 80061f8:	4649      	mov	r1, r9
 80061fa:	4620      	mov	r0, r4
 80061fc:	f7ff ff8a 	bl	8006114 <L_shift>
 8006200:	4544      	cmp	r4, r8
 8006202:	d928      	bls.n	8006256 <__hexnan+0xf6>
 8006204:	4643      	mov	r3, r8
 8006206:	f854 2b04 	ldr.w	r2, [r4], #4
 800620a:	42a6      	cmp	r6, r4
 800620c:	f843 2b04 	str.w	r2, [r3], #4
 8006210:	d2f9      	bcs.n	8006206 <__hexnan+0xa6>
 8006212:	2200      	movs	r2, #0
 8006214:	f843 2b04 	str.w	r2, [r3], #4
 8006218:	429e      	cmp	r6, r3
 800621a:	d2fb      	bcs.n	8006214 <__hexnan+0xb4>
 800621c:	6833      	ldr	r3, [r6, #0]
 800621e:	b91b      	cbnz	r3, 8006228 <__hexnan+0xc8>
 8006220:	4546      	cmp	r6, r8
 8006222:	d127      	bne.n	8006274 <__hexnan+0x114>
 8006224:	2301      	movs	r3, #1
 8006226:	6033      	str	r3, [r6, #0]
 8006228:	2005      	movs	r0, #5
 800622a:	e026      	b.n	800627a <__hexnan+0x11a>
 800622c:	3501      	adds	r5, #1
 800622e:	2d08      	cmp	r5, #8
 8006230:	f10b 0b01 	add.w	fp, fp, #1
 8006234:	dd06      	ble.n	8006244 <__hexnan+0xe4>
 8006236:	4544      	cmp	r4, r8
 8006238:	d9cf      	bls.n	80061da <__hexnan+0x7a>
 800623a:	2300      	movs	r3, #0
 800623c:	2501      	movs	r5, #1
 800623e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006242:	3c04      	subs	r4, #4
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	f000 000f 	and.w	r0, r0, #15
 800624a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800624e:	6020      	str	r0, [r4, #0]
 8006250:	e7c3      	b.n	80061da <__hexnan+0x7a>
 8006252:	2508      	movs	r5, #8
 8006254:	e7c1      	b.n	80061da <__hexnan+0x7a>
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0df      	beq.n	800621c <__hexnan+0xbc>
 800625c:	f04f 32ff 	mov.w	r2, #4294967295
 8006260:	f1c3 0320 	rsb	r3, r3, #32
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
 8006268:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800626c:	401a      	ands	r2, r3
 800626e:	f847 2c04 	str.w	r2, [r7, #-4]
 8006272:	e7d3      	b.n	800621c <__hexnan+0xbc>
 8006274:	3e04      	subs	r6, #4
 8006276:	e7d1      	b.n	800621c <__hexnan+0xbc>
 8006278:	2004      	movs	r0, #4
 800627a:	b007      	add	sp, #28
 800627c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006280 <__locale_ctype_ptr_l>:
 8006280:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006284:	4770      	bx	lr

08006286 <__localeconv_l>:
 8006286:	30f0      	adds	r0, #240	; 0xf0
 8006288:	4770      	bx	lr
	...

0800628c <_localeconv_r>:
 800628c:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <_localeconv_r+0x14>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a18      	ldr	r0, [r3, #32]
 8006292:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <_localeconv_r+0x18>)
 8006294:	2800      	cmp	r0, #0
 8006296:	bf08      	it	eq
 8006298:	4618      	moveq	r0, r3
 800629a:	30f0      	adds	r0, #240	; 0xf0
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000024 	.word	0x20000024
 80062a4:	20000088 	.word	0x20000088

080062a8 <malloc>:
 80062a8:	4b02      	ldr	r3, [pc, #8]	; (80062b4 <malloc+0xc>)
 80062aa:	4601      	mov	r1, r0
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	f000 bc75 	b.w	8006b9c <_malloc_r>
 80062b2:	bf00      	nop
 80062b4:	20000024 	.word	0x20000024

080062b8 <__ascii_mbtowc>:
 80062b8:	b082      	sub	sp, #8
 80062ba:	b901      	cbnz	r1, 80062be <__ascii_mbtowc+0x6>
 80062bc:	a901      	add	r1, sp, #4
 80062be:	b142      	cbz	r2, 80062d2 <__ascii_mbtowc+0x1a>
 80062c0:	b14b      	cbz	r3, 80062d6 <__ascii_mbtowc+0x1e>
 80062c2:	7813      	ldrb	r3, [r2, #0]
 80062c4:	600b      	str	r3, [r1, #0]
 80062c6:	7812      	ldrb	r2, [r2, #0]
 80062c8:	1c10      	adds	r0, r2, #0
 80062ca:	bf18      	it	ne
 80062cc:	2001      	movne	r0, #1
 80062ce:	b002      	add	sp, #8
 80062d0:	4770      	bx	lr
 80062d2:	4610      	mov	r0, r2
 80062d4:	e7fb      	b.n	80062ce <__ascii_mbtowc+0x16>
 80062d6:	f06f 0001 	mvn.w	r0, #1
 80062da:	e7f8      	b.n	80062ce <__ascii_mbtowc+0x16>

080062dc <memchr>:
 80062dc:	b510      	push	{r4, lr}
 80062de:	b2c9      	uxtb	r1, r1
 80062e0:	4402      	add	r2, r0
 80062e2:	4290      	cmp	r0, r2
 80062e4:	4603      	mov	r3, r0
 80062e6:	d101      	bne.n	80062ec <memchr+0x10>
 80062e8:	2300      	movs	r3, #0
 80062ea:	e003      	b.n	80062f4 <memchr+0x18>
 80062ec:	781c      	ldrb	r4, [r3, #0]
 80062ee:	3001      	adds	r0, #1
 80062f0:	428c      	cmp	r4, r1
 80062f2:	d1f6      	bne.n	80062e2 <memchr+0x6>
 80062f4:	4618      	mov	r0, r3
 80062f6:	bd10      	pop	{r4, pc}

080062f8 <_Balloc>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062fc:	4604      	mov	r4, r0
 80062fe:	460e      	mov	r6, r1
 8006300:	b93d      	cbnz	r5, 8006312 <_Balloc+0x1a>
 8006302:	2010      	movs	r0, #16
 8006304:	f7ff ffd0 	bl	80062a8 <malloc>
 8006308:	6260      	str	r0, [r4, #36]	; 0x24
 800630a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800630e:	6005      	str	r5, [r0, #0]
 8006310:	60c5      	str	r5, [r0, #12]
 8006312:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006314:	68eb      	ldr	r3, [r5, #12]
 8006316:	b183      	cbz	r3, 800633a <_Balloc+0x42>
 8006318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006320:	b9b8      	cbnz	r0, 8006352 <_Balloc+0x5a>
 8006322:	2101      	movs	r1, #1
 8006324:	fa01 f506 	lsl.w	r5, r1, r6
 8006328:	1d6a      	adds	r2, r5, #5
 800632a:	0092      	lsls	r2, r2, #2
 800632c:	4620      	mov	r0, r4
 800632e:	f000 fbdb 	bl	8006ae8 <_calloc_r>
 8006332:	b160      	cbz	r0, 800634e <_Balloc+0x56>
 8006334:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006338:	e00e      	b.n	8006358 <_Balloc+0x60>
 800633a:	2221      	movs	r2, #33	; 0x21
 800633c:	2104      	movs	r1, #4
 800633e:	4620      	mov	r0, r4
 8006340:	f000 fbd2 	bl	8006ae8 <_calloc_r>
 8006344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006346:	60e8      	str	r0, [r5, #12]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e4      	bne.n	8006318 <_Balloc+0x20>
 800634e:	2000      	movs	r0, #0
 8006350:	bd70      	pop	{r4, r5, r6, pc}
 8006352:	6802      	ldr	r2, [r0, #0]
 8006354:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006358:	2300      	movs	r3, #0
 800635a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800635e:	e7f7      	b.n	8006350 <_Balloc+0x58>

08006360 <_Bfree>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006364:	4606      	mov	r6, r0
 8006366:	460d      	mov	r5, r1
 8006368:	b93c      	cbnz	r4, 800637a <_Bfree+0x1a>
 800636a:	2010      	movs	r0, #16
 800636c:	f7ff ff9c 	bl	80062a8 <malloc>
 8006370:	6270      	str	r0, [r6, #36]	; 0x24
 8006372:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006376:	6004      	str	r4, [r0, #0]
 8006378:	60c4      	str	r4, [r0, #12]
 800637a:	b13d      	cbz	r5, 800638c <_Bfree+0x2c>
 800637c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800637e:	686a      	ldr	r2, [r5, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006386:	6029      	str	r1, [r5, #0]
 8006388:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800638c:	bd70      	pop	{r4, r5, r6, pc}

0800638e <__multadd>:
 800638e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006392:	461f      	mov	r7, r3
 8006394:	4606      	mov	r6, r0
 8006396:	460c      	mov	r4, r1
 8006398:	2300      	movs	r3, #0
 800639a:	690d      	ldr	r5, [r1, #16]
 800639c:	f101 0c14 	add.w	ip, r1, #20
 80063a0:	f8dc 0000 	ldr.w	r0, [ip]
 80063a4:	3301      	adds	r3, #1
 80063a6:	b281      	uxth	r1, r0
 80063a8:	fb02 7101 	mla	r1, r2, r1, r7
 80063ac:	0c00      	lsrs	r0, r0, #16
 80063ae:	0c0f      	lsrs	r7, r1, #16
 80063b0:	fb02 7000 	mla	r0, r2, r0, r7
 80063b4:	b289      	uxth	r1, r1
 80063b6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80063ba:	429d      	cmp	r5, r3
 80063bc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80063c0:	f84c 1b04 	str.w	r1, [ip], #4
 80063c4:	dcec      	bgt.n	80063a0 <__multadd+0x12>
 80063c6:	b1d7      	cbz	r7, 80063fe <__multadd+0x70>
 80063c8:	68a3      	ldr	r3, [r4, #8]
 80063ca:	42ab      	cmp	r3, r5
 80063cc:	dc12      	bgt.n	80063f4 <__multadd+0x66>
 80063ce:	6861      	ldr	r1, [r4, #4]
 80063d0:	4630      	mov	r0, r6
 80063d2:	3101      	adds	r1, #1
 80063d4:	f7ff ff90 	bl	80062f8 <_Balloc>
 80063d8:	4680      	mov	r8, r0
 80063da:	6922      	ldr	r2, [r4, #16]
 80063dc:	f104 010c 	add.w	r1, r4, #12
 80063e0:	3202      	adds	r2, #2
 80063e2:	0092      	lsls	r2, r2, #2
 80063e4:	300c      	adds	r0, #12
 80063e6:	f7fd f895 	bl	8003514 <memcpy>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4630      	mov	r0, r6
 80063ee:	f7ff ffb7 	bl	8006360 <_Bfree>
 80063f2:	4644      	mov	r4, r8
 80063f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063f8:	3501      	adds	r5, #1
 80063fa:	615f      	str	r7, [r3, #20]
 80063fc:	6125      	str	r5, [r4, #16]
 80063fe:	4620      	mov	r0, r4
 8006400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006404 <__s2b>:
 8006404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006408:	4615      	mov	r5, r2
 800640a:	2209      	movs	r2, #9
 800640c:	461f      	mov	r7, r3
 800640e:	3308      	adds	r3, #8
 8006410:	460c      	mov	r4, r1
 8006412:	fb93 f3f2 	sdiv	r3, r3, r2
 8006416:	4606      	mov	r6, r0
 8006418:	2201      	movs	r2, #1
 800641a:	2100      	movs	r1, #0
 800641c:	429a      	cmp	r2, r3
 800641e:	db20      	blt.n	8006462 <__s2b+0x5e>
 8006420:	4630      	mov	r0, r6
 8006422:	f7ff ff69 	bl	80062f8 <_Balloc>
 8006426:	9b08      	ldr	r3, [sp, #32]
 8006428:	2d09      	cmp	r5, #9
 800642a:	6143      	str	r3, [r0, #20]
 800642c:	f04f 0301 	mov.w	r3, #1
 8006430:	6103      	str	r3, [r0, #16]
 8006432:	dd19      	ble.n	8006468 <__s2b+0x64>
 8006434:	f104 0809 	add.w	r8, r4, #9
 8006438:	46c1      	mov	r9, r8
 800643a:	442c      	add	r4, r5
 800643c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006440:	4601      	mov	r1, r0
 8006442:	3b30      	subs	r3, #48	; 0x30
 8006444:	220a      	movs	r2, #10
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff ffa1 	bl	800638e <__multadd>
 800644c:	45a1      	cmp	r9, r4
 800644e:	d1f5      	bne.n	800643c <__s2b+0x38>
 8006450:	eb08 0405 	add.w	r4, r8, r5
 8006454:	3c08      	subs	r4, #8
 8006456:	1b2d      	subs	r5, r5, r4
 8006458:	1963      	adds	r3, r4, r5
 800645a:	42bb      	cmp	r3, r7
 800645c:	db07      	blt.n	800646e <__s2b+0x6a>
 800645e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006462:	0052      	lsls	r2, r2, #1
 8006464:	3101      	adds	r1, #1
 8006466:	e7d9      	b.n	800641c <__s2b+0x18>
 8006468:	340a      	adds	r4, #10
 800646a:	2509      	movs	r5, #9
 800646c:	e7f3      	b.n	8006456 <__s2b+0x52>
 800646e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006472:	4601      	mov	r1, r0
 8006474:	3b30      	subs	r3, #48	; 0x30
 8006476:	220a      	movs	r2, #10
 8006478:	4630      	mov	r0, r6
 800647a:	f7ff ff88 	bl	800638e <__multadd>
 800647e:	e7eb      	b.n	8006458 <__s2b+0x54>

08006480 <__hi0bits>:
 8006480:	0c02      	lsrs	r2, r0, #16
 8006482:	0412      	lsls	r2, r2, #16
 8006484:	4603      	mov	r3, r0
 8006486:	b9b2      	cbnz	r2, 80064b6 <__hi0bits+0x36>
 8006488:	0403      	lsls	r3, r0, #16
 800648a:	2010      	movs	r0, #16
 800648c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006490:	bf04      	itt	eq
 8006492:	021b      	lsleq	r3, r3, #8
 8006494:	3008      	addeq	r0, #8
 8006496:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800649a:	bf04      	itt	eq
 800649c:	011b      	lsleq	r3, r3, #4
 800649e:	3004      	addeq	r0, #4
 80064a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064a4:	bf04      	itt	eq
 80064a6:	009b      	lsleq	r3, r3, #2
 80064a8:	3002      	addeq	r0, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	db06      	blt.n	80064bc <__hi0bits+0x3c>
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	d503      	bpl.n	80064ba <__hi0bits+0x3a>
 80064b2:	3001      	adds	r0, #1
 80064b4:	4770      	bx	lr
 80064b6:	2000      	movs	r0, #0
 80064b8:	e7e8      	b.n	800648c <__hi0bits+0xc>
 80064ba:	2020      	movs	r0, #32
 80064bc:	4770      	bx	lr

080064be <__lo0bits>:
 80064be:	6803      	ldr	r3, [r0, #0]
 80064c0:	4601      	mov	r1, r0
 80064c2:	f013 0207 	ands.w	r2, r3, #7
 80064c6:	d00b      	beq.n	80064e0 <__lo0bits+0x22>
 80064c8:	07da      	lsls	r2, r3, #31
 80064ca:	d423      	bmi.n	8006514 <__lo0bits+0x56>
 80064cc:	0798      	lsls	r0, r3, #30
 80064ce:	bf49      	itett	mi
 80064d0:	085b      	lsrmi	r3, r3, #1
 80064d2:	089b      	lsrpl	r3, r3, #2
 80064d4:	2001      	movmi	r0, #1
 80064d6:	600b      	strmi	r3, [r1, #0]
 80064d8:	bf5c      	itt	pl
 80064da:	600b      	strpl	r3, [r1, #0]
 80064dc:	2002      	movpl	r0, #2
 80064de:	4770      	bx	lr
 80064e0:	b298      	uxth	r0, r3
 80064e2:	b9a8      	cbnz	r0, 8006510 <__lo0bits+0x52>
 80064e4:	2010      	movs	r0, #16
 80064e6:	0c1b      	lsrs	r3, r3, #16
 80064e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80064ec:	bf04      	itt	eq
 80064ee:	0a1b      	lsreq	r3, r3, #8
 80064f0:	3008      	addeq	r0, #8
 80064f2:	071a      	lsls	r2, r3, #28
 80064f4:	bf04      	itt	eq
 80064f6:	091b      	lsreq	r3, r3, #4
 80064f8:	3004      	addeq	r0, #4
 80064fa:	079a      	lsls	r2, r3, #30
 80064fc:	bf04      	itt	eq
 80064fe:	089b      	lsreq	r3, r3, #2
 8006500:	3002      	addeq	r0, #2
 8006502:	07da      	lsls	r2, r3, #31
 8006504:	d402      	bmi.n	800650c <__lo0bits+0x4e>
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	d006      	beq.n	8006518 <__lo0bits+0x5a>
 800650a:	3001      	adds	r0, #1
 800650c:	600b      	str	r3, [r1, #0]
 800650e:	4770      	bx	lr
 8006510:	4610      	mov	r0, r2
 8006512:	e7e9      	b.n	80064e8 <__lo0bits+0x2a>
 8006514:	2000      	movs	r0, #0
 8006516:	4770      	bx	lr
 8006518:	2020      	movs	r0, #32
 800651a:	4770      	bx	lr

0800651c <__i2b>:
 800651c:	b510      	push	{r4, lr}
 800651e:	460c      	mov	r4, r1
 8006520:	2101      	movs	r1, #1
 8006522:	f7ff fee9 	bl	80062f8 <_Balloc>
 8006526:	2201      	movs	r2, #1
 8006528:	6144      	str	r4, [r0, #20]
 800652a:	6102      	str	r2, [r0, #16]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__multiply>:
 800652e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006532:	4614      	mov	r4, r2
 8006534:	690a      	ldr	r2, [r1, #16]
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	4688      	mov	r8, r1
 800653a:	429a      	cmp	r2, r3
 800653c:	bfbe      	ittt	lt
 800653e:	460b      	movlt	r3, r1
 8006540:	46a0      	movlt	r8, r4
 8006542:	461c      	movlt	r4, r3
 8006544:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006548:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800654c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006554:	eb07 0609 	add.w	r6, r7, r9
 8006558:	42b3      	cmp	r3, r6
 800655a:	bfb8      	it	lt
 800655c:	3101      	addlt	r1, #1
 800655e:	f7ff fecb 	bl	80062f8 <_Balloc>
 8006562:	f100 0514 	add.w	r5, r0, #20
 8006566:	462b      	mov	r3, r5
 8006568:	2200      	movs	r2, #0
 800656a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800656e:	4573      	cmp	r3, lr
 8006570:	d316      	bcc.n	80065a0 <__multiply+0x72>
 8006572:	f104 0214 	add.w	r2, r4, #20
 8006576:	f108 0114 	add.w	r1, r8, #20
 800657a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800657e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	9201      	str	r2, [sp, #4]
 8006588:	4293      	cmp	r3, r2
 800658a:	d80c      	bhi.n	80065a6 <__multiply+0x78>
 800658c:	2e00      	cmp	r6, #0
 800658e:	dd03      	ble.n	8006598 <__multiply+0x6a>
 8006590:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006594:	2b00      	cmp	r3, #0
 8006596:	d05d      	beq.n	8006654 <__multiply+0x126>
 8006598:	6106      	str	r6, [r0, #16]
 800659a:	b003      	add	sp, #12
 800659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a0:	f843 2b04 	str.w	r2, [r3], #4
 80065a4:	e7e3      	b.n	800656e <__multiply+0x40>
 80065a6:	f8b2 b000 	ldrh.w	fp, [r2]
 80065aa:	f1bb 0f00 	cmp.w	fp, #0
 80065ae:	d023      	beq.n	80065f8 <__multiply+0xca>
 80065b0:	4689      	mov	r9, r1
 80065b2:	46ac      	mov	ip, r5
 80065b4:	f04f 0800 	mov.w	r8, #0
 80065b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80065bc:	f8dc a000 	ldr.w	sl, [ip]
 80065c0:	b2a3      	uxth	r3, r4
 80065c2:	fa1f fa8a 	uxth.w	sl, sl
 80065c6:	fb0b a303 	mla	r3, fp, r3, sl
 80065ca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80065ce:	f8dc 4000 	ldr.w	r4, [ip]
 80065d2:	4443      	add	r3, r8
 80065d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80065d8:	fb0b 840a 	mla	r4, fp, sl, r8
 80065dc:	46e2      	mov	sl, ip
 80065de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065e8:	454f      	cmp	r7, r9
 80065ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80065ee:	f84a 3b04 	str.w	r3, [sl], #4
 80065f2:	d82b      	bhi.n	800664c <__multiply+0x11e>
 80065f4:	f8cc 8004 	str.w	r8, [ip, #4]
 80065f8:	9b01      	ldr	r3, [sp, #4]
 80065fa:	3204      	adds	r2, #4
 80065fc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006600:	f1ba 0f00 	cmp.w	sl, #0
 8006604:	d020      	beq.n	8006648 <__multiply+0x11a>
 8006606:	4689      	mov	r9, r1
 8006608:	46a8      	mov	r8, r5
 800660a:	f04f 0b00 	mov.w	fp, #0
 800660e:	682b      	ldr	r3, [r5, #0]
 8006610:	f8b9 c000 	ldrh.w	ip, [r9]
 8006614:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006618:	b29b      	uxth	r3, r3
 800661a:	fb0a 440c 	mla	r4, sl, ip, r4
 800661e:	46c4      	mov	ip, r8
 8006620:	445c      	add	r4, fp
 8006622:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006626:	f84c 3b04 	str.w	r3, [ip], #4
 800662a:	f859 3b04 	ldr.w	r3, [r9], #4
 800662e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006632:	0c1b      	lsrs	r3, r3, #16
 8006634:	fb0a b303 	mla	r3, sl, r3, fp
 8006638:	454f      	cmp	r7, r9
 800663a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800663e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006642:	d805      	bhi.n	8006650 <__multiply+0x122>
 8006644:	f8c8 3004 	str.w	r3, [r8, #4]
 8006648:	3504      	adds	r5, #4
 800664a:	e79b      	b.n	8006584 <__multiply+0x56>
 800664c:	46d4      	mov	ip, sl
 800664e:	e7b3      	b.n	80065b8 <__multiply+0x8a>
 8006650:	46e0      	mov	r8, ip
 8006652:	e7dd      	b.n	8006610 <__multiply+0xe2>
 8006654:	3e01      	subs	r6, #1
 8006656:	e799      	b.n	800658c <__multiply+0x5e>

08006658 <__pow5mult>:
 8006658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800665c:	4615      	mov	r5, r2
 800665e:	f012 0203 	ands.w	r2, r2, #3
 8006662:	4606      	mov	r6, r0
 8006664:	460f      	mov	r7, r1
 8006666:	d007      	beq.n	8006678 <__pow5mult+0x20>
 8006668:	4c21      	ldr	r4, [pc, #132]	; (80066f0 <__pow5mult+0x98>)
 800666a:	3a01      	subs	r2, #1
 800666c:	2300      	movs	r3, #0
 800666e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006672:	f7ff fe8c 	bl	800638e <__multadd>
 8006676:	4607      	mov	r7, r0
 8006678:	10ad      	asrs	r5, r5, #2
 800667a:	d035      	beq.n	80066e8 <__pow5mult+0x90>
 800667c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800667e:	b93c      	cbnz	r4, 8006690 <__pow5mult+0x38>
 8006680:	2010      	movs	r0, #16
 8006682:	f7ff fe11 	bl	80062a8 <malloc>
 8006686:	6270      	str	r0, [r6, #36]	; 0x24
 8006688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800668c:	6004      	str	r4, [r0, #0]
 800668e:	60c4      	str	r4, [r0, #12]
 8006690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006698:	b94c      	cbnz	r4, 80066ae <__pow5mult+0x56>
 800669a:	f240 2171 	movw	r1, #625	; 0x271
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff ff3c 	bl	800651c <__i2b>
 80066a4:	2300      	movs	r3, #0
 80066a6:	4604      	mov	r4, r0
 80066a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80066ac:	6003      	str	r3, [r0, #0]
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	07eb      	lsls	r3, r5, #31
 80066b4:	d50a      	bpl.n	80066cc <__pow5mult+0x74>
 80066b6:	4639      	mov	r1, r7
 80066b8:	4622      	mov	r2, r4
 80066ba:	4630      	mov	r0, r6
 80066bc:	f7ff ff37 	bl	800652e <__multiply>
 80066c0:	4681      	mov	r9, r0
 80066c2:	4639      	mov	r1, r7
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7ff fe4b 	bl	8006360 <_Bfree>
 80066ca:	464f      	mov	r7, r9
 80066cc:	106d      	asrs	r5, r5, #1
 80066ce:	d00b      	beq.n	80066e8 <__pow5mult+0x90>
 80066d0:	6820      	ldr	r0, [r4, #0]
 80066d2:	b938      	cbnz	r0, 80066e4 <__pow5mult+0x8c>
 80066d4:	4622      	mov	r2, r4
 80066d6:	4621      	mov	r1, r4
 80066d8:	4630      	mov	r0, r6
 80066da:	f7ff ff28 	bl	800652e <__multiply>
 80066de:	6020      	str	r0, [r4, #0]
 80066e0:	f8c0 8000 	str.w	r8, [r0]
 80066e4:	4604      	mov	r4, r0
 80066e6:	e7e4      	b.n	80066b2 <__pow5mult+0x5a>
 80066e8:	4638      	mov	r0, r7
 80066ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ee:	bf00      	nop
 80066f0:	08007210 	.word	0x08007210

080066f4 <__lshift>:
 80066f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f8:	460c      	mov	r4, r1
 80066fa:	4607      	mov	r7, r0
 80066fc:	4616      	mov	r6, r2
 80066fe:	6923      	ldr	r3, [r4, #16]
 8006700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006704:	eb0a 0903 	add.w	r9, sl, r3
 8006708:	6849      	ldr	r1, [r1, #4]
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	f109 0501 	add.w	r5, r9, #1
 8006710:	42ab      	cmp	r3, r5
 8006712:	db32      	blt.n	800677a <__lshift+0x86>
 8006714:	4638      	mov	r0, r7
 8006716:	f7ff fdef 	bl	80062f8 <_Balloc>
 800671a:	2300      	movs	r3, #0
 800671c:	4680      	mov	r8, r0
 800671e:	461a      	mov	r2, r3
 8006720:	f100 0114 	add.w	r1, r0, #20
 8006724:	4553      	cmp	r3, sl
 8006726:	db2b      	blt.n	8006780 <__lshift+0x8c>
 8006728:	6920      	ldr	r0, [r4, #16]
 800672a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800672e:	f104 0314 	add.w	r3, r4, #20
 8006732:	f016 021f 	ands.w	r2, r6, #31
 8006736:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800673a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800673e:	d025      	beq.n	800678c <__lshift+0x98>
 8006740:	2000      	movs	r0, #0
 8006742:	f1c2 0e20 	rsb	lr, r2, #32
 8006746:	468a      	mov	sl, r1
 8006748:	681e      	ldr	r6, [r3, #0]
 800674a:	4096      	lsls	r6, r2
 800674c:	4330      	orrs	r0, r6
 800674e:	f84a 0b04 	str.w	r0, [sl], #4
 8006752:	f853 0b04 	ldr.w	r0, [r3], #4
 8006756:	459c      	cmp	ip, r3
 8006758:	fa20 f00e 	lsr.w	r0, r0, lr
 800675c:	d814      	bhi.n	8006788 <__lshift+0x94>
 800675e:	6048      	str	r0, [r1, #4]
 8006760:	b108      	cbz	r0, 8006766 <__lshift+0x72>
 8006762:	f109 0502 	add.w	r5, r9, #2
 8006766:	3d01      	subs	r5, #1
 8006768:	4638      	mov	r0, r7
 800676a:	f8c8 5010 	str.w	r5, [r8, #16]
 800676e:	4621      	mov	r1, r4
 8006770:	f7ff fdf6 	bl	8006360 <_Bfree>
 8006774:	4640      	mov	r0, r8
 8006776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677a:	3101      	adds	r1, #1
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	e7c7      	b.n	8006710 <__lshift+0x1c>
 8006780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006784:	3301      	adds	r3, #1
 8006786:	e7cd      	b.n	8006724 <__lshift+0x30>
 8006788:	4651      	mov	r1, sl
 800678a:	e7dc      	b.n	8006746 <__lshift+0x52>
 800678c:	3904      	subs	r1, #4
 800678e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006792:	459c      	cmp	ip, r3
 8006794:	f841 2f04 	str.w	r2, [r1, #4]!
 8006798:	d8f9      	bhi.n	800678e <__lshift+0x9a>
 800679a:	e7e4      	b.n	8006766 <__lshift+0x72>

0800679c <__mcmp>:
 800679c:	6903      	ldr	r3, [r0, #16]
 800679e:	690a      	ldr	r2, [r1, #16]
 80067a0:	b530      	push	{r4, r5, lr}
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	d10c      	bne.n	80067c0 <__mcmp+0x24>
 80067a6:	0092      	lsls	r2, r2, #2
 80067a8:	3014      	adds	r0, #20
 80067aa:	3114      	adds	r1, #20
 80067ac:	1884      	adds	r4, r0, r2
 80067ae:	4411      	add	r1, r2
 80067b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067b8:	4295      	cmp	r5, r2
 80067ba:	d003      	beq.n	80067c4 <__mcmp+0x28>
 80067bc:	d305      	bcc.n	80067ca <__mcmp+0x2e>
 80067be:	2301      	movs	r3, #1
 80067c0:	4618      	mov	r0, r3
 80067c2:	bd30      	pop	{r4, r5, pc}
 80067c4:	42a0      	cmp	r0, r4
 80067c6:	d3f3      	bcc.n	80067b0 <__mcmp+0x14>
 80067c8:	e7fa      	b.n	80067c0 <__mcmp+0x24>
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295
 80067ce:	e7f7      	b.n	80067c0 <__mcmp+0x24>

080067d0 <__mdiff>:
 80067d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d4:	460d      	mov	r5, r1
 80067d6:	4607      	mov	r7, r0
 80067d8:	4611      	mov	r1, r2
 80067da:	4628      	mov	r0, r5
 80067dc:	4614      	mov	r4, r2
 80067de:	f7ff ffdd 	bl	800679c <__mcmp>
 80067e2:	1e06      	subs	r6, r0, #0
 80067e4:	d108      	bne.n	80067f8 <__mdiff+0x28>
 80067e6:	4631      	mov	r1, r6
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7ff fd85 	bl	80062f8 <_Balloc>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	bfa4      	itt	ge
 80067fa:	4623      	movge	r3, r4
 80067fc:	462c      	movge	r4, r5
 80067fe:	4638      	mov	r0, r7
 8006800:	6861      	ldr	r1, [r4, #4]
 8006802:	bfa6      	itte	ge
 8006804:	461d      	movge	r5, r3
 8006806:	2600      	movge	r6, #0
 8006808:	2601      	movlt	r6, #1
 800680a:	f7ff fd75 	bl	80062f8 <_Balloc>
 800680e:	f04f 0e00 	mov.w	lr, #0
 8006812:	60c6      	str	r6, [r0, #12]
 8006814:	692b      	ldr	r3, [r5, #16]
 8006816:	6926      	ldr	r6, [r4, #16]
 8006818:	f104 0214 	add.w	r2, r4, #20
 800681c:	f105 0914 	add.w	r9, r5, #20
 8006820:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006824:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006828:	f100 0114 	add.w	r1, r0, #20
 800682c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006830:	f859 5b04 	ldr.w	r5, [r9], #4
 8006834:	fa1f f38a 	uxth.w	r3, sl
 8006838:	4473      	add	r3, lr
 800683a:	b2ac      	uxth	r4, r5
 800683c:	1b1b      	subs	r3, r3, r4
 800683e:	0c2c      	lsrs	r4, r5, #16
 8006840:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006844:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006848:	b29b      	uxth	r3, r3
 800684a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800684e:	45c8      	cmp	r8, r9
 8006850:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006854:	4694      	mov	ip, r2
 8006856:	f841 4b04 	str.w	r4, [r1], #4
 800685a:	d8e7      	bhi.n	800682c <__mdiff+0x5c>
 800685c:	45bc      	cmp	ip, r7
 800685e:	d304      	bcc.n	800686a <__mdiff+0x9a>
 8006860:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006864:	b183      	cbz	r3, 8006888 <__mdiff+0xb8>
 8006866:	6106      	str	r6, [r0, #16]
 8006868:	e7c4      	b.n	80067f4 <__mdiff+0x24>
 800686a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800686e:	b2a2      	uxth	r2, r4
 8006870:	4472      	add	r2, lr
 8006872:	1413      	asrs	r3, r2, #16
 8006874:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006878:	b292      	uxth	r2, r2
 800687a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800687e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006882:	f841 2b04 	str.w	r2, [r1], #4
 8006886:	e7e9      	b.n	800685c <__mdiff+0x8c>
 8006888:	3e01      	subs	r6, #1
 800688a:	e7e9      	b.n	8006860 <__mdiff+0x90>

0800688c <__ulp>:
 800688c:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <__ulp+0x44>)
 800688e:	400b      	ands	r3, r1
 8006890:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006894:	2b00      	cmp	r3, #0
 8006896:	dd02      	ble.n	800689e <__ulp+0x12>
 8006898:	2000      	movs	r0, #0
 800689a:	4619      	mov	r1, r3
 800689c:	4770      	bx	lr
 800689e:	425b      	negs	r3, r3
 80068a0:	151b      	asrs	r3, r3, #20
 80068a2:	2b13      	cmp	r3, #19
 80068a4:	f04f 0000 	mov.w	r0, #0
 80068a8:	f04f 0100 	mov.w	r1, #0
 80068ac:	dc04      	bgt.n	80068b8 <__ulp+0x2c>
 80068ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80068b2:	fa42 f103 	asr.w	r1, r2, r3
 80068b6:	4770      	bx	lr
 80068b8:	2201      	movs	r2, #1
 80068ba:	3b14      	subs	r3, #20
 80068bc:	2b1e      	cmp	r3, #30
 80068be:	bfce      	itee	gt
 80068c0:	4613      	movgt	r3, r2
 80068c2:	f1c3 031f 	rsble	r3, r3, #31
 80068c6:	fa02 f303 	lslle.w	r3, r2, r3
 80068ca:	4618      	mov	r0, r3
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	7ff00000 	.word	0x7ff00000

080068d4 <__b2d>:
 80068d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d8:	6907      	ldr	r7, [r0, #16]
 80068da:	f100 0914 	add.w	r9, r0, #20
 80068de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80068e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80068e6:	f1a7 0804 	sub.w	r8, r7, #4
 80068ea:	4630      	mov	r0, r6
 80068ec:	f7ff fdc8 	bl	8006480 <__hi0bits>
 80068f0:	f1c0 0320 	rsb	r3, r0, #32
 80068f4:	280a      	cmp	r0, #10
 80068f6:	600b      	str	r3, [r1, #0]
 80068f8:	491e      	ldr	r1, [pc, #120]	; (8006974 <__b2d+0xa0>)
 80068fa:	dc17      	bgt.n	800692c <__b2d+0x58>
 80068fc:	45c1      	cmp	r9, r8
 80068fe:	bf28      	it	cs
 8006900:	2200      	movcs	r2, #0
 8006902:	f1c0 0c0b 	rsb	ip, r0, #11
 8006906:	fa26 f30c 	lsr.w	r3, r6, ip
 800690a:	bf38      	it	cc
 800690c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006910:	ea43 0501 	orr.w	r5, r3, r1
 8006914:	f100 0315 	add.w	r3, r0, #21
 8006918:	fa06 f303 	lsl.w	r3, r6, r3
 800691c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006920:	ea43 0402 	orr.w	r4, r3, r2
 8006924:	4620      	mov	r0, r4
 8006926:	4629      	mov	r1, r5
 8006928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800692c:	45c1      	cmp	r9, r8
 800692e:	bf3a      	itte	cc
 8006930:	f1a7 0808 	subcc.w	r8, r7, #8
 8006934:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006938:	2200      	movcs	r2, #0
 800693a:	f1b0 030b 	subs.w	r3, r0, #11
 800693e:	d015      	beq.n	800696c <__b2d+0x98>
 8006940:	409e      	lsls	r6, r3
 8006942:	f1c3 0720 	rsb	r7, r3, #32
 8006946:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800694a:	fa22 f107 	lsr.w	r1, r2, r7
 800694e:	45c8      	cmp	r8, r9
 8006950:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8006954:	ea46 0501 	orr.w	r5, r6, r1
 8006958:	bf94      	ite	ls
 800695a:	2100      	movls	r1, #0
 800695c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006960:	fa02 f003 	lsl.w	r0, r2, r3
 8006964:	40f9      	lsrs	r1, r7
 8006966:	ea40 0401 	orr.w	r4, r0, r1
 800696a:	e7db      	b.n	8006924 <__b2d+0x50>
 800696c:	ea46 0501 	orr.w	r5, r6, r1
 8006970:	4614      	mov	r4, r2
 8006972:	e7d7      	b.n	8006924 <__b2d+0x50>
 8006974:	3ff00000 	.word	0x3ff00000

08006978 <__d2b>:
 8006978:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800697c:	461c      	mov	r4, r3
 800697e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006982:	2101      	movs	r1, #1
 8006984:	4690      	mov	r8, r2
 8006986:	f7ff fcb7 	bl	80062f8 <_Balloc>
 800698a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800698e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006992:	4607      	mov	r7, r0
 8006994:	bb34      	cbnz	r4, 80069e4 <__d2b+0x6c>
 8006996:	9201      	str	r2, [sp, #4]
 8006998:	f1b8 0200 	subs.w	r2, r8, #0
 800699c:	d027      	beq.n	80069ee <__d2b+0x76>
 800699e:	a802      	add	r0, sp, #8
 80069a0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80069a4:	f7ff fd8b 	bl	80064be <__lo0bits>
 80069a8:	9900      	ldr	r1, [sp, #0]
 80069aa:	b1f0      	cbz	r0, 80069ea <__d2b+0x72>
 80069ac:	9a01      	ldr	r2, [sp, #4]
 80069ae:	f1c0 0320 	rsb	r3, r0, #32
 80069b2:	fa02 f303 	lsl.w	r3, r2, r3
 80069b6:	430b      	orrs	r3, r1
 80069b8:	40c2      	lsrs	r2, r0
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	9201      	str	r2, [sp, #4]
 80069be:	9b01      	ldr	r3, [sp, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	bf14      	ite	ne
 80069c4:	2102      	movne	r1, #2
 80069c6:	2101      	moveq	r1, #1
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	6139      	str	r1, [r7, #16]
 80069cc:	b1c4      	cbz	r4, 8006a00 <__d2b+0x88>
 80069ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80069d2:	4404      	add	r4, r0
 80069d4:	6034      	str	r4, [r6, #0]
 80069d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069da:	6028      	str	r0, [r5, #0]
 80069dc:	4638      	mov	r0, r7
 80069de:	b002      	add	sp, #8
 80069e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80069e8:	e7d5      	b.n	8006996 <__d2b+0x1e>
 80069ea:	6179      	str	r1, [r7, #20]
 80069ec:	e7e7      	b.n	80069be <__d2b+0x46>
 80069ee:	a801      	add	r0, sp, #4
 80069f0:	f7ff fd65 	bl	80064be <__lo0bits>
 80069f4:	2101      	movs	r1, #1
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	6139      	str	r1, [r7, #16]
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	3020      	adds	r0, #32
 80069fe:	e7e5      	b.n	80069cc <__d2b+0x54>
 8006a00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a04:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006a08:	6030      	str	r0, [r6, #0]
 8006a0a:	6918      	ldr	r0, [r3, #16]
 8006a0c:	f7ff fd38 	bl	8006480 <__hi0bits>
 8006a10:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006a14:	e7e1      	b.n	80069da <__d2b+0x62>

08006a16 <__ratio>:
 8006a16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1a:	4688      	mov	r8, r1
 8006a1c:	4669      	mov	r1, sp
 8006a1e:	4681      	mov	r9, r0
 8006a20:	f7ff ff58 	bl	80068d4 <__b2d>
 8006a24:	468b      	mov	fp, r1
 8006a26:	4606      	mov	r6, r0
 8006a28:	460f      	mov	r7, r1
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	a901      	add	r1, sp, #4
 8006a2e:	f7ff ff51 	bl	80068d4 <__b2d>
 8006a32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	eba3 0c02 	sub.w	ip, r3, r2
 8006a40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006a44:	1a9b      	subs	r3, r3, r2
 8006a46:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bfd5      	itete	le
 8006a4e:	460a      	movle	r2, r1
 8006a50:	463a      	movgt	r2, r7
 8006a52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006a56:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006a5a:	bfd8      	it	le
 8006a5c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8006a60:	462b      	mov	r3, r5
 8006a62:	4602      	mov	r2, r0
 8006a64:	4659      	mov	r1, fp
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7f9 fecc 	bl	8000804 <__aeabi_ddiv>
 8006a6c:	b003      	add	sp, #12
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a72 <__copybits>:
 8006a72:	3901      	subs	r1, #1
 8006a74:	b510      	push	{r4, lr}
 8006a76:	1149      	asrs	r1, r1, #5
 8006a78:	6914      	ldr	r4, [r2, #16]
 8006a7a:	3101      	adds	r1, #1
 8006a7c:	f102 0314 	add.w	r3, r2, #20
 8006a80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	d303      	bcc.n	8006a96 <__copybits+0x24>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	428a      	cmp	r2, r1
 8006a92:	d305      	bcc.n	8006aa0 <__copybits+0x2e>
 8006a94:	bd10      	pop	{r4, pc}
 8006a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a9a:	f840 2b04 	str.w	r2, [r0], #4
 8006a9e:	e7f3      	b.n	8006a88 <__copybits+0x16>
 8006aa0:	f842 3b04 	str.w	r3, [r2], #4
 8006aa4:	e7f4      	b.n	8006a90 <__copybits+0x1e>

08006aa6 <__any_on>:
 8006aa6:	f100 0214 	add.w	r2, r0, #20
 8006aaa:	6900      	ldr	r0, [r0, #16]
 8006aac:	114b      	asrs	r3, r1, #5
 8006aae:	4298      	cmp	r0, r3
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	db11      	blt.n	8006ad8 <__any_on+0x32>
 8006ab4:	dd0a      	ble.n	8006acc <__any_on+0x26>
 8006ab6:	f011 011f 	ands.w	r1, r1, #31
 8006aba:	d007      	beq.n	8006acc <__any_on+0x26>
 8006abc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006ac0:	fa24 f001 	lsr.w	r0, r4, r1
 8006ac4:	fa00 f101 	lsl.w	r1, r0, r1
 8006ac8:	428c      	cmp	r4, r1
 8006aca:	d10b      	bne.n	8006ae4 <__any_on+0x3e>
 8006acc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d803      	bhi.n	8006adc <__any_on+0x36>
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	bd10      	pop	{r4, pc}
 8006ad8:	4603      	mov	r3, r0
 8006ada:	e7f7      	b.n	8006acc <__any_on+0x26>
 8006adc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d0f5      	beq.n	8006ad0 <__any_on+0x2a>
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	e7f6      	b.n	8006ad6 <__any_on+0x30>

08006ae8 <_calloc_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	fb02 f401 	mul.w	r4, r2, r1
 8006aee:	4621      	mov	r1, r4
 8006af0:	f000 f854 	bl	8006b9c <_malloc_r>
 8006af4:	4605      	mov	r5, r0
 8006af6:	b118      	cbz	r0, 8006b00 <_calloc_r+0x18>
 8006af8:	4622      	mov	r2, r4
 8006afa:	2100      	movs	r1, #0
 8006afc:	f7fc fd15 	bl	800352a <memset>
 8006b00:	4628      	mov	r0, r5
 8006b02:	bd38      	pop	{r3, r4, r5, pc}

08006b04 <_free_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4605      	mov	r5, r0
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	d043      	beq.n	8006b94 <_free_r+0x90>
 8006b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b10:	1f0c      	subs	r4, r1, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bfb8      	it	lt
 8006b16:	18e4      	addlt	r4, r4, r3
 8006b18:	f000 fa34 	bl	8006f84 <__malloc_lock>
 8006b1c:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <_free_r+0x94>)
 8006b1e:	6813      	ldr	r3, [r2, #0]
 8006b20:	4610      	mov	r0, r2
 8006b22:	b933      	cbnz	r3, 8006b32 <_free_r+0x2e>
 8006b24:	6063      	str	r3, [r4, #4]
 8006b26:	6014      	str	r4, [r2, #0]
 8006b28:	4628      	mov	r0, r5
 8006b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b2e:	f000 ba2a 	b.w	8006f86 <__malloc_unlock>
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	d90b      	bls.n	8006b4e <_free_r+0x4a>
 8006b36:	6821      	ldr	r1, [r4, #0]
 8006b38:	1862      	adds	r2, r4, r1
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	bf01      	itttt	eq
 8006b3e:	681a      	ldreq	r2, [r3, #0]
 8006b40:	685b      	ldreq	r3, [r3, #4]
 8006b42:	1852      	addeq	r2, r2, r1
 8006b44:	6022      	streq	r2, [r4, #0]
 8006b46:	6063      	str	r3, [r4, #4]
 8006b48:	6004      	str	r4, [r0, #0]
 8006b4a:	e7ed      	b.n	8006b28 <_free_r+0x24>
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	b10a      	cbz	r2, 8006b56 <_free_r+0x52>
 8006b52:	42a2      	cmp	r2, r4
 8006b54:	d9fa      	bls.n	8006b4c <_free_r+0x48>
 8006b56:	6819      	ldr	r1, [r3, #0]
 8006b58:	1858      	adds	r0, r3, r1
 8006b5a:	42a0      	cmp	r0, r4
 8006b5c:	d10b      	bne.n	8006b76 <_free_r+0x72>
 8006b5e:	6820      	ldr	r0, [r4, #0]
 8006b60:	4401      	add	r1, r0
 8006b62:	1858      	adds	r0, r3, r1
 8006b64:	4282      	cmp	r2, r0
 8006b66:	6019      	str	r1, [r3, #0]
 8006b68:	d1de      	bne.n	8006b28 <_free_r+0x24>
 8006b6a:	6810      	ldr	r0, [r2, #0]
 8006b6c:	6852      	ldr	r2, [r2, #4]
 8006b6e:	4401      	add	r1, r0
 8006b70:	6019      	str	r1, [r3, #0]
 8006b72:	605a      	str	r2, [r3, #4]
 8006b74:	e7d8      	b.n	8006b28 <_free_r+0x24>
 8006b76:	d902      	bls.n	8006b7e <_free_r+0x7a>
 8006b78:	230c      	movs	r3, #12
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	e7d4      	b.n	8006b28 <_free_r+0x24>
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	1821      	adds	r1, r4, r0
 8006b82:	428a      	cmp	r2, r1
 8006b84:	bf01      	itttt	eq
 8006b86:	6811      	ldreq	r1, [r2, #0]
 8006b88:	6852      	ldreq	r2, [r2, #4]
 8006b8a:	1809      	addeq	r1, r1, r0
 8006b8c:	6021      	streq	r1, [r4, #0]
 8006b8e:	6062      	str	r2, [r4, #4]
 8006b90:	605c      	str	r4, [r3, #4]
 8006b92:	e7c9      	b.n	8006b28 <_free_r+0x24>
 8006b94:	bd38      	pop	{r3, r4, r5, pc}
 8006b96:	bf00      	nop
 8006b98:	20000214 	.word	0x20000214

08006b9c <_malloc_r>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	1ccd      	adds	r5, r1, #3
 8006ba0:	f025 0503 	bic.w	r5, r5, #3
 8006ba4:	3508      	adds	r5, #8
 8006ba6:	2d0c      	cmp	r5, #12
 8006ba8:	bf38      	it	cc
 8006baa:	250c      	movcc	r5, #12
 8006bac:	2d00      	cmp	r5, #0
 8006bae:	4606      	mov	r6, r0
 8006bb0:	db01      	blt.n	8006bb6 <_malloc_r+0x1a>
 8006bb2:	42a9      	cmp	r1, r5
 8006bb4:	d903      	bls.n	8006bbe <_malloc_r+0x22>
 8006bb6:	230c      	movs	r3, #12
 8006bb8:	6033      	str	r3, [r6, #0]
 8006bba:	2000      	movs	r0, #0
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
 8006bbe:	f000 f9e1 	bl	8006f84 <__malloc_lock>
 8006bc2:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <_malloc_r+0xac>)
 8006bc4:	6814      	ldr	r4, [r2, #0]
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	b991      	cbnz	r1, 8006bf0 <_malloc_r+0x54>
 8006bca:	4c20      	ldr	r4, [pc, #128]	; (8006c4c <_malloc_r+0xb0>)
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	b91b      	cbnz	r3, 8006bd8 <_malloc_r+0x3c>
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f98f 	bl	8006ef4 <_sbrk_r>
 8006bd6:	6020      	str	r0, [r4, #0]
 8006bd8:	4629      	mov	r1, r5
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f000 f98a 	bl	8006ef4 <_sbrk_r>
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	d124      	bne.n	8006c2e <_malloc_r+0x92>
 8006be4:	230c      	movs	r3, #12
 8006be6:	4630      	mov	r0, r6
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	f000 f9cc 	bl	8006f86 <__malloc_unlock>
 8006bee:	e7e4      	b.n	8006bba <_malloc_r+0x1e>
 8006bf0:	680b      	ldr	r3, [r1, #0]
 8006bf2:	1b5b      	subs	r3, r3, r5
 8006bf4:	d418      	bmi.n	8006c28 <_malloc_r+0x8c>
 8006bf6:	2b0b      	cmp	r3, #11
 8006bf8:	d90f      	bls.n	8006c1a <_malloc_r+0x7e>
 8006bfa:	600b      	str	r3, [r1, #0]
 8006bfc:	18cc      	adds	r4, r1, r3
 8006bfe:	50cd      	str	r5, [r1, r3]
 8006c00:	4630      	mov	r0, r6
 8006c02:	f000 f9c0 	bl	8006f86 <__malloc_unlock>
 8006c06:	f104 000b 	add.w	r0, r4, #11
 8006c0a:	1d23      	adds	r3, r4, #4
 8006c0c:	f020 0007 	bic.w	r0, r0, #7
 8006c10:	1ac3      	subs	r3, r0, r3
 8006c12:	d0d3      	beq.n	8006bbc <_malloc_r+0x20>
 8006c14:	425a      	negs	r2, r3
 8006c16:	50e2      	str	r2, [r4, r3]
 8006c18:	e7d0      	b.n	8006bbc <_malloc_r+0x20>
 8006c1a:	684b      	ldr	r3, [r1, #4]
 8006c1c:	428c      	cmp	r4, r1
 8006c1e:	bf16      	itet	ne
 8006c20:	6063      	strne	r3, [r4, #4]
 8006c22:	6013      	streq	r3, [r2, #0]
 8006c24:	460c      	movne	r4, r1
 8006c26:	e7eb      	b.n	8006c00 <_malloc_r+0x64>
 8006c28:	460c      	mov	r4, r1
 8006c2a:	6849      	ldr	r1, [r1, #4]
 8006c2c:	e7cc      	b.n	8006bc8 <_malloc_r+0x2c>
 8006c2e:	1cc4      	adds	r4, r0, #3
 8006c30:	f024 0403 	bic.w	r4, r4, #3
 8006c34:	42a0      	cmp	r0, r4
 8006c36:	d005      	beq.n	8006c44 <_malloc_r+0xa8>
 8006c38:	1a21      	subs	r1, r4, r0
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f000 f95a 	bl	8006ef4 <_sbrk_r>
 8006c40:	3001      	adds	r0, #1
 8006c42:	d0cf      	beq.n	8006be4 <_malloc_r+0x48>
 8006c44:	6025      	str	r5, [r4, #0]
 8006c46:	e7db      	b.n	8006c00 <_malloc_r+0x64>
 8006c48:	20000214 	.word	0x20000214
 8006c4c:	20000218 	.word	0x20000218

08006c50 <__ssputs_r>:
 8006c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c54:	688e      	ldr	r6, [r1, #8]
 8006c56:	4682      	mov	sl, r0
 8006c58:	429e      	cmp	r6, r3
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	4690      	mov	r8, r2
 8006c5e:	4699      	mov	r9, r3
 8006c60:	d837      	bhi.n	8006cd2 <__ssputs_r+0x82>
 8006c62:	898a      	ldrh	r2, [r1, #12]
 8006c64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c68:	d031      	beq.n	8006cce <__ssputs_r+0x7e>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	6825      	ldr	r5, [r4, #0]
 8006c6e:	6909      	ldr	r1, [r1, #16]
 8006c70:	1a6f      	subs	r7, r5, r1
 8006c72:	6965      	ldr	r5, [r4, #20]
 8006c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c78:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c7c:	f109 0301 	add.w	r3, r9, #1
 8006c80:	443b      	add	r3, r7
 8006c82:	429d      	cmp	r5, r3
 8006c84:	bf38      	it	cc
 8006c86:	461d      	movcc	r5, r3
 8006c88:	0553      	lsls	r3, r2, #21
 8006c8a:	d530      	bpl.n	8006cee <__ssputs_r+0x9e>
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	f7ff ff85 	bl	8006b9c <_malloc_r>
 8006c92:	4606      	mov	r6, r0
 8006c94:	b950      	cbnz	r0, 8006cac <__ssputs_r+0x5c>
 8006c96:	230c      	movs	r3, #12
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	f8ca 3000 	str.w	r3, [sl]
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cac:	463a      	mov	r2, r7
 8006cae:	6921      	ldr	r1, [r4, #16]
 8006cb0:	f7fc fc30 	bl	8003514 <memcpy>
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cbe:	81a3      	strh	r3, [r4, #12]
 8006cc0:	6126      	str	r6, [r4, #16]
 8006cc2:	443e      	add	r6, r7
 8006cc4:	6026      	str	r6, [r4, #0]
 8006cc6:	464e      	mov	r6, r9
 8006cc8:	6165      	str	r5, [r4, #20]
 8006cca:	1bed      	subs	r5, r5, r7
 8006ccc:	60a5      	str	r5, [r4, #8]
 8006cce:	454e      	cmp	r6, r9
 8006cd0:	d900      	bls.n	8006cd4 <__ssputs_r+0x84>
 8006cd2:	464e      	mov	r6, r9
 8006cd4:	4632      	mov	r2, r6
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	6820      	ldr	r0, [r4, #0]
 8006cda:	f000 f93a 	bl	8006f52 <memmove>
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	1b9b      	subs	r3, r3, r6
 8006ce4:	60a3      	str	r3, [r4, #8]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	441e      	add	r6, r3
 8006cea:	6026      	str	r6, [r4, #0]
 8006cec:	e7dc      	b.n	8006ca8 <__ssputs_r+0x58>
 8006cee:	462a      	mov	r2, r5
 8006cf0:	f000 f94a 	bl	8006f88 <_realloc_r>
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d1e2      	bne.n	8006cc0 <__ssputs_r+0x70>
 8006cfa:	6921      	ldr	r1, [r4, #16]
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	f7ff ff01 	bl	8006b04 <_free_r>
 8006d02:	e7c8      	b.n	8006c96 <__ssputs_r+0x46>

08006d04 <_svfiprintf_r>:
 8006d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d08:	461d      	mov	r5, r3
 8006d0a:	898b      	ldrh	r3, [r1, #12]
 8006d0c:	b09d      	sub	sp, #116	; 0x74
 8006d0e:	061f      	lsls	r7, r3, #24
 8006d10:	4680      	mov	r8, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	4616      	mov	r6, r2
 8006d16:	d50f      	bpl.n	8006d38 <_svfiprintf_r+0x34>
 8006d18:	690b      	ldr	r3, [r1, #16]
 8006d1a:	b96b      	cbnz	r3, 8006d38 <_svfiprintf_r+0x34>
 8006d1c:	2140      	movs	r1, #64	; 0x40
 8006d1e:	f7ff ff3d 	bl	8006b9c <_malloc_r>
 8006d22:	6020      	str	r0, [r4, #0]
 8006d24:	6120      	str	r0, [r4, #16]
 8006d26:	b928      	cbnz	r0, 8006d34 <_svfiprintf_r+0x30>
 8006d28:	230c      	movs	r3, #12
 8006d2a:	f8c8 3000 	str.w	r3, [r8]
 8006d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d32:	e0c8      	b.n	8006ec6 <_svfiprintf_r+0x1c2>
 8006d34:	2340      	movs	r3, #64	; 0x40
 8006d36:	6163      	str	r3, [r4, #20]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3c:	2320      	movs	r3, #32
 8006d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d42:	2330      	movs	r3, #48	; 0x30
 8006d44:	f04f 0b01 	mov.w	fp, #1
 8006d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d4c:	9503      	str	r5, [sp, #12]
 8006d4e:	4637      	mov	r7, r6
 8006d50:	463d      	mov	r5, r7
 8006d52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d56:	b10b      	cbz	r3, 8006d5c <_svfiprintf_r+0x58>
 8006d58:	2b25      	cmp	r3, #37	; 0x25
 8006d5a:	d13e      	bne.n	8006dda <_svfiprintf_r+0xd6>
 8006d5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006d60:	d00b      	beq.n	8006d7a <_svfiprintf_r+0x76>
 8006d62:	4653      	mov	r3, sl
 8006d64:	4632      	mov	r2, r6
 8006d66:	4621      	mov	r1, r4
 8006d68:	4640      	mov	r0, r8
 8006d6a:	f7ff ff71 	bl	8006c50 <__ssputs_r>
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f000 80a4 	beq.w	8006ebc <_svfiprintf_r+0x1b8>
 8006d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d76:	4453      	add	r3, sl
 8006d78:	9309      	str	r3, [sp, #36]	; 0x24
 8006d7a:	783b      	ldrb	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 809d 	beq.w	8006ebc <_svfiprintf_r+0x1b8>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f04f 32ff 	mov.w	r2, #4294967295
 8006d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d8c:	9304      	str	r3, [sp, #16]
 8006d8e:	9307      	str	r3, [sp, #28]
 8006d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d94:	931a      	str	r3, [sp, #104]	; 0x68
 8006d96:	462f      	mov	r7, r5
 8006d98:	2205      	movs	r2, #5
 8006d9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d9e:	4850      	ldr	r0, [pc, #320]	; (8006ee0 <_svfiprintf_r+0x1dc>)
 8006da0:	f7ff fa9c 	bl	80062dc <memchr>
 8006da4:	9b04      	ldr	r3, [sp, #16]
 8006da6:	b9d0      	cbnz	r0, 8006dde <_svfiprintf_r+0xda>
 8006da8:	06d9      	lsls	r1, r3, #27
 8006daa:	bf44      	itt	mi
 8006dac:	2220      	movmi	r2, #32
 8006dae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006db2:	071a      	lsls	r2, r3, #28
 8006db4:	bf44      	itt	mi
 8006db6:	222b      	movmi	r2, #43	; 0x2b
 8006db8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dbc:	782a      	ldrb	r2, [r5, #0]
 8006dbe:	2a2a      	cmp	r2, #42	; 0x2a
 8006dc0:	d015      	beq.n	8006dee <_svfiprintf_r+0xea>
 8006dc2:	462f      	mov	r7, r5
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	250a      	movs	r5, #10
 8006dc8:	9a07      	ldr	r2, [sp, #28]
 8006dca:	4639      	mov	r1, r7
 8006dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dd0:	3b30      	subs	r3, #48	; 0x30
 8006dd2:	2b09      	cmp	r3, #9
 8006dd4:	d94d      	bls.n	8006e72 <_svfiprintf_r+0x16e>
 8006dd6:	b1b8      	cbz	r0, 8006e08 <_svfiprintf_r+0x104>
 8006dd8:	e00f      	b.n	8006dfa <_svfiprintf_r+0xf6>
 8006dda:	462f      	mov	r7, r5
 8006ddc:	e7b8      	b.n	8006d50 <_svfiprintf_r+0x4c>
 8006dde:	4a40      	ldr	r2, [pc, #256]	; (8006ee0 <_svfiprintf_r+0x1dc>)
 8006de0:	463d      	mov	r5, r7
 8006de2:	1a80      	subs	r0, r0, r2
 8006de4:	fa0b f000 	lsl.w	r0, fp, r0
 8006de8:	4318      	orrs	r0, r3
 8006dea:	9004      	str	r0, [sp, #16]
 8006dec:	e7d3      	b.n	8006d96 <_svfiprintf_r+0x92>
 8006dee:	9a03      	ldr	r2, [sp, #12]
 8006df0:	1d11      	adds	r1, r2, #4
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	9103      	str	r1, [sp, #12]
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	db01      	blt.n	8006dfe <_svfiprintf_r+0xfa>
 8006dfa:	9207      	str	r2, [sp, #28]
 8006dfc:	e004      	b.n	8006e08 <_svfiprintf_r+0x104>
 8006dfe:	4252      	negs	r2, r2
 8006e00:	f043 0302 	orr.w	r3, r3, #2
 8006e04:	9207      	str	r2, [sp, #28]
 8006e06:	9304      	str	r3, [sp, #16]
 8006e08:	783b      	ldrb	r3, [r7, #0]
 8006e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e0c:	d10c      	bne.n	8006e28 <_svfiprintf_r+0x124>
 8006e0e:	787b      	ldrb	r3, [r7, #1]
 8006e10:	2b2a      	cmp	r3, #42	; 0x2a
 8006e12:	d133      	bne.n	8006e7c <_svfiprintf_r+0x178>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	3702      	adds	r7, #2
 8006e18:	1d1a      	adds	r2, r3, #4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	9203      	str	r2, [sp, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	bfb8      	it	lt
 8006e22:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e26:	9305      	str	r3, [sp, #20]
 8006e28:	4d2e      	ldr	r5, [pc, #184]	; (8006ee4 <_svfiprintf_r+0x1e0>)
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	7839      	ldrb	r1, [r7, #0]
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7ff fa54 	bl	80062dc <memchr>
 8006e34:	b138      	cbz	r0, 8006e46 <_svfiprintf_r+0x142>
 8006e36:	2340      	movs	r3, #64	; 0x40
 8006e38:	1b40      	subs	r0, r0, r5
 8006e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	3701      	adds	r7, #1
 8006e42:	4303      	orrs	r3, r0
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	7839      	ldrb	r1, [r7, #0]
 8006e48:	2206      	movs	r2, #6
 8006e4a:	4827      	ldr	r0, [pc, #156]	; (8006ee8 <_svfiprintf_r+0x1e4>)
 8006e4c:	1c7e      	adds	r6, r7, #1
 8006e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e52:	f7ff fa43 	bl	80062dc <memchr>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d038      	beq.n	8006ecc <_svfiprintf_r+0x1c8>
 8006e5a:	4b24      	ldr	r3, [pc, #144]	; (8006eec <_svfiprintf_r+0x1e8>)
 8006e5c:	bb13      	cbnz	r3, 8006ea4 <_svfiprintf_r+0x1a0>
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	3307      	adds	r3, #7
 8006e62:	f023 0307 	bic.w	r3, r3, #7
 8006e66:	3308      	adds	r3, #8
 8006e68:	9303      	str	r3, [sp, #12]
 8006e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6c:	444b      	add	r3, r9
 8006e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e70:	e76d      	b.n	8006d4e <_svfiprintf_r+0x4a>
 8006e72:	fb05 3202 	mla	r2, r5, r2, r3
 8006e76:	2001      	movs	r0, #1
 8006e78:	460f      	mov	r7, r1
 8006e7a:	e7a6      	b.n	8006dca <_svfiprintf_r+0xc6>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	250a      	movs	r5, #10
 8006e80:	4619      	mov	r1, r3
 8006e82:	3701      	adds	r7, #1
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	4638      	mov	r0, r7
 8006e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e8c:	3a30      	subs	r2, #48	; 0x30
 8006e8e:	2a09      	cmp	r2, #9
 8006e90:	d903      	bls.n	8006e9a <_svfiprintf_r+0x196>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0c8      	beq.n	8006e28 <_svfiprintf_r+0x124>
 8006e96:	9105      	str	r1, [sp, #20]
 8006e98:	e7c6      	b.n	8006e28 <_svfiprintf_r+0x124>
 8006e9a:	fb05 2101 	mla	r1, r5, r1, r2
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4607      	mov	r7, r0
 8006ea2:	e7f0      	b.n	8006e86 <_svfiprintf_r+0x182>
 8006ea4:	ab03      	add	r3, sp, #12
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <_svfiprintf_r+0x1ec>)
 8006eac:	a904      	add	r1, sp, #16
 8006eae:	4640      	mov	r0, r8
 8006eb0:	f7fc fbd4 	bl	800365c <_printf_float>
 8006eb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006eb8:	4681      	mov	r9, r0
 8006eba:	d1d6      	bne.n	8006e6a <_svfiprintf_r+0x166>
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	065b      	lsls	r3, r3, #25
 8006ec0:	f53f af35 	bmi.w	8006d2e <_svfiprintf_r+0x2a>
 8006ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec6:	b01d      	add	sp, #116	; 0x74
 8006ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ecc:	ab03      	add	r3, sp, #12
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <_svfiprintf_r+0x1ec>)
 8006ed4:	a904      	add	r1, sp, #16
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	f7fc fe6c 	bl	8003bb4 <_printf_i>
 8006edc:	e7ea      	b.n	8006eb4 <_svfiprintf_r+0x1b0>
 8006ede:	bf00      	nop
 8006ee0:	0800721c 	.word	0x0800721c
 8006ee4:	08007222 	.word	0x08007222
 8006ee8:	08007226 	.word	0x08007226
 8006eec:	0800365d 	.word	0x0800365d
 8006ef0:	08006c51 	.word	0x08006c51

08006ef4 <_sbrk_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4c05      	ldr	r4, [pc, #20]	; (8006f10 <_sbrk_r+0x1c>)
 8006efa:	4605      	mov	r5, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	f7fa fee6 	bl	8001cd0 <_sbrk>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d102      	bne.n	8006f0e <_sbrk_r+0x1a>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <_sbrk_r+0x1a>
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	200002b0 	.word	0x200002b0

08006f14 <strncmp>:
 8006f14:	b510      	push	{r4, lr}
 8006f16:	b16a      	cbz	r2, 8006f34 <strncmp+0x20>
 8006f18:	3901      	subs	r1, #1
 8006f1a:	1884      	adds	r4, r0, r2
 8006f1c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d103      	bne.n	8006f30 <strncmp+0x1c>
 8006f28:	42a0      	cmp	r0, r4
 8006f2a:	d001      	beq.n	8006f30 <strncmp+0x1c>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f5      	bne.n	8006f1c <strncmp+0x8>
 8006f30:	1a98      	subs	r0, r3, r2
 8006f32:	bd10      	pop	{r4, pc}
 8006f34:	4610      	mov	r0, r2
 8006f36:	e7fc      	b.n	8006f32 <strncmp+0x1e>

08006f38 <__ascii_wctomb>:
 8006f38:	b149      	cbz	r1, 8006f4e <__ascii_wctomb+0x16>
 8006f3a:	2aff      	cmp	r2, #255	; 0xff
 8006f3c:	bf8b      	itete	hi
 8006f3e:	238a      	movhi	r3, #138	; 0x8a
 8006f40:	700a      	strbls	r2, [r1, #0]
 8006f42:	6003      	strhi	r3, [r0, #0]
 8006f44:	2001      	movls	r0, #1
 8006f46:	bf88      	it	hi
 8006f48:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f4c:	4770      	bx	lr
 8006f4e:	4608      	mov	r0, r1
 8006f50:	4770      	bx	lr

08006f52 <memmove>:
 8006f52:	4288      	cmp	r0, r1
 8006f54:	b510      	push	{r4, lr}
 8006f56:	eb01 0302 	add.w	r3, r1, r2
 8006f5a:	d807      	bhi.n	8006f6c <memmove+0x1a>
 8006f5c:	1e42      	subs	r2, r0, #1
 8006f5e:	4299      	cmp	r1, r3
 8006f60:	d00a      	beq.n	8006f78 <memmove+0x26>
 8006f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f66:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f6a:	e7f8      	b.n	8006f5e <memmove+0xc>
 8006f6c:	4283      	cmp	r3, r0
 8006f6e:	d9f5      	bls.n	8006f5c <memmove+0xa>
 8006f70:	1881      	adds	r1, r0, r2
 8006f72:	1ad2      	subs	r2, r2, r3
 8006f74:	42d3      	cmn	r3, r2
 8006f76:	d100      	bne.n	8006f7a <memmove+0x28>
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f82:	e7f7      	b.n	8006f74 <memmove+0x22>

08006f84 <__malloc_lock>:
 8006f84:	4770      	bx	lr

08006f86 <__malloc_unlock>:
 8006f86:	4770      	bx	lr

08006f88 <_realloc_r>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	460e      	mov	r6, r1
 8006f90:	b921      	cbnz	r1, 8006f9c <_realloc_r+0x14>
 8006f92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f96:	4611      	mov	r1, r2
 8006f98:	f7ff be00 	b.w	8006b9c <_malloc_r>
 8006f9c:	b922      	cbnz	r2, 8006fa8 <_realloc_r+0x20>
 8006f9e:	f7ff fdb1 	bl	8006b04 <_free_r>
 8006fa2:	4625      	mov	r5, r4
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa8:	f000 f814 	bl	8006fd4 <_malloc_usable_size_r>
 8006fac:	42a0      	cmp	r0, r4
 8006fae:	d20f      	bcs.n	8006fd0 <_realloc_r+0x48>
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f7ff fdf2 	bl	8006b9c <_malloc_r>
 8006fb8:	4605      	mov	r5, r0
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d0f2      	beq.n	8006fa4 <_realloc_r+0x1c>
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	f7fc faa7 	bl	8003514 <memcpy>
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f7ff fd9b 	bl	8006b04 <_free_r>
 8006fce:	e7e9      	b.n	8006fa4 <_realloc_r+0x1c>
 8006fd0:	4635      	mov	r5, r6
 8006fd2:	e7e7      	b.n	8006fa4 <_realloc_r+0x1c>

08006fd4 <_malloc_usable_size_r>:
 8006fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd8:	1f18      	subs	r0, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bfbc      	itt	lt
 8006fde:	580b      	ldrlt	r3, [r1, r0]
 8006fe0:	18c0      	addlt	r0, r0, r3
 8006fe2:	4770      	bx	lr

08006fe4 <_init>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	bf00      	nop
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr

08006ff0 <_fini>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	bf00      	nop
 8006ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff6:	bc08      	pop	{r3}
 8006ff8:	469e      	mov	lr, r3
 8006ffa:	4770      	bx	lr
